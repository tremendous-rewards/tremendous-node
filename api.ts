/* tslint:disable */
/* eslint-disable */
/**
 * API Endpoints
 * Deliver monetary rewards and incentives to employees, customers, survey participants, and more through the Tremendous API. For organizational tasks, like managing your organization and it\'s members within Tremendous, please see the Tremendous Organizational API.
 *
 * The version of the OpenAPI document: 2
 * Contact: developers@tremendous.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * A balance transaction represents a specific movement or change in an account\'s balance. 
 * @export
 * @interface BalanceTransaction
 */
export interface BalanceTransaction {
    /**
     * Date that the transaction was created
     * @type {string}
     * @memberof BalanceTransaction
     */
    'created_at'?: string;
    /**
     * Amount of the transaction in USD
     * @type {number}
     * @memberof BalanceTransaction
     */
    'amount'?: number;
    /**
     * The updated total after the transaction. Note that this running balance may be delayed and contain `null`.
     * @type {number}
     * @memberof BalanceTransaction
     */
    'balance'?: number;
    /**
     * The action that was performed
     * @type {string}
     * @memberof BalanceTransaction
     */
    'action'?: string;
    /**
     * A brief description of the transaction
     * @type {string}
     * @memberof BalanceTransaction
     */
    'description'?: string;
}
/**
 * With a campaign you can define the look & feel of how rewards are sent out. It also lets you set the available products (different gift cards, charity, etc.) recipients can choose from.  > Note: Campaigns must be created from the Tremendous dashboard. > > • [Production Dashboard](https://app.tremendous.com) > • [Sandbox Dashboard](https://app.testflight.tremendous.com/) 
 * @export
 * @interface Campaign
 */
export interface Campaign {
    /**
     * 
     * @type {string}
     * @memberof Campaign
     */
    'id': string;
    /**
     * Name of the campaign
     * @type {string}
     * @memberof Campaign
     */
    'name': string;
    /**
     * Description of the campaign
     * @type {string}
     * @memberof Campaign
     */
    'description': string | null;
    /**
     * List of IDs of products (different gift cards, charity, etc.) that are available in this campaign. 
     * @type {Array<string>}
     * @memberof Campaign
     */
    'products': Array<string>;
}
/**
 * 
 * @export
 * @interface CreateApiKey200Response
 */
export interface CreateApiKey200Response {
    /**
     * The new API key
     * @type {string}
     * @memberof CreateApiKey200Response
     */
    'api_key'?: string;
}
/**
 * 
 * @export
 * @interface CreateInvoice
 */
export interface CreateInvoice {
    /**
     * Reference to the purchase order number within your organization
     * @type {string}
     * @memberof CreateInvoice
     */
    'po_number'?: string | null;
    /**
     * Amount of the invoice in USD
     * @type {number}
     * @memberof CreateInvoice
     */
    'amount': number;
    /**
     * A note to be included in the invoice. This is for your internal use and will not be visible to the recipient. 
     * @type {string}
     * @memberof CreateInvoice
     */
    'memo'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateInvoice200Response
 */
export interface CreateInvoice200Response {
    /**
     * 
     * @type {ListInvoices200ResponseInvoicesInner}
     * @memberof CreateInvoice200Response
     */
    'invoice': ListInvoices200ResponseInvoicesInner;
}
/**
 * 
 * @export
 * @interface CreateInvoiceRequest
 */
export interface CreateInvoiceRequest {
    /**
     * Reference to the purchase order number within your organization
     * @type {string}
     * @memberof CreateInvoiceRequest
     */
    'po_number'?: string | null;
    /**
     * Amount of the invoice in USD
     * @type {number}
     * @memberof CreateInvoiceRequest
     */
    'amount': number;
    /**
     * A note to be included in the invoice. This is for your internal use and will not be visible to the recipient. 
     * @type {string}
     * @memberof CreateInvoiceRequest
     */
    'memo'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateMember
 */
export interface CreateMember {
    /**
     * Email address of the member
     * @type {string}
     * @memberof CreateMember
     */
    'email': string;
    /**
     * Full name of the member
     * @type {string}
     * @memberof CreateMember
     */
    'name': string;
    /**
     * Role of the member within the organization.  <table>   <thead>     <tr>       <th>Role</th>       <th>Description</th>     </tr>   </thead>     <tr>       <td><code>MEMBER</code></td>       <td>Limited permissions. Can view their own reward and order histories only.</td>     </tr>     <tr>       <td><code>ADMIN</code></td>       <td>Update organization settings, invite other members to the organization, and view all member order and reward histories within their organization.</td>     </tr>   <tbody> </table> 
     * @type {string}
     * @memberof CreateMember
     */
    'role': CreateMemberRoleEnum;
}

export const CreateMemberRoleEnum = {
    Member: 'MEMBER',
    Admin: 'ADMIN'
} as const;

export type CreateMemberRoleEnum = typeof CreateMemberRoleEnum[keyof typeof CreateMemberRoleEnum];

/**
 * 
 * @export
 * @interface CreateMember200Response
 */
export interface CreateMember200Response {
    /**
     * 
     * @type {ListMembers200ResponseMembersInner}
     * @memberof CreateMember200Response
     */
    'member': ListMembers200ResponseMembersInner;
}
/**
 * 
 * @export
 * @interface CreateMemberRequest
 */
export interface CreateMemberRequest {
    /**
     * Email address of the member
     * @type {string}
     * @memberof CreateMemberRequest
     */
    'email': string;
    /**
     * Full name of the member
     * @type {string}
     * @memberof CreateMemberRequest
     */
    'name': string;
    /**
     * Role of the member within the organization.  <table>   <thead>     <tr>       <th>Role</th>       <th>Description</th>     </tr>   </thead>     <tr>       <td><code>MEMBER</code></td>       <td>Limited permissions. Can view their own reward and order histories only.</td>     </tr>     <tr>       <td><code>ADMIN</code></td>       <td>Update organization settings, invite other members to the organization, and view all member order and reward histories within their organization.</td>     </tr>   <tbody> </table> 
     * @type {string}
     * @memberof CreateMemberRequest
     */
    'role': CreateMemberRequestRoleEnum;
}

export const CreateMemberRequestRoleEnum = {
    Member: 'MEMBER',
    Admin: 'ADMIN'
} as const;

export type CreateMemberRequestRoleEnum = typeof CreateMemberRequestRoleEnum[keyof typeof CreateMemberRequestRoleEnum];

/**
 * 
 * @export
 * @interface CreateOrder200Response
 */
export interface CreateOrder200Response {
    /**
     * 
     * @type {CreateOrder200ResponseOrder}
     * @memberof CreateOrder200Response
     */
    'order': CreateOrder200ResponseOrder;
}
/**
 * An order wraps around the fulfilment of one or more rewards.
 * @export
 * @interface CreateOrder200ResponseOrder
 */
export interface CreateOrder200ResponseOrder {
    /**
     * Tremendous ID of the order
     * @type {string}
     * @memberof CreateOrder200ResponseOrder
     */
    'id': string;
    /**
     * Reference for this order, supplied by the customer.  When set, `external_id` makes order idempotent. All requests that use the same `external_id` after the initial order creation, will result in a response that returns the data of the initially created order. The response will have a `201` response code. These responses **fail** to create any further orders.  It also allows for retrieving by `external_id` instead of `id` only. 
     * @type {string}
     * @memberof CreateOrder200ResponseOrder
     */
    'external_id'?: string | null;
    /**
     * ID of the campaign in your account, that defines the available products (different gift cards, charity, etc.) that the recipient can choose from. 
     * @type {string}
     * @memberof CreateOrder200ResponseOrder
     */
    'campaign_id'?: string | null;
    /**
     * Date the order has been created
     * @type {string}
     * @memberof CreateOrder200ResponseOrder
     */
    'created_at': string;
    /**
     * Execution status of a given order  <table>   <thead>     <tr>       <th>         Status       </th>       <th>         Description       </th>     </tr>   </thead>   <tbody>     <tr>       <td>         <code>           CANCELED         </code>       </td>       <td>         The order and all of its rewards were canceled.       </td>     </tr>     <tr>       <td>         <code>           CART         </code>       </td>       <td>         The order has been created, but hasn\'t yet been processed.       </td>     </tr>     <tr>       <td>         <code>           EXECUTED         </code>       </td>       <td>         The order has been executed. Payment has been handled and rewards are being delivered (if applicable).       </td>     </tr>     <tr>       <td>         <code>           FAILED         </code>       </td>       <td>         The order could not be processed due to an error. E.g. due to insufficient funds in the account.       </td>     </tr>     <tr>       <td>         <code>           PENDING APPROVAL         </code>       </td>       <td>         The order has been created but needs approval to be executed.       </td>     </tr>   </tbody> </table> 
     * @type {string}
     * @memberof CreateOrder200ResponseOrder
     */
    'status': CreateOrder200ResponseOrderStatusEnum;
    /**
     * 
     * @type {ListOrders200ResponseOrdersInnerPayment}
     * @memberof CreateOrder200ResponseOrder
     */
    'payment'?: ListOrders200ResponseOrdersInnerPayment;
    /**
     * The ID for the invoice associated with this order
     * @type {string}
     * @memberof CreateOrder200ResponseOrder
     */
    'invoice_id'?: string;
    /**
     * 
     * @type {Array<CreateOrder200ResponseOrderRewardsInner>}
     * @memberof CreateOrder200ResponseOrder
     */
    'rewards'?: Array<CreateOrder200ResponseOrderRewardsInner>;
}

export const CreateOrder200ResponseOrderStatusEnum = {
    Canceled: 'CANCELED',
    Cart: 'CART',
    Executed: 'EXECUTED',
    Failed: 'FAILED',
    PendingApproval: 'PENDING APPROVAL'
} as const;

export type CreateOrder200ResponseOrderStatusEnum = typeof CreateOrder200ResponseOrderStatusEnum[keyof typeof CreateOrder200ResponseOrderStatusEnum];

/**
 * A single reward, sent to a recipient. A reward is always part of an order.  Either `products` or `campaign_id` must be specified. 
 * @export
 * @interface CreateOrder200ResponseOrderRewardsInner
 */
export interface CreateOrder200ResponseOrderRewardsInner {
    /**
     * Tremendous ID of the reward
     * @type {string}
     * @memberof CreateOrder200ResponseOrderRewardsInner
     */
    'id'?: string;
    /**
     * Tremendous ID of the order this reward is part of.
     * @type {string}
     * @memberof CreateOrder200ResponseOrderRewardsInner
     */
    'order_id'?: string;
    /**
     * Date the reward was created
     * @type {string}
     * @memberof CreateOrder200ResponseOrderRewardsInner
     */
    'created_at'?: string;
    /**
     * 
     * @type {ListRewards200ResponseRewardsInnerValue}
     * @memberof CreateOrder200ResponseOrderRewardsInner
     */
    'value'?: ListRewards200ResponseRewardsInnerValue;
    /**
     * 
     * @type {ListRewards200ResponseRewardsInnerRecipient}
     * @memberof CreateOrder200ResponseOrderRewardsInner
     */
    'recipient'?: ListRewards200ResponseRewardsInnerRecipient;
    /**
     * Timestamp of reward delivery within the next year. Note that if date-time is provided, the time values will be ignored.
     * @type {string}
     * @memberof CreateOrder200ResponseOrderRewardsInner
     */
    'deliver_at'?: string;
    /**
     * 
     * @type {Array<ListRewards200ResponseRewardsInnerCustomFieldsInner>}
     * @memberof CreateOrder200ResponseOrderRewardsInner
     */
    'custom_fields'?: Array<ListRewards200ResponseRewardsInnerCustomFieldsInner>;
    /**
     * 
     * @type {CreateOrder200ResponseOrderRewardsInnerDelivery}
     * @memberof CreateOrder200ResponseOrderRewardsInner
     */
    'delivery'?: CreateOrder200ResponseOrderRewardsInnerDelivery;
}
/**
 * Details on how the reward is delivered to the recipient. 
 * @export
 * @interface CreateOrder200ResponseOrderRewardsInnerDelivery
 */
export interface CreateOrder200ResponseOrderRewardsInnerDelivery {
    /**
     * How to deliver the reward to the recipient.  <table>   <thead>     <tr>       <th>Delivery Method</th>       <th>Description</th>     </tr>   </thead>   <tbody>     <tr>       <td><code>EMAIL</code></td>       <td>Deliver the reward to the recipient by email</td>     </tr>     <tr>       <td><code>LINK</code></td>       <td>         <p>Deliver the reward to the recipient via a link.</p>         <p>The link can be retrieved on a successfully ordered reward via the <code>/rewards</code> or <code>/rewards/{id}</code> endpoint. That link must then be  delivered to the recipient out-of-band.</p>       </td>     </tr>     <tr>       <td><code>PHONE</code></td>       <td>Deliver the reward to the recipient by SMS</td>     </tr>   </tbody> </table> 
     * @type {string}
     * @memberof CreateOrder200ResponseOrderRewardsInnerDelivery
     */
    'method': CreateOrder200ResponseOrderRewardsInnerDeliveryMethodEnum;
    /**
     * Current status of the delivery of the reward:  * `SCHEDULED` - Reward is scheduled for delivery and will be delivered soon. * `FAILED` - Delivery of reward failed (e.g. email bounced). * `SUCCEEDED` - Reward was successfully delivered (email or text message delivered or reward link opened). * `PENDING` - Delivery is pending but not yet scheduled. 
     * @type {string}
     * @memberof CreateOrder200ResponseOrderRewardsInnerDelivery
     */
    'status': CreateOrder200ResponseOrderRewardsInnerDeliveryStatusEnum;
    /**
     * Link to redeem the reward at. You need to deliver this link to the recipient.  Only available for rewards for which the `method` for delivery is set to `LINK`. 
     * @type {string}
     * @memberof CreateOrder200ResponseOrderRewardsInnerDelivery
     */
    'link'?: string;
}

export const CreateOrder200ResponseOrderRewardsInnerDeliveryMethodEnum = {
    Email: 'EMAIL',
    Link: 'LINK',
    Phone: 'PHONE'
} as const;

export type CreateOrder200ResponseOrderRewardsInnerDeliveryMethodEnum = typeof CreateOrder200ResponseOrderRewardsInnerDeliveryMethodEnum[keyof typeof CreateOrder200ResponseOrderRewardsInnerDeliveryMethodEnum];
export const CreateOrder200ResponseOrderRewardsInnerDeliveryStatusEnum = {
    Scheduled: 'SCHEDULED',
    Failed: 'FAILED',
    Succeeded: 'SUCCEEDED',
    Pending: 'PENDING'
} as const;

export type CreateOrder200ResponseOrderRewardsInnerDeliveryStatusEnum = typeof CreateOrder200ResponseOrderRewardsInnerDeliveryStatusEnum[keyof typeof CreateOrder200ResponseOrderRewardsInnerDeliveryStatusEnum];

/**
 * 
 * @export
 * @interface CreateOrder201Response
 */
export interface CreateOrder201Response {
    /**
     * 
     * @type {ListOrders200ResponseOrdersInner}
     * @memberof CreateOrder201Response
     */
    'order': ListOrders200ResponseOrdersInner;
}
/**
 * 
 * @export
 * @interface CreateOrderRequest
 */
export interface CreateOrderRequest {
    /**
     * Reference for this order, supplied by the customer.  When set, `external_id` makes order idempotent. All requests that use the same `external_id` after the initial order creation, will result in a response that returns the data of the initially created order. The response will have a `201` response code. These responses **fail** to create any further orders.  It also allows for retrieving by `external_id` instead of `id` only. 
     * @type {string}
     * @memberof CreateOrderRequest
     */
    'external_id'?: string | null;
    /**
     * 
     * @type {CreateOrderRequestPayment}
     * @memberof CreateOrderRequest
     */
    'payment': CreateOrderRequestPayment;
    /**
     * 
     * @type {CreateOrderRequestReward}
     * @memberof CreateOrderRequest
     */
    'reward': CreateOrderRequestReward;
}
/**
 * 
 * @export
 * @interface CreateOrderRequestPayment
 */
export interface CreateOrderRequestPayment {
    /**
     * Tremendous ID of the funding source that will be used to pay for the order. Use `balance` to use your Tremendous\'s balance.
     * @type {string}
     * @memberof CreateOrderRequestPayment
     */
    'funding_source_id': string;
}
/**
 * A single reward, sent to a recipient. A reward is always part of an order.  Either `products` or `campaign_id` must be specified. 
 * @export
 * @interface CreateOrderRequestReward
 */
export interface CreateOrderRequestReward {
    /**
     * ID of the campaign in your account, that defines the available products (different gift cards, charity, etc.) that the recipient can choose from. 
     * @type {string}
     * @memberof CreateOrderRequestReward
     */
    'campaign_id'?: string | null;
    /**
     * List of IDs of product (different gift cards, charity, etc.) that will be available to the recipient to choose from.  Providing a `products` array will override the products made available by the campaign specified using the `campaign_id` property unless the `products` array is empty. It will _not_ override other campaign attributes, like the message and customization of the look and feel. 
     * @type {Array<string>}
     * @memberof CreateOrderRequestReward
     */
    'products'?: Array<string>;
    /**
     * 
     * @type {ListRewards200ResponseRewardsInnerValue}
     * @memberof CreateOrderRequestReward
     */
    'value'?: ListRewards200ResponseRewardsInnerValue;
    /**
     * 
     * @type {ListRewards200ResponseRewardsInnerRecipient}
     * @memberof CreateOrderRequestReward
     */
    'recipient'?: ListRewards200ResponseRewardsInnerRecipient;
    /**
     * Timestamp of reward delivery within the next year. Note that if date-time is provided, the time values will be ignored.
     * @type {string}
     * @memberof CreateOrderRequestReward
     */
    'deliver_at'?: string;
    /**
     * 
     * @type {Array<ListRewards200ResponseRewardsInnerCustomFieldsInner>}
     * @memberof CreateOrderRequestReward
     */
    'custom_fields'?: Array<ListRewards200ResponseRewardsInnerCustomFieldsInner>;
    /**
     * Set this to translate the redemption experience for this reward. Pass a 2-letter [ISO-639-1 code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) for the desired language. Defaults to `en`. 
     * @type {string}
     * @memberof CreateOrderRequestReward
     */
    'language'?: string;
    /**
     * 
     * @type {CreateOrderRequestRewardDelivery}
     * @memberof CreateOrderRequestReward
     */
    'delivery'?: CreateOrderRequestRewardDelivery;
}
/**
 * Details on how the reward is delivered to the recipient. 
 * @export
 * @interface CreateOrderRequestRewardDelivery
 */
export interface CreateOrderRequestRewardDelivery {
    /**
     * How to deliver the reward to the recipient.  <table>   <thead>     <tr>       <th>Delivery Method</th>       <th>Description</th>     </tr>   </thead>   <tbody>     <tr>       <td><code>EMAIL</code></td>       <td>Deliver the reward to the recipient by email</td>     </tr>     <tr>       <td><code>LINK</code></td>       <td>         <p>Deliver the reward to the recipient via a link.</p>         <p>The link can be retrieved on a successfully ordered reward via the <code>/rewards</code> or <code>/rewards/{id}</code> endpoint. That link must then be  delivered to the recipient out-of-band.</p>       </td>     </tr>     <tr>       <td><code>PHONE</code></td>       <td>Deliver the reward to the recipient by SMS</td>     </tr>   </tbody> </table> 
     * @type {string}
     * @memberof CreateOrderRequestRewardDelivery
     */
    'method'?: CreateOrderRequestRewardDeliveryMethodEnum;
}

export const CreateOrderRequestRewardDeliveryMethodEnum = {
    Email: 'EMAIL',
    Link: 'LINK',
    Phone: 'PHONE'
} as const;

export type CreateOrderRequestRewardDeliveryMethodEnum = typeof CreateOrderRequestRewardDeliveryMethodEnum[keyof typeof CreateOrderRequestRewardDeliveryMethodEnum];

/**
 * 
 * @export
 * @interface CreateOrganization
 */
export interface CreateOrganization {
    /**
     * Name of the organization
     * @type {string}
     * @memberof CreateOrganization
     */
    'name': string;
    /**
     * URL of the website of that organization
     * @type {string}
     * @memberof CreateOrganization
     */
    'website': string;
    /**
     * Default value is `false`. Set to true to also generate an API key associated to the new organization.
     * @type {boolean}
     * @memberof CreateOrganization
     */
    'with_api_key'?: boolean;
    /**
     * 
     * @type {CreateOrganizationRequestCopySettings}
     * @memberof CreateOrganization
     */
    'copy_settings'?: CreateOrganizationRequestCopySettings;
    /**
     * Phone number of the organization. For non-US phone numbers, specify the country code (prefixed with +).
     * @type {string}
     * @memberof CreateOrganization
     */
    'phone'?: string;
}
/**
 * 
 * @export
 * @interface CreateOrganization200Response
 */
export interface CreateOrganization200Response {
    /**
     * 
     * @type {CreateOrganization200ResponseOrganization}
     * @memberof CreateOrganization200Response
     */
    'organization'?: CreateOrganization200ResponseOrganization;
}
/**
 * Organizations are a way to separate different parts of your business within the same Tremendous account. Your root Tremendous account is an organization itself and can have multiple sub-organizations.  You can assign users in your Tremendous team as members to any organization. Users can be members of multiple organizations at once.  Each organizations can have it\'s own API key. 
 * @export
 * @interface CreateOrganization200ResponseOrganization
 */
export interface CreateOrganization200ResponseOrganization {
    /**
     * 
     * @type {string}
     * @memberof CreateOrganization200ResponseOrganization
     */
    'id'?: string;
    /**
     * Name of the organization
     * @type {string}
     * @memberof CreateOrganization200ResponseOrganization
     */
    'name': string;
    /**
     * URL of the website of that organization
     * @type {string}
     * @memberof CreateOrganization200ResponseOrganization
     */
    'website': string;
    /**
     * Status of the organization. Organizations need to be approved to be able to use them to send out rewards.
     * @type {string}
     * @memberof CreateOrganization200ResponseOrganization
     */
    'status'?: CreateOrganization200ResponseOrganizationStatusEnum;
    /**
     * Timestamp of when the organization has been created.  *This field is only returned when creating an organization.* It is not returned anymore when retrieving or listing organizations. 
     * @type {string}
     * @memberof CreateOrganization200ResponseOrganization
     */
    'created_at'?: string;
    /**
     * The API key for the created organization. This property is only returned when `with_api_key` is set to `true`. 
     * @type {string}
     * @memberof CreateOrganization200ResponseOrganization
     */
    'api_key'?: string;
}

export const CreateOrganization200ResponseOrganizationStatusEnum = {
    Pending: 'PENDING',
    Approved: 'APPROVED',
    Rejected: 'REJECTED'
} as const;

export type CreateOrganization200ResponseOrganizationStatusEnum = typeof CreateOrganization200ResponseOrganizationStatusEnum[keyof typeof CreateOrganization200ResponseOrganizationStatusEnum];

/**
 * 
 * @export
 * @interface CreateOrganizationRequest
 */
export interface CreateOrganizationRequest {
    /**
     * Name of the organization
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    'name': string;
    /**
     * URL of the website of that organization
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    'website': string;
    /**
     * Default value is `false`. Set to true to also generate an API key associated to the new organization.
     * @type {boolean}
     * @memberof CreateOrganizationRequest
     */
    'with_api_key'?: boolean;
    /**
     * 
     * @type {CreateOrganizationRequestCopySettings}
     * @memberof CreateOrganizationRequest
     */
    'copy_settings'?: CreateOrganizationRequestCopySettings;
    /**
     * Phone number of the organization. For non-US phone numbers, specify the country code (prefixed with +).
     * @type {string}
     * @memberof CreateOrganizationRequest
     */
    'phone'?: string;
}
/**
 * A list of the settings that you wish to copy over to the new organization.
 * @export
 * @interface CreateOrganizationRequestCopySettings
 */
export interface CreateOrganizationRequestCopySettings {
    /**
     * Copy over the campaigns from the current organization to the new organization. Defaults to `false`.
     * @type {boolean}
     * @memberof CreateOrganizationRequestCopySettings
     */
    'campaigns'?: boolean;
    /**
     * Copy over the custom fields from the current organization to the new organization. Defaults to `false`.
     * @type {boolean}
     * @memberof CreateOrganizationRequestCopySettings
     */
    'custom_fields'?: boolean;
    /**
     * Copy over the order approvals settings from the current organization to the new organization. Defaults to `false`.
     * @type {boolean}
     * @memberof CreateOrganizationRequestCopySettings
     */
    'order_approvals'?: boolean;
    /**
     * Copy over the payment methods from the current organization to the new organization. Defaults to `false`.
     * @type {boolean}
     * @memberof CreateOrganizationRequestCopySettings
     */
    'payment_methods'?: boolean;
    /**
     * Copy over the security settings from the current organization to the new organization. Defaults to `true`.
     * @type {boolean}
     * @memberof CreateOrganizationRequestCopySettings
     */
    'security_settings'?: boolean;
    /**
     * Copy over the users from the current organization to the new organization. Defaults to `false`.
     * @type {boolean}
     * @memberof CreateOrganizationRequestCopySettings
     */
    'users'?: boolean;
}
/**
 * 
 * @export
 * @interface CreateWebhook200Response
 */
export interface CreateWebhook200Response {
    /**
     * 
     * @type {ListWebhooks200ResponseWebhooksInner}
     * @memberof CreateWebhook200Response
     */
    'webhook'?: ListWebhooks200ResponseWebhooksInner;
}
/**
 * 
 * @export
 * @interface CreateWebhookRequest
 */
export interface CreateWebhookRequest {
    /**
     * URL the webhook will make requests to
     * @type {string}
     * @memberof CreateWebhookRequest
     */
    'url': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const CurrencyCodes = {
    Usd: 'USD',
    Cad: 'CAD',
    Eur: 'EUR',
    Aed: 'AED',
    Afn: 'AFN',
    All: 'ALL',
    Amd: 'AMD',
    Ars: 'ARS',
    Aud: 'AUD',
    Azn: 'AZN',
    Bam: 'BAM',
    Bdt: 'BDT',
    Bgn: 'BGN',
    Bhd: 'BHD',
    Bif: 'BIF',
    Bnd: 'BND',
    Bob: 'BOB',
    Brl: 'BRL',
    Bwp: 'BWP',
    Byr: 'BYR',
    Bzd: 'BZD',
    Cdf: 'CDF',
    Chf: 'CHF',
    Clp: 'CLP',
    Cny: 'CNY',
    Cop: 'COP',
    Crc: 'CRC',
    Cve: 'CVE',
    Czk: 'CZK',
    Djf: 'DJF',
    Dkk: 'DKK',
    Dop: 'DOP',
    Dzd: 'DZD',
    Eek: 'EEK',
    Egp: 'EGP',
    Ern: 'ERN',
    Etb: 'ETB',
    Gbp: 'GBP',
    Gel: 'GEL',
    Ghs: 'GHS',
    Gnf: 'GNF',
    Gtq: 'GTQ',
    Hkd: 'HKD',
    Hnl: 'HNL',
    Hrk: 'HRK',
    Huf: 'HUF',
    Idr: 'IDR',
    Ils: 'ILS',
    Inr: 'INR',
    Iqd: 'IQD',
    Irr: 'IRR',
    Isk: 'ISK',
    Jmd: 'JMD',
    Jod: 'JOD',
    Jpy: 'JPY',
    Kes: 'KES',
    Khr: 'KHR',
    Krw: 'KRW',
    Kwd: 'KWD',
    Kzt: 'KZT',
    Lbp: 'LBP',
    Lkr: 'LKR',
    Ltl: 'LTL',
    Lvl: 'LVL',
    Mad: 'MAD',
    Mdl: 'MDL',
    Mga: 'MGA',
    Mkd: 'MKD',
    Mmk: 'MMK',
    Mop: 'MOP',
    Mur: 'MUR',
    Mxn: 'MXN',
    Myr: 'MYR',
    Mzn: 'MZN',
    Nad: 'NAD',
    Ngn: 'NGN',
    Nio: 'NIO',
    Nok: 'NOK',
    Npr: 'NPR',
    Nzd: 'NZD',
    Omr: 'OMR',
    Pab: 'PAB',
    Pen: 'PEN',
    Php: 'PHP',
    Pkr: 'PKR',
    Pln: 'PLN',
    Pyg: 'PYG',
    Qar: 'QAR',
    Ron: 'RON',
    Rsd: 'RSD',
    Rub: 'RUB',
    Rwf: 'RWF',
    Sar: 'SAR',
    Sdg: 'SDG',
    Sek: 'SEK',
    Sgd: 'SGD',
    Sos: 'SOS',
    Syp: 'SYP',
    Thb: 'THB',
    Tnd: 'TND',
    Top: 'TOP',
    Try: 'TRY',
    Ttd: 'TTD',
    Twd: 'TWD',
    Tzs: 'TZS',
    Uah: 'UAH',
    Ugx: 'UGX',
    Uyu: 'UYU',
    Uzs: 'UZS',
    Vef: 'VEF',
    Vnd: 'VND',
    Xaf: 'XAF',
    Xof: 'XOF',
    Yer: 'YER',
    Zar: 'ZAR',
    Zmk: 'ZMK'
} as const;

export type CurrencyCodes = typeof CurrencyCodes[keyof typeof CurrencyCodes];


/**
 * Reward custom data for searching, tracking or copy (see [Adding custom fields to orders](https://developers.tremendous.com/reference/using-custom-fields-to-add-custom-data-to-rewards).)
 * @export
 * @interface CustomField
 */
export interface CustomField {
    /**
     * Tremendous ID of the custom field
     * @type {string}
     * @memberof CustomField
     */
    'id'?: string;
    /**
     * Value of the custom field
     * @type {string}
     * @memberof CustomField
     */
    'value'?: string | null;
}
/**
 * Details on how the reward is delivered to the recipient. 
 * @export
 * @interface DeliveryDetails
 */
export interface DeliveryDetails {
    /**
     * How to deliver the reward to the recipient.  <table>   <thead>     <tr>       <th>Delivery Method</th>       <th>Description</th>     </tr>   </thead>   <tbody>     <tr>       <td><code>EMAIL</code></td>       <td>Deliver the reward to the recipient by email</td>     </tr>     <tr>       <td><code>LINK</code></td>       <td>         <p>Deliver the reward to the recipient via a link.</p>         <p>The link can be retrieved on a successfully ordered reward via the <code>/rewards</code> or <code>/rewards/{id}</code> endpoint. That link must then be  delivered to the recipient out-of-band.</p>       </td>     </tr>     <tr>       <td><code>PHONE</code></td>       <td>Deliver the reward to the recipient by SMS</td>     </tr>   </tbody> </table> 
     * @type {string}
     * @memberof DeliveryDetails
     */
    'method': DeliveryDetailsMethodEnum;
    /**
     * Current status of the delivery of the reward:  * `SCHEDULED` - Reward is scheduled for delivery and will be delivered soon. * `FAILED` - Delivery of reward failed (e.g. email bounced). * `SUCCEEDED` - Reward was successfully delivered (email or text message delivered or reward link opened). * `PENDING` - Delivery is pending but not yet scheduled. 
     * @type {string}
     * @memberof DeliveryDetails
     */
    'status': DeliveryDetailsStatusEnum;
}

export const DeliveryDetailsMethodEnum = {
    Email: 'EMAIL',
    Link: 'LINK',
    Phone: 'PHONE'
} as const;

export type DeliveryDetailsMethodEnum = typeof DeliveryDetailsMethodEnum[keyof typeof DeliveryDetailsMethodEnum];
export const DeliveryDetailsStatusEnum = {
    Scheduled: 'SCHEDULED',
    Failed: 'FAILED',
    Succeeded: 'SUCCEEDED',
    Pending: 'PENDING'
} as const;

export type DeliveryDetailsStatusEnum = typeof DeliveryDetailsStatusEnum[keyof typeof DeliveryDetailsStatusEnum];

/**
 * Details on how the reward is delivered to the recipient. 
 * @export
 * @interface DeliveryDetailsWithLink
 */
export interface DeliveryDetailsWithLink {
    /**
     * How to deliver the reward to the recipient.  <table>   <thead>     <tr>       <th>Delivery Method</th>       <th>Description</th>     </tr>   </thead>   <tbody>     <tr>       <td><code>EMAIL</code></td>       <td>Deliver the reward to the recipient by email</td>     </tr>     <tr>       <td><code>LINK</code></td>       <td>         <p>Deliver the reward to the recipient via a link.</p>         <p>The link can be retrieved on a successfully ordered reward via the <code>/rewards</code> or <code>/rewards/{id}</code> endpoint. That link must then be  delivered to the recipient out-of-band.</p>       </td>     </tr>     <tr>       <td><code>PHONE</code></td>       <td>Deliver the reward to the recipient by SMS</td>     </tr>   </tbody> </table> 
     * @type {string}
     * @memberof DeliveryDetailsWithLink
     */
    'method': DeliveryDetailsWithLinkMethodEnum;
    /**
     * Current status of the delivery of the reward:  * `SCHEDULED` - Reward is scheduled for delivery and will be delivered soon. * `FAILED` - Delivery of reward failed (e.g. email bounced). * `SUCCEEDED` - Reward was successfully delivered (email or text message delivered or reward link opened). * `PENDING` - Delivery is pending but not yet scheduled. 
     * @type {string}
     * @memberof DeliveryDetailsWithLink
     */
    'status': DeliveryDetailsWithLinkStatusEnum;
    /**
     * Link to redeem the reward at. You need to deliver this link to the recipient.  Only available for rewards for which the `method` for delivery is set to `LINK`. 
     * @type {string}
     * @memberof DeliveryDetailsWithLink
     */
    'link'?: string;
}

export const DeliveryDetailsWithLinkMethodEnum = {
    Email: 'EMAIL',
    Link: 'LINK',
    Phone: 'PHONE'
} as const;

export type DeliveryDetailsWithLinkMethodEnum = typeof DeliveryDetailsWithLinkMethodEnum[keyof typeof DeliveryDetailsWithLinkMethodEnum];
export const DeliveryDetailsWithLinkStatusEnum = {
    Scheduled: 'SCHEDULED',
    Failed: 'FAILED',
    Succeeded: 'SUCCEEDED',
    Pending: 'PENDING'
} as const;

export type DeliveryDetailsWithLinkStatusEnum = typeof DeliveryDetailsWithLinkStatusEnum[keyof typeof DeliveryDetailsWithLinkStatusEnum];

/**
 * How to deliver the reward to the recipient.  <table>   <thead>     <tr>       <th>Delivery Method</th>       <th>Description</th>     </tr>   </thead>   <tbody>     <tr>       <td><code>EMAIL</code></td>       <td>Deliver the reward to the recipient by email</td>     </tr>     <tr>       <td><code>LINK</code></td>       <td>         <p>Deliver the reward to the recipient via a link.</p>         <p>The link can be retrieved on a successfully ordered reward via the <code>/rewards</code> or <code>/rewards/{id}</code> endpoint. That link must then be  delivered to the recipient out-of-band.</p>       </td>     </tr>     <tr>       <td><code>PHONE</code></td>       <td>Deliver the reward to the recipient by SMS</td>     </tr>   </tbody> </table> 
 * @export
 * @enum {string}
 */

export const DeliveryMethod = {
    Email: 'EMAIL',
    Link: 'LINK',
    Phone: 'PHONE'
} as const;

export type DeliveryMethod = typeof DeliveryMethod[keyof typeof DeliveryMethod];


/**
 * Current status of the delivery of the reward:  * `SCHEDULED` - Reward is scheduled for delivery and will be delivered soon. * `FAILED` - Delivery of reward failed (e.g. email bounced). * `SUCCEEDED` - Reward was successfully delivered (email or text message delivered or reward link opened). * `PENDING` - Delivery is pending but not yet scheduled. 
 * @export
 * @enum {string}
 */

export const DeliveryStatus = {
    Scheduled: 'SCHEDULED',
    Failed: 'FAILED',
    Succeeded: 'SUCCEEDED',
    Pending: 'PENDING'
} as const;

export type DeliveryStatus = typeof DeliveryStatus[keyof typeof DeliveryStatus];


/**
 * 
 * @export
 * @interface ErrorModel
 */
export interface ErrorModel {
    /**
     * 
     * @type {ListRewards401ResponseErrors}
     * @memberof ErrorModel
     */
    'errors': ListRewards401ResponseErrors;
}
/**
 * 
 * @export
 * @interface Field
 */
export interface Field {
    /**
     * 
     * @type {string}
     * @memberof Field
     */
    'id'?: string;
    /**
     * Label of the field
     * @type {string}
     * @memberof Field
     */
    'label'?: string;
    /**
     * Type of the values of the field
     * @type {string}
     * @memberof Field
     */
    'data_type'?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof Field
     */
    'data'?: { [key: string]: any; };
    /**
     * Is this field required (true) or optional (false)
     * @type {boolean}
     * @memberof Field
     */
    'required'?: boolean;
    /**
     * Type of objects this field gets associated with
     * @type {string}
     * @memberof Field
     */
    'scope'?: string;
}
/**
 * 
 * @export
 * @interface FundingSource
 */
export interface FundingSource {
    /**
     * 
     * @type {string}
     * @memberof FundingSource
     */
    'id': string;
    /**
     * You can pay for rewards using different payment methods on Tremendous:  <table>   <thead>     <tr>       <th>Payment Method</th>       <th>Description</th>       </tr>   </thead>   <tbody>     <tr>       <td><code>balance</code></td>       <td>Pre-funded balance in your Tremendous account to draw funds from to send rewards to recipients.</td>     </tr>     <tr>       <td><code>bank_account</code></td>       <td>Bank account to draw funds from to send rewards to recipients.</td>     </tr>     <tr>       <td><code>credit_card</code></td>       <td>Credit card to draw funds from to send rewards to recipients.</td>     </tr>     <tr>       <td><code>invoice</code></td>       <td>Send rewards to recipients and pay by invoice.</td>     </tr>    </tbody> </table> 
     * @type {string}
     * @memberof FundingSource
     */
    'method': FundingSourceMethodEnum;
    /**
     * **Only available when `method` is set to `invoice`.** 
     * @type {string}
     * @memberof FundingSource
     */
    'type'?: FundingSourceTypeEnum;
    /**
     * 
     * @type {ListFundingSources200ResponseFundingSourcesInnerMeta}
     * @memberof FundingSource
     */
    'meta': ListFundingSources200ResponseFundingSourcesInnerMeta;
}

export const FundingSourceMethodEnum = {
    Balance: 'balance',
    BankAccount: 'bank_account',
    CreditCard: 'credit_card',
    Invoice: 'invoice'
} as const;

export type FundingSourceMethodEnum = typeof FundingSourceMethodEnum[keyof typeof FundingSourceMethodEnum];
export const FundingSourceTypeEnum = {
    Commercial: 'COMMERCIAL',
    ProForma: 'PRO_FORMA',
    PrefundingOnly: 'PREFUNDING_ONLY'
} as const;

export type FundingSourceTypeEnum = typeof FundingSourceTypeEnum[keyof typeof FundingSourceTypeEnum];

/**
 * 
 * @export
 * @interface GenerateRewardLink200Response
 */
export interface GenerateRewardLink200Response {
    /**
     * 
     * @type {GenerateRewardLink200ResponseReward}
     * @memberof GenerateRewardLink200Response
     */
    'reward': GenerateRewardLink200ResponseReward;
}
/**
 * The redemption link for a reward.
 * @export
 * @interface GenerateRewardLink200ResponseReward
 */
export interface GenerateRewardLink200ResponseReward {
    /**
     * Tremendous ID of the reward
     * @type {string}
     * @memberof GenerateRewardLink200ResponseReward
     */
    'id'?: string;
    /**
     * Link to redeem the reward at. You need to deliver this link to the recipient. 
     * @type {string}
     * @memberof GenerateRewardLink200ResponseReward
     */
    'link'?: string;
}
/**
 * 
 * @export
 * @interface GenerateRewardLink403Response
 */
export interface GenerateRewardLink403Response {
    /**
     * 
     * @type {ListRewards401ResponseErrors}
     * @memberof GenerateRewardLink403Response
     */
    'errors': ListRewards401ResponseErrors;
}
/**
 * 
 * @export
 * @interface GenerateRewardToken200Response
 */
export interface GenerateRewardToken200Response {
    /**
     * 
     * @type {GenerateRewardToken200ResponseReward}
     * @memberof GenerateRewardToken200Response
     */
    'reward': GenerateRewardToken200ResponseReward;
}
/**
 * The redemption token for a reward.
 * @export
 * @interface GenerateRewardToken200ResponseReward
 */
export interface GenerateRewardToken200ResponseReward {
    /**
     * Tremendous ID of the reward
     * @type {string}
     * @memberof GenerateRewardToken200ResponseReward
     */
    'id'?: string;
    /**
     * The token to redeem the reward. 
     * @type {string}
     * @memberof GenerateRewardToken200ResponseReward
     */
    'token'?: string;
    /**
     * Date the token expires
     * @type {string}
     * @memberof GenerateRewardToken200ResponseReward
     */
    'expires_at'?: string;
}
/**
 * 
 * @export
 * @interface GetCampaign200Response
 */
export interface GetCampaign200Response {
    /**
     * 
     * @type {ListCampaigns200ResponseCampaignsInner}
     * @memberof GetCampaign200Response
     */
    'campaign': ListCampaigns200ResponseCampaignsInner;
}
/**
 * 
 * @export
 * @interface GetFundingSource200Response
 */
export interface GetFundingSource200Response {
    /**
     * 
     * @type {ListFundingSources200ResponseFundingSourcesInner}
     * @memberof GetFundingSource200Response
     */
    'funding_source': ListFundingSources200ResponseFundingSourcesInner;
}
/**
 * 
 * @export
 * @interface GetMember200Response
 */
export interface GetMember200Response {
    /**
     * 
     * @type {GetMember200ResponseMember}
     * @memberof GetMember200Response
     */
    'member': GetMember200ResponseMember;
}
/**
 * Each organization has one or more users that can access and manage that organization. These users are called members.  Members can take actions via the Tremendous web dashboard directly.  These actions include adding funding sources to the organization, creating Campaigns, and more. 
 * @export
 * @interface GetMember200ResponseMember
 */
export interface GetMember200ResponseMember {
    /**
     * 
     * @type {string}
     * @memberof GetMember200ResponseMember
     */
    'id': string;
    /**
     * Email address of the member
     * @type {string}
     * @memberof GetMember200ResponseMember
     */
    'email': string;
    /**
     * Full name of the member
     * @type {string}
     * @memberof GetMember200ResponseMember
     */
    'name': string | null;
    /**
     * Role of the member within the organization.  <table>   <thead>     <tr>       <th>Role</th>       <th>Description</th>     </tr>   </thead>     <tr>       <td><code>MEMBER</code></td>       <td>Limited permissions. Can view their own reward and order histories only.</td>     </tr>     <tr>       <td><code>ADMIN</code></td>       <td>Update organization settings, invite other members to the organization, and view all member order and reward histories within their organization.</td>     </tr>     <tr>       <td><code>DELETED</code></td>       <td>No longer a member of this organization.</td>     </tr>   <tbody>   </tbody> </table> 
     * @type {string}
     * @memberof GetMember200ResponseMember
     */
    'role': GetMember200ResponseMemberRoleEnum;
    /**
     * Current status of the member\'s account.  When creating a member it starts out in the status `INVITED`. As soon as that member open the invitation link and registers an account, the status switches to `REGISTERED`. 
     * @type {string}
     * @memberof GetMember200ResponseMember
     */
    'status': GetMember200ResponseMemberStatusEnum;
    /**
     * List of events related to the member.
     * @type {Array<GetMember200ResponseMemberEventsInner>}
     * @memberof GetMember200ResponseMember
     */
    'events'?: Array<GetMember200ResponseMemberEventsInner>;
}

export const GetMember200ResponseMemberRoleEnum = {
    Member: 'MEMBER',
    Admin: 'ADMIN',
    Deleted: 'DELETED'
} as const;

export type GetMember200ResponseMemberRoleEnum = typeof GetMember200ResponseMemberRoleEnum[keyof typeof GetMember200ResponseMemberRoleEnum];
export const GetMember200ResponseMemberStatusEnum = {
    Registered: 'REGISTERED',
    Invited: 'INVITED'
} as const;

export type GetMember200ResponseMemberStatusEnum = typeof GetMember200ResponseMemberStatusEnum[keyof typeof GetMember200ResponseMemberStatusEnum];

/**
 * 
 * @export
 * @interface GetMember200ResponseMemberEventsInner
 */
export interface GetMember200ResponseMemberEventsInner {
    /**
     * Event type
     * @type {string}
     * @memberof GetMember200ResponseMemberEventsInner
     */
    'type'?: GetMember200ResponseMemberEventsInnerTypeEnum;
    /**
     * Timestamp when the event happened
     * @type {string}
     * @memberof GetMember200ResponseMemberEventsInner
     */
    'date_utc'?: string | null;
}

export const GetMember200ResponseMemberEventsInnerTypeEnum = {
    Created: 'created',
    LastLogin: 'last_login'
} as const;

export type GetMember200ResponseMemberEventsInnerTypeEnum = typeof GetMember200ResponseMemberEventsInnerTypeEnum[keyof typeof GetMember200ResponseMemberEventsInnerTypeEnum];

/**
 * 
 * @export
 * @interface GetOrganization200Response
 */
export interface GetOrganization200Response {
    /**
     * 
     * @type {ListOrganizations200ResponseOrganizationsInner}
     * @memberof GetOrganization200Response
     */
    'organization'?: ListOrganizations200ResponseOrganizationsInner;
}
/**
 * 
 * @export
 * @interface GetProduct200Response
 */
export interface GetProduct200Response {
    /**
     * 
     * @type {ListProducts200ResponseProductsInner}
     * @memberof GetProduct200Response
     */
    'product': ListProducts200ResponseProductsInner;
}
/**
 * 
 * @export
 * @interface GetReward200Response
 */
export interface GetReward200Response {
    /**
     * 
     * @type {ListRewards200ResponseRewardsInner}
     * @memberof GetReward200Response
     */
    'reward': ListRewards200ResponseRewardsInner;
}
/**
 * Invoices are instruments to fund your Tremendous account\'s balance.  Invoices can be created by your organization programatically. Once we receive your payment, the invoice is marked as `PAID` and we add the respective funds to your account\'s balance. 
 * @export
 * @interface Invoice
 */
export interface Invoice {
    /**
     * The invoice number
     * @type {string}
     * @memberof Invoice
     */
    'id': string;
    /**
     * Reference to the purchase order number within your organization
     * @type {string}
     * @memberof Invoice
     */
    'po_number'?: string | null;
    /**
     * Amount of the invoice in USD
     * @type {number}
     * @memberof Invoice
     */
    'amount': number;
    /**
     * Status of this invoice  <table>   <thead>     <tr>       <th>Status</th>       <th>Description</th>     </tr>   </thead>   <tbody>     <tr>       <td><code>DELETED</code></td>       <td>Invoice has been deleted by your organization</td>     </tr>     <tr>       <td><code>PAID</code></td>       <td>Invoice has been paid by your organization</td>     </tr>     <tr>       <td><code>OPEN</code></td>       <td>Invoice has been created by your organization but has not been paid, yet</td>     </tr>   </tbody> </table> 
     * @type {string}
     * @memberof Invoice
     */
    'status': InvoiceStatusEnum;
    /**
     * List of orders related to the invoice (it doesn\'t apply to prefunding)
     * @type {Array<string>}
     * @memberof Invoice
     */
    'orders'?: Array<string>;
    /**
     * List of rewards related to the invoice (it doesn\'t apply to prefunding)
     * @type {Array<string>}
     * @memberof Invoice
     */
    'rewards'?: Array<string>;
    /**
     * Timestamp of when the invoice has been created. 
     * @type {string}
     * @memberof Invoice
     */
    'created_at': string;
    /**
     * Timestamp of when the invoice has been paid. 
     * @type {string}
     * @memberof Invoice
     */
    'paid_at': string | null;
}

export const InvoiceStatusEnum = {
    Deleted: 'DELETED',
    Paid: 'PAID',
    Open: 'OPEN',
    MarkedAsPaid: 'MARKED_AS_PAID'
} as const;

export type InvoiceStatusEnum = typeof InvoiceStatusEnum[keyof typeof InvoiceStatusEnum];

/**
 * 
 * @export
 * @interface ListBalanceTransactions200Response
 */
export interface ListBalanceTransactions200Response {
    /**
     * 
     * @type {Array<ListBalanceTransactions200ResponseInvoicesInner>}
     * @memberof ListBalanceTransactions200Response
     */
    'invoices'?: Array<ListBalanceTransactions200ResponseInvoicesInner>;
}
/**
 * A balance transaction represents a specific movement or change in an account\'s balance. 
 * @export
 * @interface ListBalanceTransactions200ResponseInvoicesInner
 */
export interface ListBalanceTransactions200ResponseInvoicesInner {
    /**
     * Date that the transaction was created
     * @type {string}
     * @memberof ListBalanceTransactions200ResponseInvoicesInner
     */
    'created_at'?: string;
    /**
     * Amount of the transaction in USD
     * @type {number}
     * @memberof ListBalanceTransactions200ResponseInvoicesInner
     */
    'amount'?: number;
    /**
     * The updated total after the transaction. Note that this running balance may be delayed and contain `null`.
     * @type {number}
     * @memberof ListBalanceTransactions200ResponseInvoicesInner
     */
    'balance'?: number;
    /**
     * The action that was performed
     * @type {string}
     * @memberof ListBalanceTransactions200ResponseInvoicesInner
     */
    'action'?: string;
    /**
     * A brief description of the transaction
     * @type {string}
     * @memberof ListBalanceTransactions200ResponseInvoicesInner
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface ListCampaigns200Response
 */
export interface ListCampaigns200Response {
    /**
     * 
     * @type {Array<ListCampaigns200ResponseCampaignsInner>}
     * @memberof ListCampaigns200Response
     */
    'campaigns': Array<ListCampaigns200ResponseCampaignsInner>;
}
/**
 * With a campaign you can define the look & feel of how rewards are sent out. It also lets you set the available products (different gift cards, charity, etc.) recipients can choose from.  > Note: Campaigns must be created from the Tremendous dashboard. > > • [Production Dashboard](https://app.tremendous.com) > • [Sandbox Dashboard](https://app.testflight.tremendous.com/) 
 * @export
 * @interface ListCampaigns200ResponseCampaignsInner
 */
export interface ListCampaigns200ResponseCampaignsInner {
    /**
     * 
     * @type {string}
     * @memberof ListCampaigns200ResponseCampaignsInner
     */
    'id': string;
    /**
     * Name of the campaign
     * @type {string}
     * @memberof ListCampaigns200ResponseCampaignsInner
     */
    'name': string;
    /**
     * Description of the campaign
     * @type {string}
     * @memberof ListCampaigns200ResponseCampaignsInner
     */
    'description': string | null;
    /**
     * List of IDs of products (different gift cards, charity, etc.) that are available in this campaign. 
     * @type {Array<string>}
     * @memberof ListCampaigns200ResponseCampaignsInner
     */
    'products': Array<string>;
}
/**
 * 
 * @export
 * @interface ListFields200Response
 */
export interface ListFields200Response {
    /**
     * 
     * @type {Array<ListFields200ResponseFieldsInner>}
     * @memberof ListFields200Response
     */
    'fields'?: Array<ListFields200ResponseFieldsInner>;
}
/**
 * 
 * @export
 * @interface ListFields200ResponseFieldsInner
 */
export interface ListFields200ResponseFieldsInner {
    /**
     * 
     * @type {string}
     * @memberof ListFields200ResponseFieldsInner
     */
    'id'?: string;
    /**
     * Label of the field
     * @type {string}
     * @memberof ListFields200ResponseFieldsInner
     */
    'label'?: string;
    /**
     * Type of the values of the field
     * @type {string}
     * @memberof ListFields200ResponseFieldsInner
     */
    'data_type'?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ListFields200ResponseFieldsInner
     */
    'data'?: { [key: string]: any; };
    /**
     * Is this field required (true) or optional (false)
     * @type {boolean}
     * @memberof ListFields200ResponseFieldsInner
     */
    'required'?: boolean;
    /**
     * Type of objects this field gets associated with
     * @type {string}
     * @memberof ListFields200ResponseFieldsInner
     */
    'scope'?: string;
}
/**
 * 
 * @export
 * @interface ListFundingSources200Response
 */
export interface ListFundingSources200Response {
    /**
     * 
     * @type {Array<ListFundingSources200ResponseFundingSourcesInner>}
     * @memberof ListFundingSources200Response
     */
    'funding_sources': Array<ListFundingSources200ResponseFundingSourcesInner>;
}
/**
 * 
 * @export
 * @interface ListFundingSources200ResponseFundingSourcesInner
 */
export interface ListFundingSources200ResponseFundingSourcesInner {
    /**
     * 
     * @type {string}
     * @memberof ListFundingSources200ResponseFundingSourcesInner
     */
    'id': string;
    /**
     * You can pay for rewards using different payment methods on Tremendous:  <table>   <thead>     <tr>       <th>Payment Method</th>       <th>Description</th>       </tr>   </thead>   <tbody>     <tr>       <td><code>balance</code></td>       <td>Pre-funded balance in your Tremendous account to draw funds from to send rewards to recipients.</td>     </tr>     <tr>       <td><code>bank_account</code></td>       <td>Bank account to draw funds from to send rewards to recipients.</td>     </tr>     <tr>       <td><code>credit_card</code></td>       <td>Credit card to draw funds from to send rewards to recipients.</td>     </tr>     <tr>       <td><code>invoice</code></td>       <td>Send rewards to recipients and pay by invoice.</td>     </tr>    </tbody> </table> 
     * @type {string}
     * @memberof ListFundingSources200ResponseFundingSourcesInner
     */
    'method': ListFundingSources200ResponseFundingSourcesInnerMethodEnum;
    /**
     * **Only available when `method` is set to `invoice`.** 
     * @type {string}
     * @memberof ListFundingSources200ResponseFundingSourcesInner
     */
    'type'?: ListFundingSources200ResponseFundingSourcesInnerTypeEnum;
    /**
     * 
     * @type {ListFundingSources200ResponseFundingSourcesInnerMeta}
     * @memberof ListFundingSources200ResponseFundingSourcesInner
     */
    'meta': ListFundingSources200ResponseFundingSourcesInnerMeta;
}

export const ListFundingSources200ResponseFundingSourcesInnerMethodEnum = {
    Balance: 'balance',
    BankAccount: 'bank_account',
    CreditCard: 'credit_card',
    Invoice: 'invoice'
} as const;

export type ListFundingSources200ResponseFundingSourcesInnerMethodEnum = typeof ListFundingSources200ResponseFundingSourcesInnerMethodEnum[keyof typeof ListFundingSources200ResponseFundingSourcesInnerMethodEnum];
export const ListFundingSources200ResponseFundingSourcesInnerTypeEnum = {
    Commercial: 'COMMERCIAL',
    ProForma: 'PRO_FORMA',
    PrefundingOnly: 'PREFUNDING_ONLY'
} as const;

export type ListFundingSources200ResponseFundingSourcesInnerTypeEnum = typeof ListFundingSources200ResponseFundingSourcesInnerTypeEnum[keyof typeof ListFundingSources200ResponseFundingSourcesInnerTypeEnum];

/**
 * 
 * @export
 * @interface ListFundingSources200ResponseFundingSourcesInnerMeta
 */
export interface ListFundingSources200ResponseFundingSourcesInnerMeta {
    /**
     * **Only available when `method` is set to `balance`.**  Available amount for this funding source (in Cents USD) 
     * @type {number}
     * @memberof ListFundingSources200ResponseFundingSourcesInnerMeta
     */
    'available_cents'?: number;
    /**
     * **Only available when `method` is set to `balance`.**  Funds that are already registered on your Tremendous account but which have not yet been deposited in your account (e.g. unpaid invoices) (in Cents USD). 
     * @type {number}
     * @memberof ListFundingSources200ResponseFundingSourcesInnerMeta
     */
    'pending_cents'?: number;
    /**
     * **Only available when `method` is set to `bank_account` or `credit_card`.**  Name of the holder of the bank account or credit_card 
     * @type {string}
     * @memberof ListFundingSources200ResponseFundingSourcesInnerMeta
     */
    'accountholder_name'?: string;
    /**
     * **Only available when `method` is set to `bank_account`.**  Is this a checking or savings account 
     * @type {string}
     * @memberof ListFundingSources200ResponseFundingSourcesInnerMeta
     */
    'account_type'?: ListFundingSources200ResponseFundingSourcesInnerMetaAccountTypeEnum;
    /**
     * **Only available when `method` is set to `bank_account`.**  Name of the bank 
     * @type {string}
     * @memberof ListFundingSources200ResponseFundingSourcesInnerMeta
     */
    'bank_name'?: string;
    /**
     * **Only available when `method` is set to `bank_account`.**  Last 4 digits of the account number 
     * @type {string}
     * @memberof ListFundingSources200ResponseFundingSourcesInnerMeta
     */
    'account_number_mask'?: string;
    /**
     * **Only available when `method` is set to `bank_account`.**  Last 4 digits of the routing number 
     * @type {string}
     * @memberof ListFundingSources200ResponseFundingSourcesInnerMeta
     */
    'account_routing_mask'?: string;
    /**
     * **Only available when `method` is set to `bank_account`.**  Can refunds be deposited to this bank account 
     * @type {boolean}
     * @memberof ListFundingSources200ResponseFundingSourcesInnerMeta
     */
    'refundable'?: boolean;
    /**
     * **Only available when `method` is set to `credit_card`.**  Network of the credit card 
     * @type {string}
     * @memberof ListFundingSources200ResponseFundingSourcesInnerMeta
     */
    'network'?: ListFundingSources200ResponseFundingSourcesInnerMetaNetworkEnum;
    /**
     * **Only available when `method` is set to `credit_card`.**  Last 4 digits of the credit card number 
     * @type {string}
     * @memberof ListFundingSources200ResponseFundingSourcesInnerMeta
     */
    'last4'?: string;
    /**
     * **Only available when `method` is set to `credit_card`.**  Is this credit card expired 
     * @type {boolean}
     * @memberof ListFundingSources200ResponseFundingSourcesInnerMeta
     */
    'expired'?: boolean;
    /**
     * **Only available when `method` is set to `bank_account` or `credit_card`.**  Point in time when the last order failed using this bank account or credit card as a funding source. 
     * @type {string}
     * @memberof ListFundingSources200ResponseFundingSourcesInnerMeta
     */
    'last_payment_failed_at'?: string | null;
}

export const ListFundingSources200ResponseFundingSourcesInnerMetaAccountTypeEnum = {
    Checking: 'checking',
    Savings: 'savings'
} as const;

export type ListFundingSources200ResponseFundingSourcesInnerMetaAccountTypeEnum = typeof ListFundingSources200ResponseFundingSourcesInnerMetaAccountTypeEnum[keyof typeof ListFundingSources200ResponseFundingSourcesInnerMetaAccountTypeEnum];
export const ListFundingSources200ResponseFundingSourcesInnerMetaNetworkEnum = {
    MasterCard: 'MasterCard',
    Amex: 'Amex',
    Jcb: 'JCB',
    DinersClub: 'Diner\'s Club',
    Visa: 'visa',
    Discover: 'discover',
    Laser: 'laser',
    Elo: 'elo',
    Maestro: 'maestro',
    Solo: 'solo'
} as const;

export type ListFundingSources200ResponseFundingSourcesInnerMetaNetworkEnum = typeof ListFundingSources200ResponseFundingSourcesInnerMetaNetworkEnum[keyof typeof ListFundingSources200ResponseFundingSourcesInnerMetaNetworkEnum];

/**
 * 
 * @export
 * @interface ListInvoices200Response
 */
export interface ListInvoices200Response {
    /**
     * 
     * @type {Array<ListInvoices200ResponseInvoicesInner>}
     * @memberof ListInvoices200Response
     */
    'invoices': Array<ListInvoices200ResponseInvoicesInner>;
    /**
     * The total number of invoices across all pages
     * @type {number}
     * @memberof ListInvoices200Response
     */
    'total_count': number;
}
/**
 * Invoices are instruments to fund your Tremendous account\'s balance.  Invoices can be created by your organization programatically. Once we receive your payment, the invoice is marked as `PAID` and we add the respective funds to your account\'s balance. 
 * @export
 * @interface ListInvoices200ResponseInvoicesInner
 */
export interface ListInvoices200ResponseInvoicesInner {
    /**
     * The invoice number
     * @type {string}
     * @memberof ListInvoices200ResponseInvoicesInner
     */
    'id': string;
    /**
     * Reference to the purchase order number within your organization
     * @type {string}
     * @memberof ListInvoices200ResponseInvoicesInner
     */
    'po_number'?: string | null;
    /**
     * Amount of the invoice in USD
     * @type {number}
     * @memberof ListInvoices200ResponseInvoicesInner
     */
    'amount': number;
    /**
     * Status of this invoice  <table>   <thead>     <tr>       <th>Status</th>       <th>Description</th>     </tr>   </thead>   <tbody>     <tr>       <td><code>DELETED</code></td>       <td>Invoice has been deleted by your organization</td>     </tr>     <tr>       <td><code>PAID</code></td>       <td>Invoice has been paid by your organization</td>     </tr>     <tr>       <td><code>OPEN</code></td>       <td>Invoice has been created by your organization but has not been paid, yet</td>     </tr>   </tbody> </table> 
     * @type {string}
     * @memberof ListInvoices200ResponseInvoicesInner
     */
    'status': ListInvoices200ResponseInvoicesInnerStatusEnum;
    /**
     * List of orders related to the invoice (it doesn\'t apply to prefunding)
     * @type {Array<string>}
     * @memberof ListInvoices200ResponseInvoicesInner
     */
    'orders'?: Array<string>;
    /**
     * List of rewards related to the invoice (it doesn\'t apply to prefunding)
     * @type {Array<string>}
     * @memberof ListInvoices200ResponseInvoicesInner
     */
    'rewards'?: Array<string>;
    /**
     * Timestamp of when the invoice has been created. 
     * @type {string}
     * @memberof ListInvoices200ResponseInvoicesInner
     */
    'created_at': string;
    /**
     * Timestamp of when the invoice has been paid. 
     * @type {string}
     * @memberof ListInvoices200ResponseInvoicesInner
     */
    'paid_at': string | null;
}

export const ListInvoices200ResponseInvoicesInnerStatusEnum = {
    Deleted: 'DELETED',
    Paid: 'PAID',
    Open: 'OPEN',
    MarkedAsPaid: 'MARKED_AS_PAID'
} as const;

export type ListInvoices200ResponseInvoicesInnerStatusEnum = typeof ListInvoices200ResponseInvoicesInnerStatusEnum[keyof typeof ListInvoices200ResponseInvoicesInnerStatusEnum];

/**
 * 
 * @export
 * @interface ListMembers200Response
 */
export interface ListMembers200Response {
    /**
     * 
     * @type {Array<ListMembers200ResponseMembersInner>}
     * @memberof ListMembers200Response
     */
    'members': Array<ListMembers200ResponseMembersInner>;
}
/**
 * Each organization has one or more users that can access and manage that organization. These users are called members.  Members can take actions via the Tremendous web dashboard directly.  These actions include adding funding sources to the organization, creating Campaigns, and more. 
 * @export
 * @interface ListMembers200ResponseMembersInner
 */
export interface ListMembers200ResponseMembersInner {
    /**
     * 
     * @type {string}
     * @memberof ListMembers200ResponseMembersInner
     */
    'id': string;
    /**
     * Email address of the member
     * @type {string}
     * @memberof ListMembers200ResponseMembersInner
     */
    'email': string;
    /**
     * Full name of the member
     * @type {string}
     * @memberof ListMembers200ResponseMembersInner
     */
    'name': string | null;
    /**
     * Role of the member within the organization.  <table>   <thead>     <tr>       <th>Role</th>       <th>Description</th>     </tr>   </thead>     <tr>       <td><code>MEMBER</code></td>       <td>Limited permissions. Can view their own reward and order histories only.</td>     </tr>     <tr>       <td><code>ADMIN</code></td>       <td>Update organization settings, invite other members to the organization, and view all member order and reward histories within their organization.</td>     </tr>     <tr>       <td><code>DELETED</code></td>       <td>No longer a member of this organization.</td>     </tr>   <tbody>   </tbody> </table> 
     * @type {string}
     * @memberof ListMembers200ResponseMembersInner
     */
    'role': ListMembers200ResponseMembersInnerRoleEnum;
    /**
     * Current status of the member\'s account.  When creating a member it starts out in the status `INVITED`. As soon as that member open the invitation link and registers an account, the status switches to `REGISTERED`. 
     * @type {string}
     * @memberof ListMembers200ResponseMembersInner
     */
    'status': ListMembers200ResponseMembersInnerStatusEnum;
    /**
     * Timestamp when this member was created.  The `created_at` timestamp is **NOT** returned when retrieving a member (but is part of the response when listing or creating members). 
     * @type {string}
     * @memberof ListMembers200ResponseMembersInner
     */
    'created_at'?: string;
    /**
     * Timestamp when this member most recently logged into the dashboard of the organization associated with this API key. 
     * @type {string}
     * @memberof ListMembers200ResponseMembersInner
     */
    'last_login_at'?: string | null;
}

export const ListMembers200ResponseMembersInnerRoleEnum = {
    Member: 'MEMBER',
    Admin: 'ADMIN',
    Deleted: 'DELETED'
} as const;

export type ListMembers200ResponseMembersInnerRoleEnum = typeof ListMembers200ResponseMembersInnerRoleEnum[keyof typeof ListMembers200ResponseMembersInnerRoleEnum];
export const ListMembers200ResponseMembersInnerStatusEnum = {
    Registered: 'REGISTERED',
    Invited: 'INVITED'
} as const;

export type ListMembers200ResponseMembersInnerStatusEnum = typeof ListMembers200ResponseMembersInnerStatusEnum[keyof typeof ListMembers200ResponseMembersInnerStatusEnum];

/**
 * 
 * @export
 * @interface ListOrders200Response
 */
export interface ListOrders200Response {
    /**
     * 
     * @type {Array<ListOrders200ResponseOrdersInner>}
     * @memberof ListOrders200Response
     */
    'orders': Array<ListOrders200ResponseOrdersInner>;
    /**
     * The total number of orders across all pages
     * @type {number}
     * @memberof ListOrders200Response
     */
    'total_count': number;
}
/**
 * An order wraps around the fulfilment of one or more rewards.
 * @export
 * @interface ListOrders200ResponseOrdersInner
 */
export interface ListOrders200ResponseOrdersInner {
    /**
     * Tremendous ID of the order
     * @type {string}
     * @memberof ListOrders200ResponseOrdersInner
     */
    'id': string;
    /**
     * Reference for this order, supplied by the customer.  When set, `external_id` makes order idempotent. All requests that use the same `external_id` after the initial order creation, will result in a response that returns the data of the initially created order. The response will have a `201` response code. These responses **fail** to create any further orders.  It also allows for retrieving by `external_id` instead of `id` only. 
     * @type {string}
     * @memberof ListOrders200ResponseOrdersInner
     */
    'external_id'?: string | null;
    /**
     * ID of the campaign in your account, that defines the available products (different gift cards, charity, etc.) that the recipient can choose from. 
     * @type {string}
     * @memberof ListOrders200ResponseOrdersInner
     */
    'campaign_id'?: string | null;
    /**
     * Date the order has been created
     * @type {string}
     * @memberof ListOrders200ResponseOrdersInner
     */
    'created_at': string;
    /**
     * Execution status of a given order  <table>   <thead>     <tr>       <th>         Status       </th>       <th>         Description       </th>     </tr>   </thead>   <tbody>     <tr>       <td>         <code>           CANCELED         </code>       </td>       <td>         The order and all of its rewards were canceled.       </td>     </tr>     <tr>       <td>         <code>           CART         </code>       </td>       <td>         The order has been created, but hasn\'t yet been processed.       </td>     </tr>     <tr>       <td>         <code>           EXECUTED         </code>       </td>       <td>         The order has been executed. Payment has been handled and rewards are being delivered (if applicable).       </td>     </tr>     <tr>       <td>         <code>           FAILED         </code>       </td>       <td>         The order could not be processed due to an error. E.g. due to insufficient funds in the account.       </td>     </tr>     <tr>       <td>         <code>           PENDING APPROVAL         </code>       </td>       <td>         The order has been created but needs approval to be executed.       </td>     </tr>   </tbody> </table> 
     * @type {string}
     * @memberof ListOrders200ResponseOrdersInner
     */
    'status': ListOrders200ResponseOrdersInnerStatusEnum;
    /**
     * 
     * @type {ListOrders200ResponseOrdersInnerPayment}
     * @memberof ListOrders200ResponseOrdersInner
     */
    'payment'?: ListOrders200ResponseOrdersInnerPayment;
    /**
     * The ID for the invoice associated with this order
     * @type {string}
     * @memberof ListOrders200ResponseOrdersInner
     */
    'invoice_id'?: string;
    /**
     * 
     * @type {ListRewards200ResponseRewardsInner}
     * @memberof ListOrders200ResponseOrdersInner
     */
    'reward'?: ListRewards200ResponseRewardsInner;
}

export const ListOrders200ResponseOrdersInnerStatusEnum = {
    Canceled: 'CANCELED',
    Cart: 'CART',
    Executed: 'EXECUTED',
    Failed: 'FAILED',
    PendingApproval: 'PENDING APPROVAL'
} as const;

export type ListOrders200ResponseOrdersInnerStatusEnum = typeof ListOrders200ResponseOrdersInnerStatusEnum[keyof typeof ListOrders200ResponseOrdersInnerStatusEnum];

/**
 * Cost breakdown of the order (cost of rewards + fees). Cost and fees are always denominated in USD, independent from the currency of the ordered rewards. Note that this property will only appear for processed orders (`status` is `EXECUTED`).
 * @export
 * @interface ListOrders200ResponseOrdersInnerPayment
 */
export interface ListOrders200ResponseOrdersInnerPayment {
    /**
     * Total price of the order before fees (in USD)
     * @type {number}
     * @memberof ListOrders200ResponseOrdersInnerPayment
     */
    'subtotal'?: number;
    /**
     * Total price of the order including fees (in USD)
     * @type {number}
     * @memberof ListOrders200ResponseOrdersInnerPayment
     */
    'total'?: number;
    /**
     * Fees for the order (in USD)
     * @type {number}
     * @memberof ListOrders200ResponseOrdersInnerPayment
     */
    'fees'?: number;
    /**
     * 
     * @type {ListOrders200ResponseOrdersInnerPaymentRefund}
     * @memberof ListOrders200ResponseOrdersInnerPayment
     */
    'refund'?: ListOrders200ResponseOrdersInnerPaymentRefund;
    /**
     * Name of the channel in which the order was created
     * @type {string}
     * @memberof ListOrders200ResponseOrdersInnerPayment
     */
    'channel'?: ListOrders200ResponseOrdersInnerPaymentChannelEnum;
}

export const ListOrders200ResponseOrdersInnerPaymentChannelEnum = {
    Ui: 'UI',
    Api: 'API',
    Embed: 'EMBED',
    Decipher: 'DECIPHER',
    Qualtrics: 'QUALTRICS',
    Typeform: 'TYPEFORM',
    SurveyMonkey: 'SURVEY MONKEY'
} as const;

export type ListOrders200ResponseOrdersInnerPaymentChannelEnum = typeof ListOrders200ResponseOrdersInnerPaymentChannelEnum[keyof typeof ListOrders200ResponseOrdersInnerPaymentChannelEnum];

/**
 * Breakdown of the order refunds (total amount in USD, independent from the currency of the ordered rewards). Note that this property will only appear for canceled orders or orders with canceled rewards. 
 * @export
 * @interface ListOrders200ResponseOrdersInnerPaymentRefund
 */
export interface ListOrders200ResponseOrdersInnerPaymentRefund {
    /**
     * Total amount of the order refunds (in USD)
     * @type {number}
     * @memberof ListOrders200ResponseOrdersInnerPaymentRefund
     */
    'total': number;
}
/**
 * 
 * @export
 * @interface ListOrganizations200Response
 */
export interface ListOrganizations200Response {
    /**
     * 
     * @type {Array<ListOrganizations200ResponseOrganizationsInner>}
     * @memberof ListOrganizations200Response
     */
    'organizations'?: Array<ListOrganizations200ResponseOrganizationsInner>;
}
/**
 * Organizations are a way to separate different parts of your business within the same Tremendous account. Your root Tremendous account is an organization itself and can have multiple sub-organizations.  You can assign users in your Tremendous team as members to any organization. Users can be members of multiple organizations at once.  Each organizations can have it\'s own API key. 
 * @export
 * @interface ListOrganizations200ResponseOrganizationsInner
 */
export interface ListOrganizations200ResponseOrganizationsInner {
    /**
     * 
     * @type {string}
     * @memberof ListOrganizations200ResponseOrganizationsInner
     */
    'id'?: string;
    /**
     * Name of the organization
     * @type {string}
     * @memberof ListOrganizations200ResponseOrganizationsInner
     */
    'name': string;
    /**
     * URL of the website of that organization
     * @type {string}
     * @memberof ListOrganizations200ResponseOrganizationsInner
     */
    'website': string;
    /**
     * Status of the organization. Organizations need to be approved to be able to use them to send out rewards.
     * @type {string}
     * @memberof ListOrganizations200ResponseOrganizationsInner
     */
    'status'?: ListOrganizations200ResponseOrganizationsInnerStatusEnum;
    /**
     * Timestamp of when the organization has been created.  *This field is only returned when creating an organization.* It is not returned anymore when retrieving or listing organizations. 
     * @type {string}
     * @memberof ListOrganizations200ResponseOrganizationsInner
     */
    'created_at'?: string;
}

export const ListOrganizations200ResponseOrganizationsInnerStatusEnum = {
    Pending: 'PENDING',
    Approved: 'APPROVED',
    Rejected: 'REJECTED'
} as const;

export type ListOrganizations200ResponseOrganizationsInnerStatusEnum = typeof ListOrganizations200ResponseOrganizationsInnerStatusEnum[keyof typeof ListOrganizations200ResponseOrganizationsInnerStatusEnum];

/**
 * 
 * @export
 * @interface ListProducts200Response
 */
export interface ListProducts200Response {
    /**
     * 
     * @type {Array<ListProducts200ResponseProductsInner>}
     * @memberof ListProducts200Response
     */
    'products': Array<ListProducts200ResponseProductsInner>;
}
/**
 * A product represents one way to payout a reward to it\'s recipient. Think:  * Amazon.com gift card (ID: `OKMHM2X2OHYV`) * Donations to Save the Children (ID: `ESRNAD533W5A`) * Virtual Visa debit card (ID: `Q24BD9EZ332JT`)  each of which is one specific product on Tremendous.  > 📘 All available products > > See this [list](https://www.tremendous.com/catalog)  Products can be limited in their availability to recipients by  * geography (field `countries`) * currency (field `currencies`) * amount of the reward (field `skus`)   * e.g. adidas gift cards accept any amount between 5 and 200 USD.  See the description of each respective parameter for further details. 
 * @export
 * @interface ListProducts200ResponseProductsInner
 */
export interface ListProducts200ResponseProductsInner {
    /**
     * 
     * @type {string}
     * @memberof ListProducts200ResponseProductsInner
     */
    'id': string;
    /**
     * Name of the product
     * @type {string}
     * @memberof ListProducts200ResponseProductsInner
     */
    'name': string;
    /**
     * Detailed description of the product. Mostly used for products with a `category` of `charities`.
     * @type {string}
     * @memberof ListProducts200ResponseProductsInner
     */
    'description': string;
    /**
     * The category of this product  <table>   <thead>     <tr>       <th>Category</th>       <th>Description</th>     </tr>   </thead>   <tbody>     <tr>       <td><code>ach</code></td>       <td>Bank transfer to the recipient</td>     </tr>     <tr>       <td><code>charity</code></td>       <td>Donations to a charity</td>     </tr>     <tr>       <td><code>merchant_card</code></td>       <td>A gift card for a certain merchant (e.g. Amazon)</td>     </tr>     <tr>       <td><code>paypal</code></td>       <td>Payout via PayPal</td>     </tr>     <tr>       <td><code>venmo</code></td>       <td>Payout via Venmo</td>     </tr>     <tr>       <td><code>visa_card</code></td>       <td>Payout in form of a Visa debit card</td>     </tr>   </tbody> </table> 
     * @type {string}
     * @memberof ListProducts200ResponseProductsInner
     */
    'category': ListProducts200ResponseProductsInnerCategoryEnum;
    /**
     * Legal disclosures for this product. Can be in HTML format.
     * @type {string}
     * @memberof ListProducts200ResponseProductsInner
     */
    'disclosure': string;
    /**
     * Products may are restricted in their usage based on the amount of the reward. The `skus` array defines bands of denominations in which this product may be used for payouts. 
     * @type {Array<ListProducts200ResponseProductsInnerSkusInner>}
     * @memberof ListProducts200ResponseProductsInner
     */
    'skus'?: Array<ListProducts200ResponseProductsInnerSkusInner>;
    /**
     * Available currencies for this product
     * @type {Array<string>}
     * @memberof ListProducts200ResponseProductsInner
     */
    'currency_codes': Array<ListProducts200ResponseProductsInnerCurrencyCodesEnum>;
    /**
     * List of countries in which this product is available to recipients.
     * @type {Array<ListProducts200ResponseProductsInnerCountriesInner>}
     * @memberof ListProducts200ResponseProductsInner
     */
    'countries': Array<ListProducts200ResponseProductsInnerCountriesInner>;
    /**
     * List of product images associated with this product (e.g. logos or images of the gift cards)
     * @type {Array<ListProducts200ResponseProductsInnerImagesInner>}
     * @memberof ListProducts200ResponseProductsInner
     */
    'images': Array<ListProducts200ResponseProductsInnerImagesInner>;
}

export const ListProducts200ResponseProductsInnerCategoryEnum = {
    Ach: 'ach',
    Charity: 'charity',
    MerchantCard: 'merchant_card',
    Paypal: 'paypal',
    Venmo: 'venmo',
    VisaCard: 'visa_card'
} as const;

export type ListProducts200ResponseProductsInnerCategoryEnum = typeof ListProducts200ResponseProductsInnerCategoryEnum[keyof typeof ListProducts200ResponseProductsInnerCategoryEnum];
export const ListProducts200ResponseProductsInnerCurrencyCodesEnum = {
    Usd: 'USD',
    Cad: 'CAD',
    Eur: 'EUR',
    Aed: 'AED',
    Afn: 'AFN',
    All: 'ALL',
    Amd: 'AMD',
    Ars: 'ARS',
    Aud: 'AUD',
    Azn: 'AZN',
    Bam: 'BAM',
    Bdt: 'BDT',
    Bgn: 'BGN',
    Bhd: 'BHD',
    Bif: 'BIF',
    Bnd: 'BND',
    Bob: 'BOB',
    Brl: 'BRL',
    Bwp: 'BWP',
    Byr: 'BYR',
    Bzd: 'BZD',
    Cdf: 'CDF',
    Chf: 'CHF',
    Clp: 'CLP',
    Cny: 'CNY',
    Cop: 'COP',
    Crc: 'CRC',
    Cve: 'CVE',
    Czk: 'CZK',
    Djf: 'DJF',
    Dkk: 'DKK',
    Dop: 'DOP',
    Dzd: 'DZD',
    Eek: 'EEK',
    Egp: 'EGP',
    Ern: 'ERN',
    Etb: 'ETB',
    Gbp: 'GBP',
    Gel: 'GEL',
    Ghs: 'GHS',
    Gnf: 'GNF',
    Gtq: 'GTQ',
    Hkd: 'HKD',
    Hnl: 'HNL',
    Hrk: 'HRK',
    Huf: 'HUF',
    Idr: 'IDR',
    Ils: 'ILS',
    Inr: 'INR',
    Iqd: 'IQD',
    Irr: 'IRR',
    Isk: 'ISK',
    Jmd: 'JMD',
    Jod: 'JOD',
    Jpy: 'JPY',
    Kes: 'KES',
    Khr: 'KHR',
    Krw: 'KRW',
    Kwd: 'KWD',
    Kzt: 'KZT',
    Lbp: 'LBP',
    Lkr: 'LKR',
    Ltl: 'LTL',
    Lvl: 'LVL',
    Mad: 'MAD',
    Mdl: 'MDL',
    Mga: 'MGA',
    Mkd: 'MKD',
    Mmk: 'MMK',
    Mop: 'MOP',
    Mur: 'MUR',
    Mxn: 'MXN',
    Myr: 'MYR',
    Mzn: 'MZN',
    Nad: 'NAD',
    Ngn: 'NGN',
    Nio: 'NIO',
    Nok: 'NOK',
    Npr: 'NPR',
    Nzd: 'NZD',
    Omr: 'OMR',
    Pab: 'PAB',
    Pen: 'PEN',
    Php: 'PHP',
    Pkr: 'PKR',
    Pln: 'PLN',
    Pyg: 'PYG',
    Qar: 'QAR',
    Ron: 'RON',
    Rsd: 'RSD',
    Rub: 'RUB',
    Rwf: 'RWF',
    Sar: 'SAR',
    Sdg: 'SDG',
    Sek: 'SEK',
    Sgd: 'SGD',
    Sos: 'SOS',
    Syp: 'SYP',
    Thb: 'THB',
    Tnd: 'TND',
    Top: 'TOP',
    Try: 'TRY',
    Ttd: 'TTD',
    Twd: 'TWD',
    Tzs: 'TZS',
    Uah: 'UAH',
    Ugx: 'UGX',
    Uyu: 'UYU',
    Uzs: 'UZS',
    Vef: 'VEF',
    Vnd: 'VND',
    Xaf: 'XAF',
    Xof: 'XOF',
    Yer: 'YER',
    Zar: 'ZAR',
    Zmk: 'ZMK'
} as const;

export type ListProducts200ResponseProductsInnerCurrencyCodesEnum = typeof ListProducts200ResponseProductsInnerCurrencyCodesEnum[keyof typeof ListProducts200ResponseProductsInnerCurrencyCodesEnum];

/**
 * 
 * @export
 * @interface ListProducts200ResponseProductsInnerCountriesInner
 */
export interface ListProducts200ResponseProductsInnerCountriesInner {
    /**
     * ISO 3166 country code
     * @type {string}
     * @memberof ListProducts200ResponseProductsInnerCountriesInner
     */
    'abbr': string;
}
/**
 * 
 * @export
 * @interface ListProducts200ResponseProductsInnerImagesInner
 */
export interface ListProducts200ResponseProductsInnerImagesInner {
    /**
     * URL to this image
     * @type {string}
     * @memberof ListProducts200ResponseProductsInnerImagesInner
     */
    'src': string;
    /**
     * Type of image
     * @type {string}
     * @memberof ListProducts200ResponseProductsInnerImagesInner
     */
    'type': ListProducts200ResponseProductsInnerImagesInnerTypeEnum;
}

export const ListProducts200ResponseProductsInnerImagesInnerTypeEnum = {
    Card: 'card',
    Logo: 'logo'
} as const;

export type ListProducts200ResponseProductsInnerImagesInnerTypeEnum = typeof ListProducts200ResponseProductsInnerImagesInnerTypeEnum[keyof typeof ListProducts200ResponseProductsInnerImagesInnerTypeEnum];

/**
 * 
 * @export
 * @interface ListProducts200ResponseProductsInnerSkusInner
 */
export interface ListProducts200ResponseProductsInnerSkusInner {
    /**
     * Minimal denomination that this product supports (in the product\'s currency)
     * @type {number}
     * @memberof ListProducts200ResponseProductsInnerSkusInner
     */
    'min': number;
    /**
     * Maximum denomination that this product supports (in the product\'s currency)
     * @type {number}
     * @memberof ListProducts200ResponseProductsInnerSkusInner
     */
    'max': number;
}
/**
 * 
 * @export
 * @interface ListRewards200Response
 */
export interface ListRewards200Response {
    /**
     * 
     * @type {Array<ListRewards200ResponseRewardsInner>}
     * @memberof ListRewards200Response
     */
    'rewards'?: Array<ListRewards200ResponseRewardsInner>;
    /**
     * The total number of rewards across all pages
     * @type {number}
     * @memberof ListRewards200Response
     */
    'total_count'?: number;
}
/**
 * A single reward, sent to a recipient. A reward is always part of an order.  Either `products` or `campaign_id` must be specified. 
 * @export
 * @interface ListRewards200ResponseRewardsInner
 */
export interface ListRewards200ResponseRewardsInner {
    /**
     * Tremendous ID of the reward
     * @type {string}
     * @memberof ListRewards200ResponseRewardsInner
     */
    'id'?: string;
    /**
     * Tremendous ID of the order this reward is part of.
     * @type {string}
     * @memberof ListRewards200ResponseRewardsInner
     */
    'order_id'?: string;
    /**
     * Date the reward was created
     * @type {string}
     * @memberof ListRewards200ResponseRewardsInner
     */
    'created_at'?: string;
    /**
     * 
     * @type {ListRewards200ResponseRewardsInnerValue}
     * @memberof ListRewards200ResponseRewardsInner
     */
    'value'?: ListRewards200ResponseRewardsInnerValue;
    /**
     * 
     * @type {ListRewards200ResponseRewardsInnerRecipient}
     * @memberof ListRewards200ResponseRewardsInner
     */
    'recipient'?: ListRewards200ResponseRewardsInnerRecipient;
    /**
     * Timestamp of reward delivery within the next year. Note that if date-time is provided, the time values will be ignored.
     * @type {string}
     * @memberof ListRewards200ResponseRewardsInner
     */
    'deliver_at'?: string;
    /**
     * 
     * @type {Array<ListRewards200ResponseRewardsInnerCustomFieldsInner>}
     * @memberof ListRewards200ResponseRewardsInner
     */
    'custom_fields'?: Array<ListRewards200ResponseRewardsInnerCustomFieldsInner>;
    /**
     * 
     * @type {ListRewards200ResponseRewardsInnerDelivery}
     * @memberof ListRewards200ResponseRewardsInner
     */
    'delivery'?: ListRewards200ResponseRewardsInnerDelivery;
}
/**
 * Reward custom data for searching, tracking or copy (see [Adding custom fields to orders](https://developers.tremendous.com/reference/using-custom-fields-to-add-custom-data-to-rewards).)
 * @export
 * @interface ListRewards200ResponseRewardsInnerCustomFieldsInner
 */
export interface ListRewards200ResponseRewardsInnerCustomFieldsInner {
    /**
     * Tremendous ID of the custom field
     * @type {string}
     * @memberof ListRewards200ResponseRewardsInnerCustomFieldsInner
     */
    'id'?: string;
    /**
     * Value of the custom field
     * @type {string}
     * @memberof ListRewards200ResponseRewardsInnerCustomFieldsInner
     */
    'value'?: string | null;
}
/**
 * Details on how the reward is delivered to the recipient. 
 * @export
 * @interface ListRewards200ResponseRewardsInnerDelivery
 */
export interface ListRewards200ResponseRewardsInnerDelivery {
    /**
     * How to deliver the reward to the recipient.  <table>   <thead>     <tr>       <th>Delivery Method</th>       <th>Description</th>     </tr>   </thead>   <tbody>     <tr>       <td><code>EMAIL</code></td>       <td>Deliver the reward to the recipient by email</td>     </tr>     <tr>       <td><code>LINK</code></td>       <td>         <p>Deliver the reward to the recipient via a link.</p>         <p>The link can be retrieved on a successfully ordered reward via the <code>/rewards</code> or <code>/rewards/{id}</code> endpoint. That link must then be  delivered to the recipient out-of-band.</p>       </td>     </tr>     <tr>       <td><code>PHONE</code></td>       <td>Deliver the reward to the recipient by SMS</td>     </tr>   </tbody> </table> 
     * @type {string}
     * @memberof ListRewards200ResponseRewardsInnerDelivery
     */
    'method': ListRewards200ResponseRewardsInnerDeliveryMethodEnum;
    /**
     * Current status of the delivery of the reward:  * `SCHEDULED` - Reward is scheduled for delivery and will be delivered soon. * `FAILED` - Delivery of reward failed (e.g. email bounced). * `SUCCEEDED` - Reward was successfully delivered (email or text message delivered or reward link opened). * `PENDING` - Delivery is pending but not yet scheduled. 
     * @type {string}
     * @memberof ListRewards200ResponseRewardsInnerDelivery
     */
    'status': ListRewards200ResponseRewardsInnerDeliveryStatusEnum;
}

export const ListRewards200ResponseRewardsInnerDeliveryMethodEnum = {
    Email: 'EMAIL',
    Link: 'LINK',
    Phone: 'PHONE'
} as const;

export type ListRewards200ResponseRewardsInnerDeliveryMethodEnum = typeof ListRewards200ResponseRewardsInnerDeliveryMethodEnum[keyof typeof ListRewards200ResponseRewardsInnerDeliveryMethodEnum];
export const ListRewards200ResponseRewardsInnerDeliveryStatusEnum = {
    Scheduled: 'SCHEDULED',
    Failed: 'FAILED',
    Succeeded: 'SUCCEEDED',
    Pending: 'PENDING'
} as const;

export type ListRewards200ResponseRewardsInnerDeliveryStatusEnum = typeof ListRewards200ResponseRewardsInnerDeliveryStatusEnum[keyof typeof ListRewards200ResponseRewardsInnerDeliveryStatusEnum];

/**
 * Details of the recipient of the reward
 * @export
 * @interface ListRewards200ResponseRewardsInnerRecipient
 */
export interface ListRewards200ResponseRewardsInnerRecipient {
    /**
     * Name of the recipient
     * @type {string}
     * @memberof ListRewards200ResponseRewardsInnerRecipient
     */
    'name'?: string;
    /**
     * Email address of the recipient
     * @type {string}
     * @memberof ListRewards200ResponseRewardsInnerRecipient
     */
    'email'?: string;
    /**
     * Phone number of the recipient. For non-US phone numbers, specify the country code (prefixed with +).
     * @type {string}
     * @memberof ListRewards200ResponseRewardsInnerRecipient
     */
    'phone'?: string;
}
/**
 * 
 * @export
 * @interface ListRewards200ResponseRewardsInnerValue
 */
export interface ListRewards200ResponseRewardsInnerValue {
    /**
     * Amount of the reward
     * @type {number}
     * @memberof ListRewards200ResponseRewardsInnerValue
     */
    'denomination': number;
    /**
     * Currency of the reward
     * @type {string}
     * @memberof ListRewards200ResponseRewardsInnerValue
     */
    'currency_code': ListRewards200ResponseRewardsInnerValueCurrencyCodeEnum;
}

export const ListRewards200ResponseRewardsInnerValueCurrencyCodeEnum = {
    Usd: 'USD',
    Cad: 'CAD',
    Eur: 'EUR',
    Aed: 'AED',
    Afn: 'AFN',
    All: 'ALL',
    Amd: 'AMD',
    Ars: 'ARS',
    Aud: 'AUD',
    Azn: 'AZN',
    Bam: 'BAM',
    Bdt: 'BDT',
    Bgn: 'BGN',
    Bhd: 'BHD',
    Bif: 'BIF',
    Bnd: 'BND',
    Bob: 'BOB',
    Brl: 'BRL',
    Bwp: 'BWP',
    Byr: 'BYR',
    Bzd: 'BZD',
    Cdf: 'CDF',
    Chf: 'CHF',
    Clp: 'CLP',
    Cny: 'CNY',
    Cop: 'COP',
    Crc: 'CRC',
    Cve: 'CVE',
    Czk: 'CZK',
    Djf: 'DJF',
    Dkk: 'DKK',
    Dop: 'DOP',
    Dzd: 'DZD',
    Eek: 'EEK',
    Egp: 'EGP',
    Ern: 'ERN',
    Etb: 'ETB',
    Gbp: 'GBP',
    Gel: 'GEL',
    Ghs: 'GHS',
    Gnf: 'GNF',
    Gtq: 'GTQ',
    Hkd: 'HKD',
    Hnl: 'HNL',
    Hrk: 'HRK',
    Huf: 'HUF',
    Idr: 'IDR',
    Ils: 'ILS',
    Inr: 'INR',
    Iqd: 'IQD',
    Irr: 'IRR',
    Isk: 'ISK',
    Jmd: 'JMD',
    Jod: 'JOD',
    Jpy: 'JPY',
    Kes: 'KES',
    Khr: 'KHR',
    Krw: 'KRW',
    Kwd: 'KWD',
    Kzt: 'KZT',
    Lbp: 'LBP',
    Lkr: 'LKR',
    Ltl: 'LTL',
    Lvl: 'LVL',
    Mad: 'MAD',
    Mdl: 'MDL',
    Mga: 'MGA',
    Mkd: 'MKD',
    Mmk: 'MMK',
    Mop: 'MOP',
    Mur: 'MUR',
    Mxn: 'MXN',
    Myr: 'MYR',
    Mzn: 'MZN',
    Nad: 'NAD',
    Ngn: 'NGN',
    Nio: 'NIO',
    Nok: 'NOK',
    Npr: 'NPR',
    Nzd: 'NZD',
    Omr: 'OMR',
    Pab: 'PAB',
    Pen: 'PEN',
    Php: 'PHP',
    Pkr: 'PKR',
    Pln: 'PLN',
    Pyg: 'PYG',
    Qar: 'QAR',
    Ron: 'RON',
    Rsd: 'RSD',
    Rub: 'RUB',
    Rwf: 'RWF',
    Sar: 'SAR',
    Sdg: 'SDG',
    Sek: 'SEK',
    Sgd: 'SGD',
    Sos: 'SOS',
    Syp: 'SYP',
    Thb: 'THB',
    Tnd: 'TND',
    Top: 'TOP',
    Try: 'TRY',
    Ttd: 'TTD',
    Twd: 'TWD',
    Tzs: 'TZS',
    Uah: 'UAH',
    Ugx: 'UGX',
    Uyu: 'UYU',
    Uzs: 'UZS',
    Vef: 'VEF',
    Vnd: 'VND',
    Xaf: 'XAF',
    Xof: 'XOF',
    Yer: 'YER',
    Zar: 'ZAR',
    Zmk: 'ZMK'
} as const;

export type ListRewards200ResponseRewardsInnerValueCurrencyCodeEnum = typeof ListRewards200ResponseRewardsInnerValueCurrencyCodeEnum[keyof typeof ListRewards200ResponseRewardsInnerValueCurrencyCodeEnum];

/**
 * 
 * @export
 * @interface ListRewards401Response
 */
export interface ListRewards401Response {
    /**
     * 
     * @type {ListRewards401ResponseErrors}
     * @memberof ListRewards401Response
     */
    'errors': ListRewards401ResponseErrors;
}
/**
 * 
 * @export
 * @interface ListRewards401ResponseErrors
 */
export interface ListRewards401ResponseErrors {
    /**
     * Error message
     * @type {string}
     * @memberof ListRewards401ResponseErrors
     */
    'message'?: string;
    /**
     * Mirrors the request parameters structure, filled only with the (nested) properties that caused an error.
     * @type {object}
     * @memberof ListRewards401ResponseErrors
     */
    'payload'?: object;
}
/**
 * 
 * @export
 * @interface ListRewards429Response
 */
export interface ListRewards429Response {
    /**
     * 
     * @type {ListRewards401ResponseErrors}
     * @memberof ListRewards429Response
     */
    'errors': ListRewards401ResponseErrors;
}
/**
 * 
 * @export
 * @interface ListWebhookEvents200Response
 */
export interface ListWebhookEvents200Response {
    /**
     * 
     * @type {Array<string>}
     * @memberof ListWebhookEvents200Response
     */
    'events'?: Array<string>;
}
/**
 * 
 * @export
 * @interface ListWebhooks200Response
 */
export interface ListWebhooks200Response {
    /**
     * 
     * @type {Array<ListWebhooks200ResponseWebhooksInner>}
     * @memberof ListWebhooks200Response
     */
    'webhooks'?: Array<ListWebhooks200ResponseWebhooksInner>;
}
/**
 * 
 * @export
 * @interface ListWebhooks200ResponseWebhooksInner
 */
export interface ListWebhooks200ResponseWebhooksInner {
    /**
     * 
     * @type {string}
     * @memberof ListWebhooks200ResponseWebhooksInner
     */
    'id'?: string;
    /**
     * URL the webhook will make requests to
     * @type {string}
     * @memberof ListWebhooks200ResponseWebhooksInner
     */
    'url': string;
    /**
     * Private key for the webhook
     * @type {string}
     * @memberof ListWebhooks200ResponseWebhooksInner
     */
    'private_key'?: string;
}
/**
 * Each organization has one or more users that can access and manage that organization. These users are called members.  Members can take actions via the Tremendous web dashboard directly.  These actions include adding funding sources to the organization, creating Campaigns, and more. 
 * @export
 * @interface Member
 */
export interface Member {
    /**
     * 
     * @type {string}
     * @memberof Member
     */
    'id': string;
    /**
     * Email address of the member
     * @type {string}
     * @memberof Member
     */
    'email': string;
    /**
     * Full name of the member
     * @type {string}
     * @memberof Member
     */
    'name': string | null;
    /**
     * Role of the member within the organization.  <table>   <thead>     <tr>       <th>Role</th>       <th>Description</th>     </tr>   </thead>     <tr>       <td><code>MEMBER</code></td>       <td>Limited permissions. Can view their own reward and order histories only.</td>     </tr>     <tr>       <td><code>ADMIN</code></td>       <td>Update organization settings, invite other members to the organization, and view all member order and reward histories within their organization.</td>     </tr>     <tr>       <td><code>DELETED</code></td>       <td>No longer a member of this organization.</td>     </tr>   <tbody>   </tbody> </table> 
     * @type {string}
     * @memberof Member
     */
    'role': MemberRoleEnum;
    /**
     * Current status of the member\'s account.  When creating a member it starts out in the status `INVITED`. As soon as that member open the invitation link and registers an account, the status switches to `REGISTERED`. 
     * @type {string}
     * @memberof Member
     */
    'status': MemberStatusEnum;
    /**
     * Timestamp when this member was created.  The `created_at` timestamp is **NOT** returned when retrieving a member (but is part of the response when listing or creating members). 
     * @type {string}
     * @memberof Member
     */
    'created_at'?: string;
    /**
     * Timestamp when this member most recently logged into the dashboard of the organization associated with this API key. 
     * @type {string}
     * @memberof Member
     */
    'last_login_at'?: string | null;
}

export const MemberRoleEnum = {
    Member: 'MEMBER',
    Admin: 'ADMIN',
    Deleted: 'DELETED'
} as const;

export type MemberRoleEnum = typeof MemberRoleEnum[keyof typeof MemberRoleEnum];
export const MemberStatusEnum = {
    Registered: 'REGISTERED',
    Invited: 'INVITED'
} as const;

export type MemberStatusEnum = typeof MemberStatusEnum[keyof typeof MemberStatusEnum];

/**
 * Each organization has one or more users that can access and manage that organization. These users are called members.  Members can take actions via the Tremendous web dashboard directly.  These actions include adding funding sources to the organization, creating Campaigns, and more. 
 * @export
 * @interface MemberBase
 */
export interface MemberBase {
    /**
     * 
     * @type {string}
     * @memberof MemberBase
     */
    'id': string;
    /**
     * Email address of the member
     * @type {string}
     * @memberof MemberBase
     */
    'email': string;
    /**
     * Full name of the member
     * @type {string}
     * @memberof MemberBase
     */
    'name': string | null;
    /**
     * Role of the member within the organization.  <table>   <thead>     <tr>       <th>Role</th>       <th>Description</th>     </tr>   </thead>     <tr>       <td><code>MEMBER</code></td>       <td>Limited permissions. Can view their own reward and order histories only.</td>     </tr>     <tr>       <td><code>ADMIN</code></td>       <td>Update organization settings, invite other members to the organization, and view all member order and reward histories within their organization.</td>     </tr>     <tr>       <td><code>DELETED</code></td>       <td>No longer a member of this organization.</td>     </tr>   <tbody>   </tbody> </table> 
     * @type {string}
     * @memberof MemberBase
     */
    'role': MemberBaseRoleEnum;
    /**
     * Current status of the member\'s account.  When creating a member it starts out in the status `INVITED`. As soon as that member open the invitation link and registers an account, the status switches to `REGISTERED`. 
     * @type {string}
     * @memberof MemberBase
     */
    'status': MemberBaseStatusEnum;
}

export const MemberBaseRoleEnum = {
    Member: 'MEMBER',
    Admin: 'ADMIN',
    Deleted: 'DELETED'
} as const;

export type MemberBaseRoleEnum = typeof MemberBaseRoleEnum[keyof typeof MemberBaseRoleEnum];
export const MemberBaseStatusEnum = {
    Registered: 'REGISTERED',
    Invited: 'INVITED'
} as const;

export type MemberBaseStatusEnum = typeof MemberBaseStatusEnum[keyof typeof MemberBaseStatusEnum];

/**
 * Each organization has one or more users that can access and manage that organization. These users are called members.  Members can take actions via the Tremendous web dashboard directly.  These actions include adding funding sources to the organization, creating Campaigns, and more. 
 * @export
 * @interface MemberWithEvents
 */
export interface MemberWithEvents {
    /**
     * 
     * @type {string}
     * @memberof MemberWithEvents
     */
    'id': string;
    /**
     * Email address of the member
     * @type {string}
     * @memberof MemberWithEvents
     */
    'email': string;
    /**
     * Full name of the member
     * @type {string}
     * @memberof MemberWithEvents
     */
    'name': string | null;
    /**
     * Role of the member within the organization.  <table>   <thead>     <tr>       <th>Role</th>       <th>Description</th>     </tr>   </thead>     <tr>       <td><code>MEMBER</code></td>       <td>Limited permissions. Can view their own reward and order histories only.</td>     </tr>     <tr>       <td><code>ADMIN</code></td>       <td>Update organization settings, invite other members to the organization, and view all member order and reward histories within their organization.</td>     </tr>     <tr>       <td><code>DELETED</code></td>       <td>No longer a member of this organization.</td>     </tr>   <tbody>   </tbody> </table> 
     * @type {string}
     * @memberof MemberWithEvents
     */
    'role': MemberWithEventsRoleEnum;
    /**
     * Current status of the member\'s account.  When creating a member it starts out in the status `INVITED`. As soon as that member open the invitation link and registers an account, the status switches to `REGISTERED`. 
     * @type {string}
     * @memberof MemberWithEvents
     */
    'status': MemberWithEventsStatusEnum;
    /**
     * List of events related to the member.
     * @type {Array<GetMember200ResponseMemberEventsInner>}
     * @memberof MemberWithEvents
     */
    'events'?: Array<GetMember200ResponseMemberEventsInner>;
}

export const MemberWithEventsRoleEnum = {
    Member: 'MEMBER',
    Admin: 'ADMIN',
    Deleted: 'DELETED'
} as const;

export type MemberWithEventsRoleEnum = typeof MemberWithEventsRoleEnum[keyof typeof MemberWithEventsRoleEnum];
export const MemberWithEventsStatusEnum = {
    Registered: 'REGISTERED',
    Invited: 'INVITED'
} as const;

export type MemberWithEventsStatusEnum = typeof MemberWithEventsStatusEnum[keyof typeof MemberWithEventsStatusEnum];

/**
 * Each organization has one or more users that can access and manage that organization. These users are called members.  Members can take actions via the Tremendous web dashboard directly.  These actions include adding funding sources to the organization, creating Campaigns, and more. 
 * @export
 * @interface MemberWithoutEvents
 */
export interface MemberWithoutEvents {
    /**
     * 
     * @type {string}
     * @memberof MemberWithoutEvents
     */
    'id': string;
    /**
     * Email address of the member
     * @type {string}
     * @memberof MemberWithoutEvents
     */
    'email': string;
    /**
     * Full name of the member
     * @type {string}
     * @memberof MemberWithoutEvents
     */
    'name': string | null;
    /**
     * Role of the member within the organization.  <table>   <thead>     <tr>       <th>Role</th>       <th>Description</th>     </tr>   </thead>     <tr>       <td><code>MEMBER</code></td>       <td>Limited permissions. Can view their own reward and order histories only.</td>     </tr>     <tr>       <td><code>ADMIN</code></td>       <td>Update organization settings, invite other members to the organization, and view all member order and reward histories within their organization.</td>     </tr>     <tr>       <td><code>DELETED</code></td>       <td>No longer a member of this organization.</td>     </tr>   <tbody>   </tbody> </table> 
     * @type {string}
     * @memberof MemberWithoutEvents
     */
    'role': MemberWithoutEventsRoleEnum;
    /**
     * Current status of the member\'s account.  When creating a member it starts out in the status `INVITED`. As soon as that member open the invitation link and registers an account, the status switches to `REGISTERED`. 
     * @type {string}
     * @memberof MemberWithoutEvents
     */
    'status': MemberWithoutEventsStatusEnum;
    /**
     * Timestamp when this member was created.  The `created_at` timestamp is **NOT** returned when retrieving a member (but is part of the response when listing or creating members). 
     * @type {string}
     * @memberof MemberWithoutEvents
     */
    'created_at'?: string;
    /**
     * Timestamp when this member most recently logged into the dashboard of the organization associated with this API key. 
     * @type {string}
     * @memberof MemberWithoutEvents
     */
    'last_login_at'?: string | null;
}

export const MemberWithoutEventsRoleEnum = {
    Member: 'MEMBER',
    Admin: 'ADMIN',
    Deleted: 'DELETED'
} as const;

export type MemberWithoutEventsRoleEnum = typeof MemberWithoutEventsRoleEnum[keyof typeof MemberWithoutEventsRoleEnum];
export const MemberWithoutEventsStatusEnum = {
    Registered: 'REGISTERED',
    Invited: 'INVITED'
} as const;

export type MemberWithoutEventsStatusEnum = typeof MemberWithoutEventsStatusEnum[keyof typeof MemberWithoutEventsStatusEnum];

/**
 * An order wraps around the fulfilment of one or more rewards.
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * Tremendous ID of the order
     * @type {string}
     * @memberof Order
     */
    'id': string;
    /**
     * Reference for this order, supplied by the customer.  When set, `external_id` makes order idempotent. All requests that use the same `external_id` after the initial order creation, will result in a response that returns the data of the initially created order. The response will have a `201` response code. These responses **fail** to create any further orders.  It also allows for retrieving by `external_id` instead of `id` only. 
     * @type {string}
     * @memberof Order
     */
    'external_id'?: string | null;
    /**
     * ID of the campaign in your account, that defines the available products (different gift cards, charity, etc.) that the recipient can choose from. 
     * @type {string}
     * @memberof Order
     */
    'campaign_id'?: string | null;
    /**
     * Date the order has been created
     * @type {string}
     * @memberof Order
     */
    'created_at': string;
    /**
     * Execution status of a given order  <table>   <thead>     <tr>       <th>         Status       </th>       <th>         Description       </th>     </tr>   </thead>   <tbody>     <tr>       <td>         <code>           CANCELED         </code>       </td>       <td>         The order and all of its rewards were canceled.       </td>     </tr>     <tr>       <td>         <code>           CART         </code>       </td>       <td>         The order has been created, but hasn\'t yet been processed.       </td>     </tr>     <tr>       <td>         <code>           EXECUTED         </code>       </td>       <td>         The order has been executed. Payment has been handled and rewards are being delivered (if applicable).       </td>     </tr>     <tr>       <td>         <code>           FAILED         </code>       </td>       <td>         The order could not be processed due to an error. E.g. due to insufficient funds in the account.       </td>     </tr>     <tr>       <td>         <code>           PENDING APPROVAL         </code>       </td>       <td>         The order has been created but needs approval to be executed.       </td>     </tr>   </tbody> </table> 
     * @type {string}
     * @memberof Order
     */
    'status': OrderStatusEnum;
    /**
     * 
     * @type {OrderBasePayment}
     * @memberof Order
     */
    'payment'?: OrderBasePayment;
    /**
     * The ID for the invoice associated with this order
     * @type {string}
     * @memberof Order
     */
    'invoice_id'?: string;
    /**
     * 
     * @type {OrderWithoutLinkReward}
     * @memberof Order
     */
    'reward'?: OrderWithoutLinkReward;
}

export const OrderStatusEnum = {
    Canceled: 'CANCELED',
    Cart: 'CART',
    Executed: 'EXECUTED',
    Failed: 'FAILED',
    PendingApproval: 'PENDING APPROVAL'
} as const;

export type OrderStatusEnum = typeof OrderStatusEnum[keyof typeof OrderStatusEnum];

/**
 * An order wraps around the fulfilment of one or more rewards.
 * @export
 * @interface OrderBase
 */
export interface OrderBase {
    /**
     * Tremendous ID of the order
     * @type {string}
     * @memberof OrderBase
     */
    'id': string;
    /**
     * Reference for this order, supplied by the customer.  When set, `external_id` makes order idempotent. All requests that use the same `external_id` after the initial order creation, will result in a response that returns the data of the initially created order. The response will have a `201` response code. These responses **fail** to create any further orders.  It also allows for retrieving by `external_id` instead of `id` only. 
     * @type {string}
     * @memberof OrderBase
     */
    'external_id'?: string | null;
    /**
     * ID of the campaign in your account, that defines the available products (different gift cards, charity, etc.) that the recipient can choose from. 
     * @type {string}
     * @memberof OrderBase
     */
    'campaign_id'?: string | null;
    /**
     * Date the order has been created
     * @type {string}
     * @memberof OrderBase
     */
    'created_at': string;
    /**
     * Execution status of a given order  <table>   <thead>     <tr>       <th>         Status       </th>       <th>         Description       </th>     </tr>   </thead>   <tbody>     <tr>       <td>         <code>           CANCELED         </code>       </td>       <td>         The order and all of its rewards were canceled.       </td>     </tr>     <tr>       <td>         <code>           CART         </code>       </td>       <td>         The order has been created, but hasn\'t yet been processed.       </td>     </tr>     <tr>       <td>         <code>           EXECUTED         </code>       </td>       <td>         The order has been executed. Payment has been handled and rewards are being delivered (if applicable).       </td>     </tr>     <tr>       <td>         <code>           FAILED         </code>       </td>       <td>         The order could not be processed due to an error. E.g. due to insufficient funds in the account.       </td>     </tr>     <tr>       <td>         <code>           PENDING APPROVAL         </code>       </td>       <td>         The order has been created but needs approval to be executed.       </td>     </tr>   </tbody> </table> 
     * @type {string}
     * @memberof OrderBase
     */
    'status': OrderBaseStatusEnum;
    /**
     * 
     * @type {OrderBasePayment}
     * @memberof OrderBase
     */
    'payment'?: OrderBasePayment;
    /**
     * The ID for the invoice associated with this order
     * @type {string}
     * @memberof OrderBase
     */
    'invoice_id'?: string;
}

export const OrderBaseStatusEnum = {
    Canceled: 'CANCELED',
    Cart: 'CART',
    Executed: 'EXECUTED',
    Failed: 'FAILED',
    PendingApproval: 'PENDING APPROVAL'
} as const;

export type OrderBaseStatusEnum = typeof OrderBaseStatusEnum[keyof typeof OrderBaseStatusEnum];

/**
 * Cost breakdown of the order (cost of rewards + fees). Cost and fees are always denominated in USD, independent from the currency of the ordered rewards. Note that this property will only appear for processed orders (`status` is `EXECUTED`).
 * @export
 * @interface OrderBasePayment
 */
export interface OrderBasePayment {
    /**
     * Total price of the order before fees (in USD)
     * @type {number}
     * @memberof OrderBasePayment
     */
    'subtotal'?: number;
    /**
     * Total price of the order including fees (in USD)
     * @type {number}
     * @memberof OrderBasePayment
     */
    'total'?: number;
    /**
     * Fees for the order (in USD)
     * @type {number}
     * @memberof OrderBasePayment
     */
    'fees'?: number;
    /**
     * 
     * @type {PaymentDetailsRefund}
     * @memberof OrderBasePayment
     */
    'refund'?: PaymentDetailsRefund;
    /**
     * Name of the channel in which the order was created
     * @type {string}
     * @memberof OrderBasePayment
     */
    'channel'?: OrderBasePaymentChannelEnum;
}

export const OrderBasePaymentChannelEnum = {
    Ui: 'UI',
    Api: 'API',
    Embed: 'EMBED',
    Decipher: 'DECIPHER',
    Qualtrics: 'QUALTRICS',
    Typeform: 'TYPEFORM',
    SurveyMonkey: 'SURVEY MONKEY'
} as const;

export type OrderBasePaymentChannelEnum = typeof OrderBasePaymentChannelEnum[keyof typeof OrderBasePaymentChannelEnum];

/**
 * 
 * @export
 * @interface OrderForCreate
 */
export interface OrderForCreate {
    /**
     * Reference for this order, supplied by the customer.  When set, `external_id` makes order idempotent. All requests that use the same `external_id` after the initial order creation, will result in a response that returns the data of the initially created order. The response will have a `201` response code. These responses **fail** to create any further orders.  It also allows for retrieving by `external_id` instead of `id` only. 
     * @type {string}
     * @memberof OrderForCreate
     */
    'external_id'?: string | null;
    /**
     * 
     * @type {CreateOrderRequestPayment}
     * @memberof OrderForCreate
     */
    'payment': CreateOrderRequestPayment;
    /**
     * 
     * @type {OrderForCreateReward}
     * @memberof OrderForCreate
     */
    'reward': OrderForCreateReward;
}
/**
 * A single reward, sent to a recipient. A reward is always part of an order.  Either `products` or `campaign_id` must be specified. 
 * @export
 * @interface OrderForCreateReward
 */
export interface OrderForCreateReward {
    /**
     * Tremendous ID of the reward
     * @type {string}
     * @memberof OrderForCreateReward
     */
    'id'?: string;
    /**
     * Tremendous ID of the order this reward is part of.
     * @type {string}
     * @memberof OrderForCreateReward
     */
    'order_id'?: string;
    /**
     * Date the reward was created
     * @type {string}
     * @memberof OrderForCreateReward
     */
    'created_at'?: string;
    /**
     * ID of the campaign in your account, that defines the available products (different gift cards, charity, etc.) that the recipient can choose from. 
     * @type {string}
     * @memberof OrderForCreateReward
     */
    'campaign_id'?: string | null;
    /**
     * List of IDs of product (different gift cards, charity, etc.) that will be available to the recipient to choose from.  Providing a `products` array will override the products made available by the campaign specified using the `campaign_id` property unless the `products` array is empty. It will _not_ override other campaign attributes, like the message and customization of the look and feel. 
     * @type {Array<string>}
     * @memberof OrderForCreateReward
     */
    'products'?: Array<string>;
    /**
     * 
     * @type {ListRewards200ResponseRewardsInnerValue}
     * @memberof OrderForCreateReward
     */
    'value'?: ListRewards200ResponseRewardsInnerValue;
    /**
     * 
     * @type {ListRewards200ResponseRewardsInnerRecipient}
     * @memberof OrderForCreateReward
     */
    'recipient'?: ListRewards200ResponseRewardsInnerRecipient;
    /**
     * Timestamp of reward delivery within the next year. Note that if date-time is provided, the time values will be ignored.
     * @type {string}
     * @memberof OrderForCreateReward
     */
    'deliver_at'?: string;
    /**
     * 
     * @type {Array<RewardBaseCustomFieldsInner>}
     * @memberof OrderForCreateReward
     */
    'custom_fields'?: Array<RewardBaseCustomFieldsInner>;
    /**
     * Set this to translate the redemption experience for this reward. Pass a 2-letter [ISO-639-1 code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) for the desired language. Defaults to `en`. 
     * @type {string}
     * @memberof OrderForCreateReward
     */
    'language'?: string;
    /**
     * 
     * @type {CreateOrderRequestRewardDelivery}
     * @memberof OrderForCreateReward
     */
    'delivery'?: CreateOrderRequestRewardDelivery;
}
/**
 * Execution status of a given order  <table>   <thead>     <tr>       <th>         Status       </th>       <th>         Description       </th>     </tr>   </thead>   <tbody>     <tr>       <td>         <code>           CANCELED         </code>       </td>       <td>         The order and all of its rewards were canceled.       </td>     </tr>     <tr>       <td>         <code>           CART         </code>       </td>       <td>         The order has been created, but hasn\'t yet been processed.       </td>     </tr>     <tr>       <td>         <code>           EXECUTED         </code>       </td>       <td>         The order has been executed. Payment has been handled and rewards are being delivered (if applicable).       </td>     </tr>     <tr>       <td>         <code>           FAILED         </code>       </td>       <td>         The order could not be processed due to an error. E.g. due to insufficient funds in the account.       </td>     </tr>     <tr>       <td>         <code>           PENDING APPROVAL         </code>       </td>       <td>         The order has been created but needs approval to be executed.       </td>     </tr>   </tbody> </table> 
 * @export
 * @enum {string}
 */

export const OrderStatus = {
    Canceled: 'CANCELED',
    Cart: 'CART',
    Executed: 'EXECUTED',
    Failed: 'FAILED',
    PendingApproval: 'PENDING APPROVAL'
} as const;

export type OrderStatus = typeof OrderStatus[keyof typeof OrderStatus];


/**
 * An order wraps around the fulfilment of one or more rewards.
 * @export
 * @interface OrderWithLink
 */
export interface OrderWithLink {
    /**
     * Tremendous ID of the order
     * @type {string}
     * @memberof OrderWithLink
     */
    'id': string;
    /**
     * Reference for this order, supplied by the customer.  When set, `external_id` makes order idempotent. All requests that use the same `external_id` after the initial order creation, will result in a response that returns the data of the initially created order. The response will have a `201` response code. These responses **fail** to create any further orders.  It also allows for retrieving by `external_id` instead of `id` only. 
     * @type {string}
     * @memberof OrderWithLink
     */
    'external_id'?: string | null;
    /**
     * ID of the campaign in your account, that defines the available products (different gift cards, charity, etc.) that the recipient can choose from. 
     * @type {string}
     * @memberof OrderWithLink
     */
    'campaign_id'?: string | null;
    /**
     * Date the order has been created
     * @type {string}
     * @memberof OrderWithLink
     */
    'created_at': string;
    /**
     * Execution status of a given order  <table>   <thead>     <tr>       <th>         Status       </th>       <th>         Description       </th>     </tr>   </thead>   <tbody>     <tr>       <td>         <code>           CANCELED         </code>       </td>       <td>         The order and all of its rewards were canceled.       </td>     </tr>     <tr>       <td>         <code>           CART         </code>       </td>       <td>         The order has been created, but hasn\'t yet been processed.       </td>     </tr>     <tr>       <td>         <code>           EXECUTED         </code>       </td>       <td>         The order has been executed. Payment has been handled and rewards are being delivered (if applicable).       </td>     </tr>     <tr>       <td>         <code>           FAILED         </code>       </td>       <td>         The order could not be processed due to an error. E.g. due to insufficient funds in the account.       </td>     </tr>     <tr>       <td>         <code>           PENDING APPROVAL         </code>       </td>       <td>         The order has been created but needs approval to be executed.       </td>     </tr>   </tbody> </table> 
     * @type {string}
     * @memberof OrderWithLink
     */
    'status': OrderWithLinkStatusEnum;
    /**
     * 
     * @type {OrderBasePayment}
     * @memberof OrderWithLink
     */
    'payment'?: OrderBasePayment;
    /**
     * The ID for the invoice associated with this order
     * @type {string}
     * @memberof OrderWithLink
     */
    'invoice_id'?: string;
    /**
     * 
     * @type {Array<OrderWithLinkRewardsInner>}
     * @memberof OrderWithLink
     */
    'rewards'?: Array<OrderWithLinkRewardsInner>;
}

export const OrderWithLinkStatusEnum = {
    Canceled: 'CANCELED',
    Cart: 'CART',
    Executed: 'EXECUTED',
    Failed: 'FAILED',
    PendingApproval: 'PENDING APPROVAL'
} as const;

export type OrderWithLinkStatusEnum = typeof OrderWithLinkStatusEnum[keyof typeof OrderWithLinkStatusEnum];

/**
 * A single reward, sent to a recipient. A reward is always part of an order.  Either `products` or `campaign_id` must be specified. 
 * @export
 * @interface OrderWithLinkRewardsInner
 */
export interface OrderWithLinkRewardsInner {
    /**
     * Tremendous ID of the reward
     * @type {string}
     * @memberof OrderWithLinkRewardsInner
     */
    'id'?: string;
    /**
     * Tremendous ID of the order this reward is part of.
     * @type {string}
     * @memberof OrderWithLinkRewardsInner
     */
    'order_id'?: string;
    /**
     * Date the reward was created
     * @type {string}
     * @memberof OrderWithLinkRewardsInner
     */
    'created_at'?: string;
    /**
     * ID of the campaign in your account, that defines the available products (different gift cards, charity, etc.) that the recipient can choose from. 
     * @type {string}
     * @memberof OrderWithLinkRewardsInner
     */
    'campaign_id'?: string | null;
    /**
     * List of IDs of product (different gift cards, charity, etc.) that will be available to the recipient to choose from.  Providing a `products` array will override the products made available by the campaign specified using the `campaign_id` property unless the `products` array is empty. It will _not_ override other campaign attributes, like the message and customization of the look and feel. 
     * @type {Array<string>}
     * @memberof OrderWithLinkRewardsInner
     */
    'products'?: Array<string>;
    /**
     * 
     * @type {ListRewards200ResponseRewardsInnerValue}
     * @memberof OrderWithLinkRewardsInner
     */
    'value'?: ListRewards200ResponseRewardsInnerValue;
    /**
     * 
     * @type {ListRewards200ResponseRewardsInnerRecipient}
     * @memberof OrderWithLinkRewardsInner
     */
    'recipient'?: ListRewards200ResponseRewardsInnerRecipient;
    /**
     * Timestamp of reward delivery within the next year. Note that if date-time is provided, the time values will be ignored.
     * @type {string}
     * @memberof OrderWithLinkRewardsInner
     */
    'deliver_at'?: string;
    /**
     * 
     * @type {Array<RewardBaseCustomFieldsInner>}
     * @memberof OrderWithLinkRewardsInner
     */
    'custom_fields'?: Array<RewardBaseCustomFieldsInner>;
    /**
     * 
     * @type {RewardWithLinkDelivery}
     * @memberof OrderWithLinkRewardsInner
     */
    'delivery'?: RewardWithLinkDelivery;
}
/**
 * An order wraps around the fulfilment of one or more rewards.
 * @export
 * @interface OrderWithoutLink
 */
export interface OrderWithoutLink {
    /**
     * Tremendous ID of the order
     * @type {string}
     * @memberof OrderWithoutLink
     */
    'id': string;
    /**
     * Reference for this order, supplied by the customer.  When set, `external_id` makes order idempotent. All requests that use the same `external_id` after the initial order creation, will result in a response that returns the data of the initially created order. The response will have a `201` response code. These responses **fail** to create any further orders.  It also allows for retrieving by `external_id` instead of `id` only. 
     * @type {string}
     * @memberof OrderWithoutLink
     */
    'external_id'?: string | null;
    /**
     * ID of the campaign in your account, that defines the available products (different gift cards, charity, etc.) that the recipient can choose from. 
     * @type {string}
     * @memberof OrderWithoutLink
     */
    'campaign_id'?: string | null;
    /**
     * Date the order has been created
     * @type {string}
     * @memberof OrderWithoutLink
     */
    'created_at': string;
    /**
     * Execution status of a given order  <table>   <thead>     <tr>       <th>         Status       </th>       <th>         Description       </th>     </tr>   </thead>   <tbody>     <tr>       <td>         <code>           CANCELED         </code>       </td>       <td>         The order and all of its rewards were canceled.       </td>     </tr>     <tr>       <td>         <code>           CART         </code>       </td>       <td>         The order has been created, but hasn\'t yet been processed.       </td>     </tr>     <tr>       <td>         <code>           EXECUTED         </code>       </td>       <td>         The order has been executed. Payment has been handled and rewards are being delivered (if applicable).       </td>     </tr>     <tr>       <td>         <code>           FAILED         </code>       </td>       <td>         The order could not be processed due to an error. E.g. due to insufficient funds in the account.       </td>     </tr>     <tr>       <td>         <code>           PENDING APPROVAL         </code>       </td>       <td>         The order has been created but needs approval to be executed.       </td>     </tr>   </tbody> </table> 
     * @type {string}
     * @memberof OrderWithoutLink
     */
    'status': OrderWithoutLinkStatusEnum;
    /**
     * 
     * @type {OrderBasePayment}
     * @memberof OrderWithoutLink
     */
    'payment'?: OrderBasePayment;
    /**
     * The ID for the invoice associated with this order
     * @type {string}
     * @memberof OrderWithoutLink
     */
    'invoice_id'?: string;
    /**
     * 
     * @type {OrderWithoutLinkReward}
     * @memberof OrderWithoutLink
     */
    'reward'?: OrderWithoutLinkReward;
}

export const OrderWithoutLinkStatusEnum = {
    Canceled: 'CANCELED',
    Cart: 'CART',
    Executed: 'EXECUTED',
    Failed: 'FAILED',
    PendingApproval: 'PENDING APPROVAL'
} as const;

export type OrderWithoutLinkStatusEnum = typeof OrderWithoutLinkStatusEnum[keyof typeof OrderWithoutLinkStatusEnum];

/**
 * A single reward, sent to a recipient. A reward is always part of an order.  Either `products` or `campaign_id` must be specified. 
 * @export
 * @interface OrderWithoutLinkReward
 */
export interface OrderWithoutLinkReward {
    /**
     * Tremendous ID of the reward
     * @type {string}
     * @memberof OrderWithoutLinkReward
     */
    'id'?: string;
    /**
     * Tremendous ID of the order this reward is part of.
     * @type {string}
     * @memberof OrderWithoutLinkReward
     */
    'order_id'?: string;
    /**
     * Date the reward was created
     * @type {string}
     * @memberof OrderWithoutLinkReward
     */
    'created_at'?: string;
    /**
     * ID of the campaign in your account, that defines the available products (different gift cards, charity, etc.) that the recipient can choose from. 
     * @type {string}
     * @memberof OrderWithoutLinkReward
     */
    'campaign_id'?: string | null;
    /**
     * List of IDs of product (different gift cards, charity, etc.) that will be available to the recipient to choose from.  Providing a `products` array will override the products made available by the campaign specified using the `campaign_id` property unless the `products` array is empty. It will _not_ override other campaign attributes, like the message and customization of the look and feel. 
     * @type {Array<string>}
     * @memberof OrderWithoutLinkReward
     */
    'products'?: Array<string>;
    /**
     * 
     * @type {ListRewards200ResponseRewardsInnerValue}
     * @memberof OrderWithoutLinkReward
     */
    'value'?: ListRewards200ResponseRewardsInnerValue;
    /**
     * 
     * @type {ListRewards200ResponseRewardsInnerRecipient}
     * @memberof OrderWithoutLinkReward
     */
    'recipient'?: ListRewards200ResponseRewardsInnerRecipient;
    /**
     * Timestamp of reward delivery within the next year. Note that if date-time is provided, the time values will be ignored.
     * @type {string}
     * @memberof OrderWithoutLinkReward
     */
    'deliver_at'?: string;
    /**
     * 
     * @type {Array<RewardBaseCustomFieldsInner>}
     * @memberof OrderWithoutLinkReward
     */
    'custom_fields'?: Array<RewardBaseCustomFieldsInner>;
    /**
     * 
     * @type {RewardWithoutLinkDelivery}
     * @memberof OrderWithoutLinkReward
     */
    'delivery'?: RewardWithoutLinkDelivery;
}
/**
 * Organizations are a way to separate different parts of your business within the same Tremendous account. Your root Tremendous account is an organization itself and can have multiple sub-organizations.  You can assign users in your Tremendous team as members to any organization. Users can be members of multiple organizations at once.  Each organizations can have it\'s own API key. 
 * @export
 * @interface Organization
 */
export interface Organization {
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'id'?: string;
    /**
     * Name of the organization
     * @type {string}
     * @memberof Organization
     */
    'name': string;
    /**
     * URL of the website of that organization
     * @type {string}
     * @memberof Organization
     */
    'website': string;
    /**
     * Status of the organization. Organizations need to be approved to be able to use them to send out rewards.
     * @type {string}
     * @memberof Organization
     */
    'status'?: OrganizationStatusEnum;
    /**
     * Timestamp of when the organization has been created.  *This field is only returned when creating an organization.* It is not returned anymore when retrieving or listing organizations. 
     * @type {string}
     * @memberof Organization
     */
    'created_at'?: string;
}

export const OrganizationStatusEnum = {
    Pending: 'PENDING',
    Approved: 'APPROVED',
    Rejected: 'REJECTED'
} as const;

export type OrganizationStatusEnum = typeof OrganizationStatusEnum[keyof typeof OrganizationStatusEnum];

/**
 * 
 * @export
 * @interface PaymentDetails
 */
export interface PaymentDetails {
    /**
     * Total price of the order before fees (in USD)
     * @type {number}
     * @memberof PaymentDetails
     */
    'subtotal'?: number;
    /**
     * Total price of the order including fees (in USD)
     * @type {number}
     * @memberof PaymentDetails
     */
    'total'?: number;
    /**
     * Fees for the order (in USD)
     * @type {number}
     * @memberof PaymentDetails
     */
    'fees'?: number;
    /**
     * 
     * @type {PaymentDetailsRefund}
     * @memberof PaymentDetails
     */
    'refund'?: PaymentDetailsRefund;
    /**
     * Name of the channel in which the order was created
     * @type {string}
     * @memberof PaymentDetails
     */
    'channel'?: PaymentDetailsChannelEnum;
}

export const PaymentDetailsChannelEnum = {
    Ui: 'UI',
    Api: 'API',
    Embed: 'EMBED',
    Decipher: 'DECIPHER',
    Qualtrics: 'QUALTRICS',
    Typeform: 'TYPEFORM',
    SurveyMonkey: 'SURVEY MONKEY'
} as const;

export type PaymentDetailsChannelEnum = typeof PaymentDetailsChannelEnum[keyof typeof PaymentDetailsChannelEnum];

/**
 * Breakdown of the order refunds (total amount in USD, independent from the currency of the ordered rewards). Note that this property will only appear for canceled orders or orders with canceled rewards. 
 * @export
 * @interface PaymentDetailsRefund
 */
export interface PaymentDetailsRefund {
    /**
     * Total amount of the order refunds (in USD)
     * @type {number}
     * @memberof PaymentDetailsRefund
     */
    'total': number;
}
/**
 * A product represents one way to payout a reward to it\'s recipient. Think:  * Amazon.com gift card (ID: `OKMHM2X2OHYV`) * Donations to Save the Children (ID: `ESRNAD533W5A`) * Virtual Visa debit card (ID: `Q24BD9EZ332JT`)  each of which is one specific product on Tremendous.  > 📘 All available products > > See this [list](https://www.tremendous.com/catalog)  Products can be limited in their availability to recipients by  * geography (field `countries`) * currency (field `currencies`) * amount of the reward (field `skus`)   * e.g. adidas gift cards accept any amount between 5 and 200 USD.  See the description of each respective parameter for further details. 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'id': string;
    /**
     * Name of the product
     * @type {string}
     * @memberof Product
     */
    'name': string;
    /**
     * Detailed description of the product. Mostly used for products with a `category` of `charities`.
     * @type {string}
     * @memberof Product
     */
    'description': string;
    /**
     * The category of this product  <table>   <thead>     <tr>       <th>Category</th>       <th>Description</th>     </tr>   </thead>   <tbody>     <tr>       <td><code>ach</code></td>       <td>Bank transfer to the recipient</td>     </tr>     <tr>       <td><code>charity</code></td>       <td>Donations to a charity</td>     </tr>     <tr>       <td><code>merchant_card</code></td>       <td>A gift card for a certain merchant (e.g. Amazon)</td>     </tr>     <tr>       <td><code>paypal</code></td>       <td>Payout via PayPal</td>     </tr>     <tr>       <td><code>venmo</code></td>       <td>Payout via Venmo</td>     </tr>     <tr>       <td><code>visa_card</code></td>       <td>Payout in form of a Visa debit card</td>     </tr>   </tbody> </table> 
     * @type {string}
     * @memberof Product
     */
    'category': ProductCategoryEnum;
    /**
     * Legal disclosures for this product. Can be in HTML format.
     * @type {string}
     * @memberof Product
     */
    'disclosure': string;
    /**
     * Products may are restricted in their usage based on the amount of the reward. The `skus` array defines bands of denominations in which this product may be used for payouts. 
     * @type {Array<ListProducts200ResponseProductsInnerSkusInner>}
     * @memberof Product
     */
    'skus'?: Array<ListProducts200ResponseProductsInnerSkusInner>;
    /**
     * Available currencies for this product
     * @type {Array<string>}
     * @memberof Product
     */
    'currency_codes': Array<ProductCurrencyCodesEnum>;
    /**
     * List of countries in which this product is available to recipients.
     * @type {Array<ListProducts200ResponseProductsInnerCountriesInner>}
     * @memberof Product
     */
    'countries': Array<ListProducts200ResponseProductsInnerCountriesInner>;
    /**
     * List of product images associated with this product (e.g. logos or images of the gift cards)
     * @type {Array<ListProducts200ResponseProductsInnerImagesInner>}
     * @memberof Product
     */
    'images': Array<ListProducts200ResponseProductsInnerImagesInner>;
}

export const ProductCategoryEnum = {
    Ach: 'ach',
    Charity: 'charity',
    MerchantCard: 'merchant_card',
    Paypal: 'paypal',
    Venmo: 'venmo',
    VisaCard: 'visa_card'
} as const;

export type ProductCategoryEnum = typeof ProductCategoryEnum[keyof typeof ProductCategoryEnum];
export const ProductCurrencyCodesEnum = {
    Usd: 'USD',
    Cad: 'CAD',
    Eur: 'EUR',
    Aed: 'AED',
    Afn: 'AFN',
    All: 'ALL',
    Amd: 'AMD',
    Ars: 'ARS',
    Aud: 'AUD',
    Azn: 'AZN',
    Bam: 'BAM',
    Bdt: 'BDT',
    Bgn: 'BGN',
    Bhd: 'BHD',
    Bif: 'BIF',
    Bnd: 'BND',
    Bob: 'BOB',
    Brl: 'BRL',
    Bwp: 'BWP',
    Byr: 'BYR',
    Bzd: 'BZD',
    Cdf: 'CDF',
    Chf: 'CHF',
    Clp: 'CLP',
    Cny: 'CNY',
    Cop: 'COP',
    Crc: 'CRC',
    Cve: 'CVE',
    Czk: 'CZK',
    Djf: 'DJF',
    Dkk: 'DKK',
    Dop: 'DOP',
    Dzd: 'DZD',
    Eek: 'EEK',
    Egp: 'EGP',
    Ern: 'ERN',
    Etb: 'ETB',
    Gbp: 'GBP',
    Gel: 'GEL',
    Ghs: 'GHS',
    Gnf: 'GNF',
    Gtq: 'GTQ',
    Hkd: 'HKD',
    Hnl: 'HNL',
    Hrk: 'HRK',
    Huf: 'HUF',
    Idr: 'IDR',
    Ils: 'ILS',
    Inr: 'INR',
    Iqd: 'IQD',
    Irr: 'IRR',
    Isk: 'ISK',
    Jmd: 'JMD',
    Jod: 'JOD',
    Jpy: 'JPY',
    Kes: 'KES',
    Khr: 'KHR',
    Krw: 'KRW',
    Kwd: 'KWD',
    Kzt: 'KZT',
    Lbp: 'LBP',
    Lkr: 'LKR',
    Ltl: 'LTL',
    Lvl: 'LVL',
    Mad: 'MAD',
    Mdl: 'MDL',
    Mga: 'MGA',
    Mkd: 'MKD',
    Mmk: 'MMK',
    Mop: 'MOP',
    Mur: 'MUR',
    Mxn: 'MXN',
    Myr: 'MYR',
    Mzn: 'MZN',
    Nad: 'NAD',
    Ngn: 'NGN',
    Nio: 'NIO',
    Nok: 'NOK',
    Npr: 'NPR',
    Nzd: 'NZD',
    Omr: 'OMR',
    Pab: 'PAB',
    Pen: 'PEN',
    Php: 'PHP',
    Pkr: 'PKR',
    Pln: 'PLN',
    Pyg: 'PYG',
    Qar: 'QAR',
    Ron: 'RON',
    Rsd: 'RSD',
    Rub: 'RUB',
    Rwf: 'RWF',
    Sar: 'SAR',
    Sdg: 'SDG',
    Sek: 'SEK',
    Sgd: 'SGD',
    Sos: 'SOS',
    Syp: 'SYP',
    Thb: 'THB',
    Tnd: 'TND',
    Top: 'TOP',
    Try: 'TRY',
    Ttd: 'TTD',
    Twd: 'TWD',
    Tzs: 'TZS',
    Uah: 'UAH',
    Ugx: 'UGX',
    Uyu: 'UYU',
    Uzs: 'UZS',
    Vef: 'VEF',
    Vnd: 'VND',
    Xaf: 'XAF',
    Xof: 'XOF',
    Yer: 'YER',
    Zar: 'ZAR',
    Zmk: 'ZMK'
} as const;

export type ProductCurrencyCodesEnum = typeof ProductCurrencyCodesEnum[keyof typeof ProductCurrencyCodesEnum];

/**
 * Details of the recipient of the reward
 * @export
 * @interface Recipient
 */
export interface Recipient {
    /**
     * Name of the recipient
     * @type {string}
     * @memberof Recipient
     */
    'name'?: string;
    /**
     * Email address of the recipient
     * @type {string}
     * @memberof Recipient
     */
    'email'?: string;
    /**
     * Phone number of the recipient. For non-US phone numbers, specify the country code (prefixed with +).
     * @type {string}
     * @memberof Recipient
     */
    'phone'?: string;
}
/**
 * 
 * @export
 * @interface RefundDetails
 */
export interface RefundDetails {
    /**
     * Total amount of the order refunds (in USD)
     * @type {number}
     * @memberof RefundDetails
     */
    'total': number;
}
/**
 * 
 * @export
 * @interface ResendReward422Response
 */
export interface ResendReward422Response {
    /**
     * 
     * @type {ListRewards401ResponseErrors}
     * @memberof ResendReward422Response
     */
    'errors': ListRewards401ResponseErrors;
}
/**
 * A single reward, sent to a recipient. A reward is always part of an order.  Either `products` or `campaign_id` must be specified. 
 * @export
 * @interface Reward
 */
export interface Reward {
    /**
     * Tremendous ID of the reward
     * @type {string}
     * @memberof Reward
     */
    'id'?: string;
    /**
     * Tremendous ID of the order this reward is part of.
     * @type {string}
     * @memberof Reward
     */
    'order_id'?: string;
    /**
     * Date the reward was created
     * @type {string}
     * @memberof Reward
     */
    'created_at'?: string;
    /**
     * ID of the campaign in your account, that defines the available products (different gift cards, charity, etc.) that the recipient can choose from. 
     * @type {string}
     * @memberof Reward
     */
    'campaign_id'?: string | null;
    /**
     * List of IDs of product (different gift cards, charity, etc.) that will be available to the recipient to choose from.  Providing a `products` array will override the products made available by the campaign specified using the `campaign_id` property unless the `products` array is empty. It will _not_ override other campaign attributes, like the message and customization of the look and feel. 
     * @type {Array<string>}
     * @memberof Reward
     */
    'products'?: Array<string>;
    /**
     * 
     * @type {ListRewards200ResponseRewardsInnerValue}
     * @memberof Reward
     */
    'value'?: ListRewards200ResponseRewardsInnerValue;
    /**
     * 
     * @type {ListRewards200ResponseRewardsInnerRecipient}
     * @memberof Reward
     */
    'recipient'?: ListRewards200ResponseRewardsInnerRecipient;
    /**
     * Timestamp of reward delivery within the next year. Note that if date-time is provided, the time values will be ignored.
     * @type {string}
     * @memberof Reward
     */
    'deliver_at'?: string;
    /**
     * 
     * @type {Array<RewardBaseCustomFieldsInner>}
     * @memberof Reward
     */
    'custom_fields'?: Array<RewardBaseCustomFieldsInner>;
    /**
     * 
     * @type {RewardWithoutLinkDelivery}
     * @memberof Reward
     */
    'delivery'?: RewardWithoutLinkDelivery;
}
/**
 * A single reward, sent to a recipient. A reward is always part of an order.  Either `products` or `campaign_id` must be specified. 
 * @export
 * @interface RewardBase
 */
export interface RewardBase {
    /**
     * Tremendous ID of the reward
     * @type {string}
     * @memberof RewardBase
     */
    'id'?: string;
    /**
     * Tremendous ID of the order this reward is part of.
     * @type {string}
     * @memberof RewardBase
     */
    'order_id'?: string;
    /**
     * Date the reward was created
     * @type {string}
     * @memberof RewardBase
     */
    'created_at'?: string;
    /**
     * ID of the campaign in your account, that defines the available products (different gift cards, charity, etc.) that the recipient can choose from. 
     * @type {string}
     * @memberof RewardBase
     */
    'campaign_id'?: string | null;
    /**
     * List of IDs of product (different gift cards, charity, etc.) that will be available to the recipient to choose from.  Providing a `products` array will override the products made available by the campaign specified using the `campaign_id` property unless the `products` array is empty. It will _not_ override other campaign attributes, like the message and customization of the look and feel. 
     * @type {Array<string>}
     * @memberof RewardBase
     */
    'products'?: Array<string>;
    /**
     * 
     * @type {ListRewards200ResponseRewardsInnerValue}
     * @memberof RewardBase
     */
    'value'?: ListRewards200ResponseRewardsInnerValue;
    /**
     * 
     * @type {ListRewards200ResponseRewardsInnerRecipient}
     * @memberof RewardBase
     */
    'recipient'?: ListRewards200ResponseRewardsInnerRecipient;
    /**
     * Timestamp of reward delivery within the next year. Note that if date-time is provided, the time values will be ignored.
     * @type {string}
     * @memberof RewardBase
     */
    'deliver_at'?: string;
    /**
     * 
     * @type {Array<RewardBaseCustomFieldsInner>}
     * @memberof RewardBase
     */
    'custom_fields'?: Array<RewardBaseCustomFieldsInner>;
}
/**
 * Reward custom data for searching, tracking or copy (see [Adding custom fields to orders](https://developers.tremendous.com/reference/using-custom-fields-to-add-custom-data-to-rewards).)
 * @export
 * @interface RewardBaseCustomFieldsInner
 */
export interface RewardBaseCustomFieldsInner {
    /**
     * Tremendous ID of the custom field
     * @type {string}
     * @memberof RewardBaseCustomFieldsInner
     */
    'id'?: string;
    /**
     * Value of the custom field
     * @type {string}
     * @memberof RewardBaseCustomFieldsInner
     */
    'value'?: string | null;
}
/**
 * A single reward, sent to a recipient. A reward is always part of an order.  Either `products` or `campaign_id` must be specified. 
 * @export
 * @interface RewardForOrderCreate
 */
export interface RewardForOrderCreate {
    /**
     * Tremendous ID of the reward
     * @type {string}
     * @memberof RewardForOrderCreate
     */
    'id'?: string;
    /**
     * Tremendous ID of the order this reward is part of.
     * @type {string}
     * @memberof RewardForOrderCreate
     */
    'order_id'?: string;
    /**
     * Date the reward was created
     * @type {string}
     * @memberof RewardForOrderCreate
     */
    'created_at'?: string;
    /**
     * ID of the campaign in your account, that defines the available products (different gift cards, charity, etc.) that the recipient can choose from. 
     * @type {string}
     * @memberof RewardForOrderCreate
     */
    'campaign_id'?: string | null;
    /**
     * List of IDs of product (different gift cards, charity, etc.) that will be available to the recipient to choose from.  Providing a `products` array will override the products made available by the campaign specified using the `campaign_id` property unless the `products` array is empty. It will _not_ override other campaign attributes, like the message and customization of the look and feel. 
     * @type {Array<string>}
     * @memberof RewardForOrderCreate
     */
    'products'?: Array<string>;
    /**
     * 
     * @type {ListRewards200ResponseRewardsInnerValue}
     * @memberof RewardForOrderCreate
     */
    'value'?: ListRewards200ResponseRewardsInnerValue;
    /**
     * 
     * @type {ListRewards200ResponseRewardsInnerRecipient}
     * @memberof RewardForOrderCreate
     */
    'recipient'?: ListRewards200ResponseRewardsInnerRecipient;
    /**
     * Timestamp of reward delivery within the next year. Note that if date-time is provided, the time values will be ignored.
     * @type {string}
     * @memberof RewardForOrderCreate
     */
    'deliver_at'?: string;
    /**
     * 
     * @type {Array<RewardBaseCustomFieldsInner>}
     * @memberof RewardForOrderCreate
     */
    'custom_fields'?: Array<RewardBaseCustomFieldsInner>;
    /**
     * Set this to translate the redemption experience for this reward. Pass a 2-letter [ISO-639-1 code](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) for the desired language. Defaults to `en`. 
     * @type {string}
     * @memberof RewardForOrderCreate
     */
    'language'?: string;
    /**
     * 
     * @type {CreateOrderRequestRewardDelivery}
     * @memberof RewardForOrderCreate
     */
    'delivery'?: CreateOrderRequestRewardDelivery;
}
/**
 * The redemption link for a reward.
 * @export
 * @interface RewardLink
 */
export interface RewardLink {
    /**
     * Tremendous ID of the reward
     * @type {string}
     * @memberof RewardLink
     */
    'id'?: string;
    /**
     * Link to redeem the reward at. You need to deliver this link to the recipient. 
     * @type {string}
     * @memberof RewardLink
     */
    'link'?: string;
}
/**
 * The redemption token for a reward.
 * @export
 * @interface RewardToken
 */
export interface RewardToken {
    /**
     * Tremendous ID of the reward
     * @type {string}
     * @memberof RewardToken
     */
    'id'?: string;
    /**
     * The token to redeem the reward. 
     * @type {string}
     * @memberof RewardToken
     */
    'token'?: string;
    /**
     * Date the token expires
     * @type {string}
     * @memberof RewardToken
     */
    'expires_at'?: string;
}
/**
 * 
 * @export
 * @interface RewardValue
 */
export interface RewardValue {
    /**
     * Amount of the reward
     * @type {number}
     * @memberof RewardValue
     */
    'denomination': number;
    /**
     * Currency of the reward
     * @type {string}
     * @memberof RewardValue
     */
    'currency_code': RewardValueCurrencyCodeEnum;
}

export const RewardValueCurrencyCodeEnum = {
    Usd: 'USD',
    Cad: 'CAD',
    Eur: 'EUR',
    Aed: 'AED',
    Afn: 'AFN',
    All: 'ALL',
    Amd: 'AMD',
    Ars: 'ARS',
    Aud: 'AUD',
    Azn: 'AZN',
    Bam: 'BAM',
    Bdt: 'BDT',
    Bgn: 'BGN',
    Bhd: 'BHD',
    Bif: 'BIF',
    Bnd: 'BND',
    Bob: 'BOB',
    Brl: 'BRL',
    Bwp: 'BWP',
    Byr: 'BYR',
    Bzd: 'BZD',
    Cdf: 'CDF',
    Chf: 'CHF',
    Clp: 'CLP',
    Cny: 'CNY',
    Cop: 'COP',
    Crc: 'CRC',
    Cve: 'CVE',
    Czk: 'CZK',
    Djf: 'DJF',
    Dkk: 'DKK',
    Dop: 'DOP',
    Dzd: 'DZD',
    Eek: 'EEK',
    Egp: 'EGP',
    Ern: 'ERN',
    Etb: 'ETB',
    Gbp: 'GBP',
    Gel: 'GEL',
    Ghs: 'GHS',
    Gnf: 'GNF',
    Gtq: 'GTQ',
    Hkd: 'HKD',
    Hnl: 'HNL',
    Hrk: 'HRK',
    Huf: 'HUF',
    Idr: 'IDR',
    Ils: 'ILS',
    Inr: 'INR',
    Iqd: 'IQD',
    Irr: 'IRR',
    Isk: 'ISK',
    Jmd: 'JMD',
    Jod: 'JOD',
    Jpy: 'JPY',
    Kes: 'KES',
    Khr: 'KHR',
    Krw: 'KRW',
    Kwd: 'KWD',
    Kzt: 'KZT',
    Lbp: 'LBP',
    Lkr: 'LKR',
    Ltl: 'LTL',
    Lvl: 'LVL',
    Mad: 'MAD',
    Mdl: 'MDL',
    Mga: 'MGA',
    Mkd: 'MKD',
    Mmk: 'MMK',
    Mop: 'MOP',
    Mur: 'MUR',
    Mxn: 'MXN',
    Myr: 'MYR',
    Mzn: 'MZN',
    Nad: 'NAD',
    Ngn: 'NGN',
    Nio: 'NIO',
    Nok: 'NOK',
    Npr: 'NPR',
    Nzd: 'NZD',
    Omr: 'OMR',
    Pab: 'PAB',
    Pen: 'PEN',
    Php: 'PHP',
    Pkr: 'PKR',
    Pln: 'PLN',
    Pyg: 'PYG',
    Qar: 'QAR',
    Ron: 'RON',
    Rsd: 'RSD',
    Rub: 'RUB',
    Rwf: 'RWF',
    Sar: 'SAR',
    Sdg: 'SDG',
    Sek: 'SEK',
    Sgd: 'SGD',
    Sos: 'SOS',
    Syp: 'SYP',
    Thb: 'THB',
    Tnd: 'TND',
    Top: 'TOP',
    Try: 'TRY',
    Ttd: 'TTD',
    Twd: 'TWD',
    Tzs: 'TZS',
    Uah: 'UAH',
    Ugx: 'UGX',
    Uyu: 'UYU',
    Uzs: 'UZS',
    Vef: 'VEF',
    Vnd: 'VND',
    Xaf: 'XAF',
    Xof: 'XOF',
    Yer: 'YER',
    Zar: 'ZAR',
    Zmk: 'ZMK'
} as const;

export type RewardValueCurrencyCodeEnum = typeof RewardValueCurrencyCodeEnum[keyof typeof RewardValueCurrencyCodeEnum];

/**
 * A single reward, sent to a recipient. A reward is always part of an order.  Either `products` or `campaign_id` must be specified. 
 * @export
 * @interface RewardWithLink
 */
export interface RewardWithLink {
    /**
     * Tremendous ID of the reward
     * @type {string}
     * @memberof RewardWithLink
     */
    'id'?: string;
    /**
     * Tremendous ID of the order this reward is part of.
     * @type {string}
     * @memberof RewardWithLink
     */
    'order_id'?: string;
    /**
     * Date the reward was created
     * @type {string}
     * @memberof RewardWithLink
     */
    'created_at'?: string;
    /**
     * ID of the campaign in your account, that defines the available products (different gift cards, charity, etc.) that the recipient can choose from. 
     * @type {string}
     * @memberof RewardWithLink
     */
    'campaign_id'?: string | null;
    /**
     * List of IDs of product (different gift cards, charity, etc.) that will be available to the recipient to choose from.  Providing a `products` array will override the products made available by the campaign specified using the `campaign_id` property unless the `products` array is empty. It will _not_ override other campaign attributes, like the message and customization of the look and feel. 
     * @type {Array<string>}
     * @memberof RewardWithLink
     */
    'products'?: Array<string>;
    /**
     * 
     * @type {ListRewards200ResponseRewardsInnerValue}
     * @memberof RewardWithLink
     */
    'value'?: ListRewards200ResponseRewardsInnerValue;
    /**
     * 
     * @type {ListRewards200ResponseRewardsInnerRecipient}
     * @memberof RewardWithLink
     */
    'recipient'?: ListRewards200ResponseRewardsInnerRecipient;
    /**
     * Timestamp of reward delivery within the next year. Note that if date-time is provided, the time values will be ignored.
     * @type {string}
     * @memberof RewardWithLink
     */
    'deliver_at'?: string;
    /**
     * 
     * @type {Array<RewardBaseCustomFieldsInner>}
     * @memberof RewardWithLink
     */
    'custom_fields'?: Array<RewardBaseCustomFieldsInner>;
    /**
     * 
     * @type {RewardWithLinkDelivery}
     * @memberof RewardWithLink
     */
    'delivery'?: RewardWithLinkDelivery;
}
/**
 * Details on how the reward is delivered to the recipient. 
 * @export
 * @interface RewardWithLinkDelivery
 */
export interface RewardWithLinkDelivery {
    /**
     * How to deliver the reward to the recipient.  <table>   <thead>     <tr>       <th>Delivery Method</th>       <th>Description</th>     </tr>   </thead>   <tbody>     <tr>       <td><code>EMAIL</code></td>       <td>Deliver the reward to the recipient by email</td>     </tr>     <tr>       <td><code>LINK</code></td>       <td>         <p>Deliver the reward to the recipient via a link.</p>         <p>The link can be retrieved on a successfully ordered reward via the <code>/rewards</code> or <code>/rewards/{id}</code> endpoint. That link must then be  delivered to the recipient out-of-band.</p>       </td>     </tr>     <tr>       <td><code>PHONE</code></td>       <td>Deliver the reward to the recipient by SMS</td>     </tr>   </tbody> </table> 
     * @type {string}
     * @memberof RewardWithLinkDelivery
     */
    'method': RewardWithLinkDeliveryMethodEnum;
    /**
     * Current status of the delivery of the reward:  * `SCHEDULED` - Reward is scheduled for delivery and will be delivered soon. * `FAILED` - Delivery of reward failed (e.g. email bounced). * `SUCCEEDED` - Reward was successfully delivered (email or text message delivered or reward link opened). * `PENDING` - Delivery is pending but not yet scheduled. 
     * @type {string}
     * @memberof RewardWithLinkDelivery
     */
    'status': RewardWithLinkDeliveryStatusEnum;
    /**
     * Link to redeem the reward at. You need to deliver this link to the recipient.  Only available for rewards for which the `method` for delivery is set to `LINK`. 
     * @type {string}
     * @memberof RewardWithLinkDelivery
     */
    'link'?: string;
}

export const RewardWithLinkDeliveryMethodEnum = {
    Email: 'EMAIL',
    Link: 'LINK',
    Phone: 'PHONE'
} as const;

export type RewardWithLinkDeliveryMethodEnum = typeof RewardWithLinkDeliveryMethodEnum[keyof typeof RewardWithLinkDeliveryMethodEnum];
export const RewardWithLinkDeliveryStatusEnum = {
    Scheduled: 'SCHEDULED',
    Failed: 'FAILED',
    Succeeded: 'SUCCEEDED',
    Pending: 'PENDING'
} as const;

export type RewardWithLinkDeliveryStatusEnum = typeof RewardWithLinkDeliveryStatusEnum[keyof typeof RewardWithLinkDeliveryStatusEnum];

/**
 * A single reward, sent to a recipient. A reward is always part of an order.  Either `products` or `campaign_id` must be specified. 
 * @export
 * @interface RewardWithoutLink
 */
export interface RewardWithoutLink {
    /**
     * Tremendous ID of the reward
     * @type {string}
     * @memberof RewardWithoutLink
     */
    'id'?: string;
    /**
     * Tremendous ID of the order this reward is part of.
     * @type {string}
     * @memberof RewardWithoutLink
     */
    'order_id'?: string;
    /**
     * Date the reward was created
     * @type {string}
     * @memberof RewardWithoutLink
     */
    'created_at'?: string;
    /**
     * ID of the campaign in your account, that defines the available products (different gift cards, charity, etc.) that the recipient can choose from. 
     * @type {string}
     * @memberof RewardWithoutLink
     */
    'campaign_id'?: string | null;
    /**
     * List of IDs of product (different gift cards, charity, etc.) that will be available to the recipient to choose from.  Providing a `products` array will override the products made available by the campaign specified using the `campaign_id` property unless the `products` array is empty. It will _not_ override other campaign attributes, like the message and customization of the look and feel. 
     * @type {Array<string>}
     * @memberof RewardWithoutLink
     */
    'products'?: Array<string>;
    /**
     * 
     * @type {ListRewards200ResponseRewardsInnerValue}
     * @memberof RewardWithoutLink
     */
    'value'?: ListRewards200ResponseRewardsInnerValue;
    /**
     * 
     * @type {ListRewards200ResponseRewardsInnerRecipient}
     * @memberof RewardWithoutLink
     */
    'recipient'?: ListRewards200ResponseRewardsInnerRecipient;
    /**
     * Timestamp of reward delivery within the next year. Note that if date-time is provided, the time values will be ignored.
     * @type {string}
     * @memberof RewardWithoutLink
     */
    'deliver_at'?: string;
    /**
     * 
     * @type {Array<RewardBaseCustomFieldsInner>}
     * @memberof RewardWithoutLink
     */
    'custom_fields'?: Array<RewardBaseCustomFieldsInner>;
    /**
     * 
     * @type {RewardWithoutLinkDelivery}
     * @memberof RewardWithoutLink
     */
    'delivery'?: RewardWithoutLinkDelivery;
}
/**
 * Details on how the reward is delivered to the recipient. 
 * @export
 * @interface RewardWithoutLinkDelivery
 */
export interface RewardWithoutLinkDelivery {
    /**
     * How to deliver the reward to the recipient.  <table>   <thead>     <tr>       <th>Delivery Method</th>       <th>Description</th>     </tr>   </thead>   <tbody>     <tr>       <td><code>EMAIL</code></td>       <td>Deliver the reward to the recipient by email</td>     </tr>     <tr>       <td><code>LINK</code></td>       <td>         <p>Deliver the reward to the recipient via a link.</p>         <p>The link can be retrieved on a successfully ordered reward via the <code>/rewards</code> or <code>/rewards/{id}</code> endpoint. That link must then be  delivered to the recipient out-of-band.</p>       </td>     </tr>     <tr>       <td><code>PHONE</code></td>       <td>Deliver the reward to the recipient by SMS</td>     </tr>   </tbody> </table> 
     * @type {string}
     * @memberof RewardWithoutLinkDelivery
     */
    'method': RewardWithoutLinkDeliveryMethodEnum;
    /**
     * Current status of the delivery of the reward:  * `SCHEDULED` - Reward is scheduled for delivery and will be delivered soon. * `FAILED` - Delivery of reward failed (e.g. email bounced). * `SUCCEEDED` - Reward was successfully delivered (email or text message delivered or reward link opened). * `PENDING` - Delivery is pending but not yet scheduled. 
     * @type {string}
     * @memberof RewardWithoutLinkDelivery
     */
    'status': RewardWithoutLinkDeliveryStatusEnum;
}

export const RewardWithoutLinkDeliveryMethodEnum = {
    Email: 'EMAIL',
    Link: 'LINK',
    Phone: 'PHONE'
} as const;

export type RewardWithoutLinkDeliveryMethodEnum = typeof RewardWithoutLinkDeliveryMethodEnum[keyof typeof RewardWithoutLinkDeliveryMethodEnum];
export const RewardWithoutLinkDeliveryStatusEnum = {
    Scheduled: 'SCHEDULED',
    Failed: 'FAILED',
    Succeeded: 'SUCCEEDED',
    Pending: 'PENDING'
} as const;

export type RewardWithoutLinkDeliveryStatusEnum = typeof RewardWithoutLinkDeliveryStatusEnum[keyof typeof RewardWithoutLinkDeliveryStatusEnum];

/**
 * 
 * @export
 * @interface SimulateWebhookRequest
 */
export interface SimulateWebhookRequest {
    /**
     * The event to test. See the [List events endpoint reference](/reference/get_webhooks-id-events) for all available events.
     * @type {string}
     * @memberof SimulateWebhookRequest
     */
    'event': string;
}
/**
 * 
 * @export
 * @interface Webhook
 */
export interface Webhook {
    /**
     * 
     * @type {string}
     * @memberof Webhook
     */
    'id'?: string;
    /**
     * URL the webhook will make requests to
     * @type {string}
     * @memberof Webhook
     */
    'url': string;
    /**
     * Private key for the webhook
     * @type {string}
     * @memberof Webhook
     */
    'private_key'?: string;
}
/**
 * 
 * @export
 * @interface WebhookPost
 */
export interface WebhookPost {
    /**
     * URL the webhook will make requests to
     * @type {string}
     * @memberof WebhookPost
     */
    'url': string;
}

/**
 * BalanceTransactionsApi - axios parameter creator
 * @export
 */
export const BalanceTransactionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetch a list of all balance transactions on your account. 
         * @summary List balance transactions
         * @param {number} [offset] Offsets the returned list by the given number of transactions. The returned transactions are ordered (and offsetted) by their creation date (DESC).
         * @param {number} [limit] Limits the number of transactions listed. The default value is 10.
         * @param {string} [createdAtGte] Only return results where the created_at field is greater than or equal to the supplied value. The string needs to be an ISO 8601 datetime.
         * @param {string} [createdAtLte] Only return results where the created_at field is less than or equal to the supplied value. The string needs to be an ISO 8601 datetime.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBalanceTransactions: async (offset?: number, limit?: number, createdAtGte?: string, createdAtLte?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/balance_transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (createdAtGte !== undefined) {
                localVarQueryParameter['created_at[gte]'] = createdAtGte;
            }

            if (createdAtLte !== undefined) {
                localVarQueryParameter['created_at[lte]'] = createdAtLte;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BalanceTransactionsApi - functional programming interface
 * @export
 */
export const BalanceTransactionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BalanceTransactionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetch a list of all balance transactions on your account. 
         * @summary List balance transactions
         * @param {number} [offset] Offsets the returned list by the given number of transactions. The returned transactions are ordered (and offsetted) by their creation date (DESC).
         * @param {number} [limit] Limits the number of transactions listed. The default value is 10.
         * @param {string} [createdAtGte] Only return results where the created_at field is greater than or equal to the supplied value. The string needs to be an ISO 8601 datetime.
         * @param {string} [createdAtLte] Only return results where the created_at field is less than or equal to the supplied value. The string needs to be an ISO 8601 datetime.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBalanceTransactions(offset?: number, limit?: number, createdAtGte?: string, createdAtLte?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBalanceTransactions200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBalanceTransactions(offset, limit, createdAtGte, createdAtLte, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BalanceTransactionsApi.listBalanceTransactions']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BalanceTransactionsApi - factory interface
 * @export
 */
export const BalanceTransactionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BalanceTransactionsApiFp(configuration)
    return {
        /**
         * Fetch a list of all balance transactions on your account. 
         * @summary List balance transactions
         * @param {number} [offset] Offsets the returned list by the given number of transactions. The returned transactions are ordered (and offsetted) by their creation date (DESC).
         * @param {number} [limit] Limits the number of transactions listed. The default value is 10.
         * @param {string} [createdAtGte] Only return results where the created_at field is greater than or equal to the supplied value. The string needs to be an ISO 8601 datetime.
         * @param {string} [createdAtLte] Only return results where the created_at field is less than or equal to the supplied value. The string needs to be an ISO 8601 datetime.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBalanceTransactions(offset?: number, limit?: number, createdAtGte?: string, createdAtLte?: string, options?: any): AxiosPromise<ListBalanceTransactions200Response> {
            return localVarFp.listBalanceTransactions(offset, limit, createdAtGte, createdAtLte, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BalanceTransactionsApi - object-oriented interface
 * @export
 * @class BalanceTransactionsApi
 * @extends {BaseAPI}
 */
export class BalanceTransactionsApi extends BaseAPI {
    /**
     * Fetch a list of all balance transactions on your account. 
     * @summary List balance transactions
     * @param {number} [offset] Offsets the returned list by the given number of transactions. The returned transactions are ordered (and offsetted) by their creation date (DESC).
     * @param {number} [limit] Limits the number of transactions listed. The default value is 10.
     * @param {string} [createdAtGte] Only return results where the created_at field is greater than or equal to the supplied value. The string needs to be an ISO 8601 datetime.
     * @param {string} [createdAtLte] Only return results where the created_at field is less than or equal to the supplied value. The string needs to be an ISO 8601 datetime.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BalanceTransactionsApi
     */
    public listBalanceTransactions(offset?: number, limit?: number, createdAtGte?: string, createdAtLte?: string, options?: RawAxiosRequestConfig) {
        return BalanceTransactionsApiFp(this.configuration).listBalanceTransactions(offset, limit, createdAtGte, createdAtLte, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CampaignsApi - axios parameter creator
 * @export
 */
export const CampaignsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a campaign, identified by the given `id` in the URL 
         * @summary Retrieve campaign
         * @param {string} id ID of the campaign that should be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaign: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCampaign', 'id', id)
            const localVarPath = `/campaigns/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of all campaigns created in your account 
         * @summary List campaigns
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCampaigns: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/campaigns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CampaignsApi - functional programming interface
 * @export
 */
export const CampaignsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CampaignsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a campaign, identified by the given `id` in the URL 
         * @summary Retrieve campaign
         * @param {string} id ID of the campaign that should be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCampaign(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCampaign200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaign(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignsApi.getCampaign']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of all campaigns created in your account 
         * @summary List campaigns
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCampaigns(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCampaigns200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCampaigns(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignsApi.listCampaigns']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CampaignsApi - factory interface
 * @export
 */
export const CampaignsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CampaignsApiFp(configuration)
    return {
        /**
         * Retrieve a campaign, identified by the given `id` in the URL 
         * @summary Retrieve campaign
         * @param {string} id ID of the campaign that should be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCampaign(id: string, options?: any): AxiosPromise<GetCampaign200Response> {
            return localVarFp.getCampaign(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of all campaigns created in your account 
         * @summary List campaigns
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCampaigns(options?: any): AxiosPromise<ListCampaigns200Response> {
            return localVarFp.listCampaigns(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CampaignsApi - object-oriented interface
 * @export
 * @class CampaignsApi
 * @extends {BaseAPI}
 */
export class CampaignsApi extends BaseAPI {
    /**
     * Retrieve a campaign, identified by the given `id` in the URL 
     * @summary Retrieve campaign
     * @param {string} id ID of the campaign that should be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public getCampaign(id: string, options?: RawAxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).getCampaign(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of all campaigns created in your account 
     * @summary List campaigns
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public listCampaigns(options?: RawAxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).listCampaigns(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FieldsApi - axios parameter creator
 * @export
 */
export const FieldsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * For reporting and analytics purposes, custom fields can be associated with rewards generated through the API. Custom fields must be first added by members of your admin team through the Tremendous Dashboard. 
         * @summary List fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFields: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FieldsApi - functional programming interface
 * @export
 */
export const FieldsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FieldsApiAxiosParamCreator(configuration)
    return {
        /**
         * For reporting and analytics purposes, custom fields can be associated with rewards generated through the API. Custom fields must be first added by members of your admin team through the Tremendous Dashboard. 
         * @summary List fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFields(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListFields200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFields(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FieldsApi.listFields']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FieldsApi - factory interface
 * @export
 */
export const FieldsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FieldsApiFp(configuration)
    return {
        /**
         * For reporting and analytics purposes, custom fields can be associated with rewards generated through the API. Custom fields must be first added by members of your admin team through the Tremendous Dashboard. 
         * @summary List fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFields(options?: any): AxiosPromise<ListFields200Response> {
            return localVarFp.listFields(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FieldsApi - object-oriented interface
 * @export
 * @class FieldsApi
 * @extends {BaseAPI}
 */
export class FieldsApi extends BaseAPI {
    /**
     * For reporting and analytics purposes, custom fields can be associated with rewards generated through the API. Custom fields must be first added by members of your admin team through the Tremendous Dashboard. 
     * @summary List fields
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FieldsApi
     */
    public listFields(options?: RawAxiosRequestConfig) {
        return FieldsApiFp(this.configuration).listFields(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FundingSourcesApi - axios parameter creator
 * @export
 */
export const FundingSourcesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a funding source, identified by the given `id` in the URL 
         * @summary Retrieve funding source
         * @param {string} id ID of the funding source that should be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFundingSource: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getFundingSource', 'id', id)
            const localVarPath = `/funding_sources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of all funding sources available for ordering through the API in your organization\'s account. 
         * @summary List funding sources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFundingSources: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/funding_sources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FundingSourcesApi - functional programming interface
 * @export
 */
export const FundingSourcesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FundingSourcesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a funding source, identified by the given `id` in the URL 
         * @summary Retrieve funding source
         * @param {string} id ID of the funding source that should be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFundingSource(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFundingSource200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFundingSource(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FundingSourcesApi.getFundingSource']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of all funding sources available for ordering through the API in your organization\'s account. 
         * @summary List funding sources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFundingSources(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListFundingSources200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFundingSources(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FundingSourcesApi.listFundingSources']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FundingSourcesApi - factory interface
 * @export
 */
export const FundingSourcesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FundingSourcesApiFp(configuration)
    return {
        /**
         * Retrieve a funding source, identified by the given `id` in the URL 
         * @summary Retrieve funding source
         * @param {string} id ID of the funding source that should be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFundingSource(id: string, options?: any): AxiosPromise<GetFundingSource200Response> {
            return localVarFp.getFundingSource(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of all funding sources available for ordering through the API in your organization\'s account. 
         * @summary List funding sources
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFundingSources(options?: any): AxiosPromise<ListFundingSources200Response> {
            return localVarFp.listFundingSources(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FundingSourcesApi - object-oriented interface
 * @export
 * @class FundingSourcesApi
 * @extends {BaseAPI}
 */
export class FundingSourcesApi extends BaseAPI {
    /**
     * Retrieve a funding source, identified by the given `id` in the URL 
     * @summary Retrieve funding source
     * @param {string} id ID of the funding source that should be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundingSourcesApi
     */
    public getFundingSource(id: string, options?: RawAxiosRequestConfig) {
        return FundingSourcesApiFp(this.configuration).getFundingSource(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of all funding sources available for ordering through the API in your organization\'s account. 
     * @summary List funding sources
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FundingSourcesApi
     */
    public listFundingSources(options?: RawAxiosRequestConfig) {
        return FundingSourcesApiFp(this.configuration).listFundingSources(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * InvoicesApi - axios parameter creator
 * @export
 */
export const InvoicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creating an invoice is the way for your organization to fund your account\'s balance.  1. Create an invoice 2. Pay the invoice 3. Funds get added to your account\'s balance  ## Request body  <div class=\"object-schema-request-schema\">   <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">po_number</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Reference to the purchase order number within your organization</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">amount</code> </div> </td><td><span class=\"property-type\">number</span> <span class=\"property-format\">double</span></td><td><p>Amount of the invoice in USD</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">memo</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>A note to be included in the invoice. This is for your internal use and will not be visible to the recipient.</p> </td></tr>   </tbody> </table>  </div>  
         * @summary Create invoice
         * @param {CreateInvoiceRequest} createInvoiceRequest Invoice details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInvoice: async (createInvoiceRequest: CreateInvoiceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createInvoiceRequest' is not null or undefined
            assertParamExists('createInvoice', 'createInvoiceRequest', createInvoiceRequest)
            const localVarPath = `/invoices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createInvoiceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes an invoice. This has no further consequences but is a rather cosmetic operation. 
         * @summary Delete invoice
         * @param {string} id ID of the invoice that should be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInvoices: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteInvoices', 'id', id)
            const localVarPath = `/invoices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates a CSV version for an invoice listing the associated rewards and orders 
         * @summary Retrieve invoice as CSV
         * @param {string} id ID of the Invoice for that the CSV should be generated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadInvoiceCsv: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('downloadInvoiceCsv', 'id', id)
            const localVarPath = `/invoices/{id}/csv`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates a PDF version for an invoice 
         * @summary Retrieve invoice as PDF
         * @param {string} id ID of the Invoice for that the PDF should be generated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadInvoicePdf: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('downloadInvoicePdf', 'id', id)
            const localVarPath = `/invoices/{id}/pdf`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an invoice, identified by the given `id` in the URL  > 📘 Deleted Invoices > > This endpoint can be used to retrieve details on deleted invoices > that the list of invoices omits. 
         * @summary Retrieve invoice
         * @param {string} id ID of the invoice that should be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoice: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getInvoice', 'id', id)
            const localVarPath = `/invoices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a list of all invoices on your account.  > 🚧 Deleted invoices are omitted > > The response does not include any previously deleted invoices. 
         * @summary List invoices
         * @param {number} [offset] Offsets the returned list by the given number of invoices. The returned invoices are ordered (and offsetted) by their creation date (DESC).
         * @param {number} [limit] Limits the number of invoices listed. The maximum and default value is 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInvoices: async (offset?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/invoices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InvoicesApi - functional programming interface
 * @export
 */
export const InvoicesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InvoicesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creating an invoice is the way for your organization to fund your account\'s balance.  1. Create an invoice 2. Pay the invoice 3. Funds get added to your account\'s balance  ## Request body  <div class=\"object-schema-request-schema\">   <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">po_number</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Reference to the purchase order number within your organization</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">amount</code> </div> </td><td><span class=\"property-type\">number</span> <span class=\"property-format\">double</span></td><td><p>Amount of the invoice in USD</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">memo</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>A note to be included in the invoice. This is for your internal use and will not be visible to the recipient.</p> </td></tr>   </tbody> </table>  </div>  
         * @summary Create invoice
         * @param {CreateInvoiceRequest} createInvoiceRequest Invoice details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createInvoice(createInvoiceRequest: CreateInvoiceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateInvoice200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createInvoice(createInvoiceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InvoicesApi.createInvoice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Removes an invoice. This has no further consequences but is a rather cosmetic operation. 
         * @summary Delete invoice
         * @param {string} id ID of the invoice that should be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteInvoices(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateInvoice200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteInvoices(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InvoicesApi.deleteInvoices']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generates a CSV version for an invoice listing the associated rewards and orders 
         * @summary Retrieve invoice as CSV
         * @param {string} id ID of the Invoice for that the CSV should be generated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadInvoiceCsv(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadInvoiceCsv(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InvoicesApi.downloadInvoiceCsv']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generates a PDF version for an invoice 
         * @summary Retrieve invoice as PDF
         * @param {string} id ID of the Invoice for that the PDF should be generated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadInvoicePdf(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadInvoicePdf(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InvoicesApi.downloadInvoicePdf']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve an invoice, identified by the given `id` in the URL  > 📘 Deleted Invoices > > This endpoint can be used to retrieve details on deleted invoices > that the list of invoices omits. 
         * @summary Retrieve invoice
         * @param {string} id ID of the invoice that should be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInvoice(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateInvoice200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInvoice(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InvoicesApi.getInvoice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch a list of all invoices on your account.  > 🚧 Deleted invoices are omitted > > The response does not include any previously deleted invoices. 
         * @summary List invoices
         * @param {number} [offset] Offsets the returned list by the given number of invoices. The returned invoices are ordered (and offsetted) by their creation date (DESC).
         * @param {number} [limit] Limits the number of invoices listed. The maximum and default value is 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInvoices(offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListInvoices200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInvoices(offset, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InvoicesApi.listInvoices']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * InvoicesApi - factory interface
 * @export
 */
export const InvoicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InvoicesApiFp(configuration)
    return {
        /**
         * Creating an invoice is the way for your organization to fund your account\'s balance.  1. Create an invoice 2. Pay the invoice 3. Funds get added to your account\'s balance  ## Request body  <div class=\"object-schema-request-schema\">   <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">po_number</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Reference to the purchase order number within your organization</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">amount</code> </div> </td><td><span class=\"property-type\">number</span> <span class=\"property-format\">double</span></td><td><p>Amount of the invoice in USD</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">memo</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>A note to be included in the invoice. This is for your internal use and will not be visible to the recipient.</p> </td></tr>   </tbody> </table>  </div>  
         * @summary Create invoice
         * @param {CreateInvoiceRequest} createInvoiceRequest Invoice details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInvoice(createInvoiceRequest: CreateInvoiceRequest, options?: any): AxiosPromise<CreateInvoice200Response> {
            return localVarFp.createInvoice(createInvoiceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes an invoice. This has no further consequences but is a rather cosmetic operation. 
         * @summary Delete invoice
         * @param {string} id ID of the invoice that should be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInvoices(id: string, options?: any): AxiosPromise<CreateInvoice200Response> {
            return localVarFp.deleteInvoices(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates a CSV version for an invoice listing the associated rewards and orders 
         * @summary Retrieve invoice as CSV
         * @param {string} id ID of the Invoice for that the CSV should be generated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadInvoiceCsv(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.downloadInvoiceCsv(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates a PDF version for an invoice 
         * @summary Retrieve invoice as PDF
         * @param {string} id ID of the Invoice for that the PDF should be generated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadInvoicePdf(id: string, options?: any): AxiosPromise<File> {
            return localVarFp.downloadInvoicePdf(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an invoice, identified by the given `id` in the URL  > 📘 Deleted Invoices > > This endpoint can be used to retrieve details on deleted invoices > that the list of invoices omits. 
         * @summary Retrieve invoice
         * @param {string} id ID of the invoice that should be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoice(id: string, options?: any): AxiosPromise<CreateInvoice200Response> {
            return localVarFp.getInvoice(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a list of all invoices on your account.  > 🚧 Deleted invoices are omitted > > The response does not include any previously deleted invoices. 
         * @summary List invoices
         * @param {number} [offset] Offsets the returned list by the given number of invoices. The returned invoices are ordered (and offsetted) by their creation date (DESC).
         * @param {number} [limit] Limits the number of invoices listed. The maximum and default value is 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInvoices(offset?: number, limit?: number, options?: any): AxiosPromise<ListInvoices200Response> {
            return localVarFp.listInvoices(offset, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InvoicesApi - object-oriented interface
 * @export
 * @class InvoicesApi
 * @extends {BaseAPI}
 */
export class InvoicesApi extends BaseAPI {
    /**
     * Creating an invoice is the way for your organization to fund your account\'s balance.  1. Create an invoice 2. Pay the invoice 3. Funds get added to your account\'s balance  ## Request body  <div class=\"object-schema-request-schema\">   <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">po_number</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Reference to the purchase order number within your organization</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">amount</code> </div> </td><td><span class=\"property-type\">number</span> <span class=\"property-format\">double</span></td><td><p>Amount of the invoice in USD</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">memo</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>A note to be included in the invoice. This is for your internal use and will not be visible to the recipient.</p> </td></tr>   </tbody> </table>  </div>  
     * @summary Create invoice
     * @param {CreateInvoiceRequest} createInvoiceRequest Invoice details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public createInvoice(createInvoiceRequest: CreateInvoiceRequest, options?: RawAxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).createInvoice(createInvoiceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes an invoice. This has no further consequences but is a rather cosmetic operation. 
     * @summary Delete invoice
     * @param {string} id ID of the invoice that should be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public deleteInvoices(id: string, options?: RawAxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).deleteInvoices(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generates a CSV version for an invoice listing the associated rewards and orders 
     * @summary Retrieve invoice as CSV
     * @param {string} id ID of the Invoice for that the CSV should be generated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public downloadInvoiceCsv(id: string, options?: RawAxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).downloadInvoiceCsv(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generates a PDF version for an invoice 
     * @summary Retrieve invoice as PDF
     * @param {string} id ID of the Invoice for that the PDF should be generated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public downloadInvoicePdf(id: string, options?: RawAxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).downloadInvoicePdf(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve an invoice, identified by the given `id` in the URL  > 📘 Deleted Invoices > > This endpoint can be used to retrieve details on deleted invoices > that the list of invoices omits. 
     * @summary Retrieve invoice
     * @param {string} id ID of the invoice that should be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public getInvoice(id: string, options?: RawAxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).getInvoice(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a list of all invoices on your account.  > 🚧 Deleted invoices are omitted > > The response does not include any previously deleted invoices. 
     * @summary List invoices
     * @param {number} [offset] Offsets the returned list by the given number of invoices. The returned invoices are ordered (and offsetted) by their creation date (DESC).
     * @param {number} [limit] Limits the number of invoices listed. The maximum and default value is 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public listInvoices(offset?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return InvoicesApiFp(this.configuration).listInvoices(offset, limit, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MembersApi - axios parameter creator
 * @export
 */
export const MembersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Each organization has one or more users that can access and manage that organization. These users are called members.  Members can take actions via the Tremendous web dashboard directly. These actions include adding funding sources to the organization, creating Campaigns, and more.  ### Permissions  Members can have one of two roles that determine their permissions within the organization:  1. `MEMBER`: Limited permissions. Can view their own reward and order histories only. 2. `ADMIN`: Update organization settings, invite other members to the organization, and view all member order and reward histories within their organization.  To create members of a sub-organizations [create an API key for that organization](/reference/post_organizations-id-create-api-key) first, then use the new API key in the create member request.  ### Inviting new members  After creating a member, an automatic invite is sent to the email address. If the user is not registered yet, that person will then need to sign up for a Tremendous account.  > ❗️ Automatic invitations are not available in the sandbox > > You must manually use the returned `invite_url` field in the payload instead. 
         * @summary Create member
         * @param {CreateMemberRequest} createMemberRequest Member details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMember: async (createMemberRequest: CreateMemberRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createMemberRequest' is not null or undefined
            assertParamExists('createMember', 'createMemberRequest', createMemberRequest)
            const localVarPath = `/members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMemberRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve member
         * @param {string} id ID of the member to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMember: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMember', 'id', id)
            const localVarPath = `/members/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * To list members of a sub-organization [create an API key for that organization](/reference/post_organizations-id-create-api-key) first, then use the new API key in the list members request. 
         * @summary List members
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/members`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MembersApi - functional programming interface
 * @export
 */
export const MembersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MembersApiAxiosParamCreator(configuration)
    return {
        /**
         * Each organization has one or more users that can access and manage that organization. These users are called members.  Members can take actions via the Tremendous web dashboard directly. These actions include adding funding sources to the organization, creating Campaigns, and more.  ### Permissions  Members can have one of two roles that determine their permissions within the organization:  1. `MEMBER`: Limited permissions. Can view their own reward and order histories only. 2. `ADMIN`: Update organization settings, invite other members to the organization, and view all member order and reward histories within their organization.  To create members of a sub-organizations [create an API key for that organization](/reference/post_organizations-id-create-api-key) first, then use the new API key in the create member request.  ### Inviting new members  After creating a member, an automatic invite is sent to the email address. If the user is not registered yet, that person will then need to sign up for a Tremendous account.  > ❗️ Automatic invitations are not available in the sandbox > > You must manually use the returned `invite_url` field in the payload instead. 
         * @summary Create member
         * @param {CreateMemberRequest} createMemberRequest Member details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMember(createMemberRequest: CreateMemberRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMember200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMember(createMemberRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MembersApi.createMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve member
         * @param {string} id ID of the member to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMember(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMember200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMember(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MembersApi.getMember']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * To list members of a sub-organization [create an API key for that organization](/reference/post_organizations-id-create-api-key) first, then use the new API key in the list members request. 
         * @summary List members
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMembers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListMembers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMembers(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MembersApi.listMembers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MembersApi - factory interface
 * @export
 */
export const MembersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MembersApiFp(configuration)
    return {
        /**
         * Each organization has one or more users that can access and manage that organization. These users are called members.  Members can take actions via the Tremendous web dashboard directly. These actions include adding funding sources to the organization, creating Campaigns, and more.  ### Permissions  Members can have one of two roles that determine their permissions within the organization:  1. `MEMBER`: Limited permissions. Can view their own reward and order histories only. 2. `ADMIN`: Update organization settings, invite other members to the organization, and view all member order and reward histories within their organization.  To create members of a sub-organizations [create an API key for that organization](/reference/post_organizations-id-create-api-key) first, then use the new API key in the create member request.  ### Inviting new members  After creating a member, an automatic invite is sent to the email address. If the user is not registered yet, that person will then need to sign up for a Tremendous account.  > ❗️ Automatic invitations are not available in the sandbox > > You must manually use the returned `invite_url` field in the payload instead. 
         * @summary Create member
         * @param {CreateMemberRequest} createMemberRequest Member details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMember(createMemberRequest: CreateMemberRequest, options?: any): AxiosPromise<CreateMember200Response> {
            return localVarFp.createMember(createMemberRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve member
         * @param {string} id ID of the member to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMember(id: string, options?: any): AxiosPromise<GetMember200Response> {
            return localVarFp.getMember(id, options).then((request) => request(axios, basePath));
        },
        /**
         * To list members of a sub-organization [create an API key for that organization](/reference/post_organizations-id-create-api-key) first, then use the new API key in the list members request. 
         * @summary List members
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMembers(options?: any): AxiosPromise<ListMembers200Response> {
            return localVarFp.listMembers(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MembersApi - object-oriented interface
 * @export
 * @class MembersApi
 * @extends {BaseAPI}
 */
export class MembersApi extends BaseAPI {
    /**
     * Each organization has one or more users that can access and manage that organization. These users are called members.  Members can take actions via the Tremendous web dashboard directly. These actions include adding funding sources to the organization, creating Campaigns, and more.  ### Permissions  Members can have one of two roles that determine their permissions within the organization:  1. `MEMBER`: Limited permissions. Can view their own reward and order histories only. 2. `ADMIN`: Update organization settings, invite other members to the organization, and view all member order and reward histories within their organization.  To create members of a sub-organizations [create an API key for that organization](/reference/post_organizations-id-create-api-key) first, then use the new API key in the create member request.  ### Inviting new members  After creating a member, an automatic invite is sent to the email address. If the user is not registered yet, that person will then need to sign up for a Tremendous account.  > ❗️ Automatic invitations are not available in the sandbox > > You must manually use the returned `invite_url` field in the payload instead. 
     * @summary Create member
     * @param {CreateMemberRequest} createMemberRequest Member details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public createMember(createMemberRequest: CreateMemberRequest, options?: RawAxiosRequestConfig) {
        return MembersApiFp(this.configuration).createMember(createMemberRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve member
     * @param {string} id ID of the member to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public getMember(id: string, options?: RawAxiosRequestConfig) {
        return MembersApiFp(this.configuration).getMember(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * To list members of a sub-organization [create an API key for that organization](/reference/post_organizations-id-create-api-key) first, then use the new API key in the list members request. 
     * @summary List members
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MembersApi
     */
    public listMembers(options?: RawAxiosRequestConfig) {
        return MembersApiFp(this.configuration).listMembers(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Approves an order that is pending review, identified by the given `id` in the URL.  Approvals is a feature that requires orders to be approved by an organization admin before they are sent out. To enable approvals for your organization, please enable \'Allow approvals via API\' via the organization\'\'s \'Order Approvals\' settings from the Tremendous dashboard. 
         * @summary Approve order
         * @param {string} id ID of the order that should be approved. In case the order has an &#x60;external_id&#x60; reference supplied by the customer on creation, it\&#39;s possible to use it instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveOrder: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('approveOrder', 'id', id)
            const localVarPath = `/order_approvals/{id}/approve`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Every time you want to send out a reward through Tremendous you need to create an order for it.  > 📘 Getting started with your first order > > Our step-by-step guide walks you through everything you need > to send your first gift card through the Tremendous API: > > <strong><a style=\"display: block; margin-top: 20px;\" href=\"/docs/sending-rewards-intro\">Check it out!</a></strong>  ## Request body  <div class=\"object-schema-request-schema\">   <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">external_id</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Reference for this order, supplied by the customer.</p>  <p>When set, <code>external_id</code> makes order idempotent. All requests that use the same <code>external_id</code> after the initial order creation, will result in a response that returns the data of the initially created order. The response will have a <code>201</code> response code. These responses <strong>fail</strong> to create any further orders.</p>  <p>It also allows for retrieving by <code>external_id</code> instead of <code>id</code> only.</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">payment</code> </div> </td><td><span class=\"property-type\">object</span></td><td></td></tr>  <tr>     <td colspan=\"3\">       <details>         <summary>Show object properties</summary>         <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">funding_source_id</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Tremendous ID of the funding source that will be used to pay for the order. Use <code>balance</code> to use your Tremendous&#39;s balance.</p> </td></tr>   </tbody> </table>  </tr>  <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">reward</code> </div> </td><td><span class=\"property-type\">object</span></td><td><p>A single reward, sent to a recipient. A reward is always part of an order.</p>  <p>Either <code>products</code> or <code>campaign_id</code> must be specified.</p> </td></tr>  <tr>     <td colspan=\"3\">       <details>         <summary>Show object properties</summary>         <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"property-conditional-hint-response-only\"><td><div class=\"property-name\">   <code class=\"property-name\">id</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Tremendous ID of the reward</p> </td></tr> <tr class=\"property-conditional-hint-response-only\"><td><div class=\"property-name\">   <code class=\"property-name\">order_id</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Tremendous ID of the order this reward is part of.</p> </td></tr> <tr class=\"property-conditional-hint-response-only\"><td><div class=\"property-name\">   <code class=\"property-name\">created_at</code> </div> </td><td><span class=\"property-type\">string</span> <span class=\"property-format\">date-time</span></td><td><p>Date the reward was created</p> </td></tr> <tr class=\"property-conditional-hint-request-only\"><td><div class=\"property-name\">   <code class=\"property-name\">campaign_id</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>ID of the campaign in your account, that defines the available products (different gift cards, charity, etc.) that the recipient can choose from.</p> </td></tr> <tr class=\"property-conditional-hint-request-only\"><td><div class=\"property-name\">   <code class=\"property-name\">products</code> </div> </td><td><span class=\"property-type\">array</span> <span class=\"property-format\">string</span></td><td><p>List of IDs of product (different gift cards, charity, etc.) that will be available to the recipient to choose from.</p>  <p>Providing a <code>products</code> array will override the products made available by the campaign specified using the <code>campaign_id</code> property unless the <code>products</code> array is empty. It will <em>not</em> override other campaign attributes, like the message and customization of the look and feel.</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">value</code> </div> </td><td><span class=\"property-type\">object</span></td><td></td></tr>  <tr>     <td colspan=\"3\">       <details>         <summary>Show object properties</summary>         <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">denomination</code> </div> </td><td><span class=\"property-type\">number</span> <span class=\"property-format\">double</span></td><td><p>Amount of the reward</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">currency_code</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Currency of the reward</p> </td></tr>   </tbody> </table>  </tr>  <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">recipient</code> </div> </td><td><span class=\"property-type\">object</span></td><td><p>Details of the recipient of the reward</p> </td></tr>  <tr>     <td colspan=\"3\">       <details>         <summary>Show object properties</summary>         <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">name</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Name of the recipient</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">email</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Email address of the recipient</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">phone</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Phone number of the recipient. For non-US phone numbers, specify the country code (prefixed with +).</p> </td></tr>   </tbody> </table>  </tr>  <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">deliver_at</code> </div> </td><td><span class=\"property-type\">string</span> <span class=\"property-format\">date</span></td><td><p>Timestamp of reward delivery within the next year. Note that if date-time is provided, the time values will be ignored.</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">custom_fields</code> </div> </td><td><span class=\"property-type\">array</span></td><td></td></tr>  <tr>     <td colspan=\"3\">       <details>         <summary>Show array item type</summary>         <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">id</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Tremendous ID of the custom field</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">value</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Value of the custom field</p> </td></tr>   </tbody> </table>  </tr>  <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">language</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Set this to translate the redemption experience for this reward. Pass a 2-letter <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\">ISO-639-1 code</a> for the desired language. Defaults to <code>en</code>.</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">delivery</code> </div> </td><td><span class=\"property-type\">object</span></td><td><p>Details on how the reward is delivered to the recipient.</p> </td></tr>  <tr>     <td colspan=\"3\">       <details>         <summary>Show object properties</summary>         <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">method</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>How to deliver the reward to the recipient.</p>  <table>   <thead>     <tr>       <th>Delivery Method</th>       <th>Description</th>     </tr>   </thead>   <tbody>     <tr>       <td><code>EMAIL</code></td>       <td>Deliver the reward to the recipient by email</td>     </tr>     <tr>       <td><code>LINK</code></td>       <td>         <p>Deliver the reward to the recipient via a link.</p>         <p>The link can be retrieved on a successfully ordered reward via the <code>/rewards</code> or <code>/rewards/{id}</code> endpoint. That link must then be  delivered to the recipient out-of-band.</p>       </td>     </tr>     <tr>       <td><code>PHONE</code></td>       <td>Deliver the reward to the recipient by SMS</td>     </tr>   </tbody> </table> </td></tr>   </tbody> </table>  </tr>    </tbody> </table>  </tr>    </tbody> </table>  </div>   ### Funding sources  There are different ways to pay for gift cards and rewards on Tremendous. Every payment mechanism is called a \"funding source\".  You can retrieve a list of all available funding sources by using the [Funding sources API endpoint](https://tremendous.readme.io/reference/core-funding-source-index).  The Tremendous API sandbox environment comes with a single funding source that allows you to spend up to $5,000 in *fake money* to test the API. [Learn more about the sandbox environment](https://tremendous.readme.io/reference/sandbox).  The HTTP status code `200` on the response will be used to indicate success.  After processing successfully the reward gets queued to be delivered to it\'s recipient (for delivery method `EMAIL` and `PHONE`). Delivery will happen asynchronously, after the response has been sent.  ### Idempotence  Requests issued with the same external_id are idempotent.  Submitting an order with an already existing `external_id`, will result in a `201` response code. In this case the response will return a representation of the already existing order in the response body. 
         * @summary Create order
         * @param {CreateOrderRequest} createOrderRequest Order to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder: async (createOrderRequest: CreateOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createOrderRequest' is not null or undefined
            assertParamExists('createOrder', 'createOrderRequest', createOrderRequest)
            const localVarPath = `/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the order, identified by the given `id` in the URL 
         * @summary Retrieve order
         * @param {string} id ID of the order that should be retrieved. In case the order has an &#x60;external_id&#x60; reference supplied by the customer on creation, it\&#39;s possible to use it instead. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrder', 'id', id)
            const localVarPath = `/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of orders 
         * @summary List orders
         * @param {number} [offset] Offsets the returned list by the given number of orders. The returned orders are ordered (and offsetted) by their creation date (DESC).
         * @param {string} [campaignId] Only return results with a matching campaign_id.
         * @param {string} [externalId] Only return results with a matching external_id.
         * @param {string} [createdAtGte] Only return results where the created_at field is greater than or equal to the supplied value. The string needs to be an ISO 8601 datetime.
         * @param {string} [createdAtLte] Only return results where the created_at field is less than or equal to the supplied value. The string needs to be an ISO 8601 datetime.
         * @param {number} [limit] Limits the number of orders listed. The maximum value is 100 and the default is 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrders: async (offset?: number, campaignId?: string, externalId?: string, createdAtGte?: string, createdAtLte?: string, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (campaignId !== undefined) {
                localVarQueryParameter['campaign_id'] = campaignId;
            }

            if (externalId !== undefined) {
                localVarQueryParameter['external_id'] = externalId;
            }

            if (createdAtGte !== undefined) {
                localVarQueryParameter['created_at[gte]'] = createdAtGte;
            }

            if (createdAtLte !== undefined) {
                localVarQueryParameter['created_at[lte]'] = createdAtLte;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Rejects an order that is pending review, identified by the given `id` in the URL.  Approvals is a feature that requires orders to be approved by an organization admin before they are sent out. To enable approvals for your organization, please enable \'Allow approvals via API\' via the organization\'\'s \'Order Approvals\' settings from the Tremendous dashboard. 
         * @summary Reject order
         * @param {string} id ID of the order that should be rejected. In case the order has an &#x60;external_id&#x60; reference supplied by the customer on creation, it\&#39;s possible to use it instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectOrder: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rejectOrder', 'id', id)
            const localVarPath = `/order_approvals/{id}/reject`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * Approves an order that is pending review, identified by the given `id` in the URL.  Approvals is a feature that requires orders to be approved by an organization admin before they are sent out. To enable approvals for your organization, please enable \'Allow approvals via API\' via the organization\'\'s \'Order Approvals\' settings from the Tremendous dashboard. 
         * @summary Approve order
         * @param {string} id ID of the order that should be approved. In case the order has an &#x60;external_id&#x60; reference supplied by the customer on creation, it\&#39;s possible to use it instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveOrder(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOrder201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveOrder(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.approveOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Every time you want to send out a reward through Tremendous you need to create an order for it.  > 📘 Getting started with your first order > > Our step-by-step guide walks you through everything you need > to send your first gift card through the Tremendous API: > > <strong><a style=\"display: block; margin-top: 20px;\" href=\"/docs/sending-rewards-intro\">Check it out!</a></strong>  ## Request body  <div class=\"object-schema-request-schema\">   <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">external_id</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Reference for this order, supplied by the customer.</p>  <p>When set, <code>external_id</code> makes order idempotent. All requests that use the same <code>external_id</code> after the initial order creation, will result in a response that returns the data of the initially created order. The response will have a <code>201</code> response code. These responses <strong>fail</strong> to create any further orders.</p>  <p>It also allows for retrieving by <code>external_id</code> instead of <code>id</code> only.</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">payment</code> </div> </td><td><span class=\"property-type\">object</span></td><td></td></tr>  <tr>     <td colspan=\"3\">       <details>         <summary>Show object properties</summary>         <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">funding_source_id</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Tremendous ID of the funding source that will be used to pay for the order. Use <code>balance</code> to use your Tremendous&#39;s balance.</p> </td></tr>   </tbody> </table>  </tr>  <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">reward</code> </div> </td><td><span class=\"property-type\">object</span></td><td><p>A single reward, sent to a recipient. A reward is always part of an order.</p>  <p>Either <code>products</code> or <code>campaign_id</code> must be specified.</p> </td></tr>  <tr>     <td colspan=\"3\">       <details>         <summary>Show object properties</summary>         <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"property-conditional-hint-response-only\"><td><div class=\"property-name\">   <code class=\"property-name\">id</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Tremendous ID of the reward</p> </td></tr> <tr class=\"property-conditional-hint-response-only\"><td><div class=\"property-name\">   <code class=\"property-name\">order_id</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Tremendous ID of the order this reward is part of.</p> </td></tr> <tr class=\"property-conditional-hint-response-only\"><td><div class=\"property-name\">   <code class=\"property-name\">created_at</code> </div> </td><td><span class=\"property-type\">string</span> <span class=\"property-format\">date-time</span></td><td><p>Date the reward was created</p> </td></tr> <tr class=\"property-conditional-hint-request-only\"><td><div class=\"property-name\">   <code class=\"property-name\">campaign_id</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>ID of the campaign in your account, that defines the available products (different gift cards, charity, etc.) that the recipient can choose from.</p> </td></tr> <tr class=\"property-conditional-hint-request-only\"><td><div class=\"property-name\">   <code class=\"property-name\">products</code> </div> </td><td><span class=\"property-type\">array</span> <span class=\"property-format\">string</span></td><td><p>List of IDs of product (different gift cards, charity, etc.) that will be available to the recipient to choose from.</p>  <p>Providing a <code>products</code> array will override the products made available by the campaign specified using the <code>campaign_id</code> property unless the <code>products</code> array is empty. It will <em>not</em> override other campaign attributes, like the message and customization of the look and feel.</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">value</code> </div> </td><td><span class=\"property-type\">object</span></td><td></td></tr>  <tr>     <td colspan=\"3\">       <details>         <summary>Show object properties</summary>         <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">denomination</code> </div> </td><td><span class=\"property-type\">number</span> <span class=\"property-format\">double</span></td><td><p>Amount of the reward</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">currency_code</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Currency of the reward</p> </td></tr>   </tbody> </table>  </tr>  <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">recipient</code> </div> </td><td><span class=\"property-type\">object</span></td><td><p>Details of the recipient of the reward</p> </td></tr>  <tr>     <td colspan=\"3\">       <details>         <summary>Show object properties</summary>         <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">name</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Name of the recipient</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">email</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Email address of the recipient</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">phone</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Phone number of the recipient. For non-US phone numbers, specify the country code (prefixed with +).</p> </td></tr>   </tbody> </table>  </tr>  <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">deliver_at</code> </div> </td><td><span class=\"property-type\">string</span> <span class=\"property-format\">date</span></td><td><p>Timestamp of reward delivery within the next year. Note that if date-time is provided, the time values will be ignored.</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">custom_fields</code> </div> </td><td><span class=\"property-type\">array</span></td><td></td></tr>  <tr>     <td colspan=\"3\">       <details>         <summary>Show array item type</summary>         <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">id</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Tremendous ID of the custom field</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">value</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Value of the custom field</p> </td></tr>   </tbody> </table>  </tr>  <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">language</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Set this to translate the redemption experience for this reward. Pass a 2-letter <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\">ISO-639-1 code</a> for the desired language. Defaults to <code>en</code>.</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">delivery</code> </div> </td><td><span class=\"property-type\">object</span></td><td><p>Details on how the reward is delivered to the recipient.</p> </td></tr>  <tr>     <td colspan=\"3\">       <details>         <summary>Show object properties</summary>         <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">method</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>How to deliver the reward to the recipient.</p>  <table>   <thead>     <tr>       <th>Delivery Method</th>       <th>Description</th>     </tr>   </thead>   <tbody>     <tr>       <td><code>EMAIL</code></td>       <td>Deliver the reward to the recipient by email</td>     </tr>     <tr>       <td><code>LINK</code></td>       <td>         <p>Deliver the reward to the recipient via a link.</p>         <p>The link can be retrieved on a successfully ordered reward via the <code>/rewards</code> or <code>/rewards/{id}</code> endpoint. That link must then be  delivered to the recipient out-of-band.</p>       </td>     </tr>     <tr>       <td><code>PHONE</code></td>       <td>Deliver the reward to the recipient by SMS</td>     </tr>   </tbody> </table> </td></tr>   </tbody> </table>  </tr>    </tbody> </table>  </tr>    </tbody> </table>  </div>   ### Funding sources  There are different ways to pay for gift cards and rewards on Tremendous. Every payment mechanism is called a \"funding source\".  You can retrieve a list of all available funding sources by using the [Funding sources API endpoint](https://tremendous.readme.io/reference/core-funding-source-index).  The Tremendous API sandbox environment comes with a single funding source that allows you to spend up to $5,000 in *fake money* to test the API. [Learn more about the sandbox environment](https://tremendous.readme.io/reference/sandbox).  The HTTP status code `200` on the response will be used to indicate success.  After processing successfully the reward gets queued to be delivered to it\'s recipient (for delivery method `EMAIL` and `PHONE`). Delivery will happen asynchronously, after the response has been sent.  ### Idempotence  Requests issued with the same external_id are idempotent.  Submitting an order with an already existing `external_id`, will result in a `201` response code. In this case the response will return a representation of the already existing order in the response body. 
         * @summary Create order
         * @param {CreateOrderRequest} createOrderRequest Order to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrder(createOrderRequest: CreateOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOrder200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrder(createOrderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.createOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the order, identified by the given `id` in the URL 
         * @summary Retrieve order
         * @param {string} id ID of the order that should be retrieved. In case the order has an &#x60;external_id&#x60; reference supplied by the customer on creation, it\&#39;s possible to use it instead. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrder(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOrder201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrder(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.getOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of orders 
         * @summary List orders
         * @param {number} [offset] Offsets the returned list by the given number of orders. The returned orders are ordered (and offsetted) by their creation date (DESC).
         * @param {string} [campaignId] Only return results with a matching campaign_id.
         * @param {string} [externalId] Only return results with a matching external_id.
         * @param {string} [createdAtGte] Only return results where the created_at field is greater than or equal to the supplied value. The string needs to be an ISO 8601 datetime.
         * @param {string} [createdAtLte] Only return results where the created_at field is less than or equal to the supplied value. The string needs to be an ISO 8601 datetime.
         * @param {number} [limit] Limits the number of orders listed. The maximum value is 100 and the default is 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrders(offset?: number, campaignId?: string, externalId?: string, createdAtGte?: string, createdAtLte?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOrders200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOrders(offset, campaignId, externalId, createdAtGte, createdAtLte, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.listOrders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Rejects an order that is pending review, identified by the given `id` in the URL.  Approvals is a feature that requires orders to be approved by an organization admin before they are sent out. To enable approvals for your organization, please enable \'Allow approvals via API\' via the organization\'\'s \'Order Approvals\' settings from the Tremendous dashboard. 
         * @summary Reject order
         * @param {string} id ID of the order that should be rejected. In case the order has an &#x60;external_id&#x60; reference supplied by the customer on creation, it\&#39;s possible to use it instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rejectOrder(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOrder201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rejectOrder(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrdersApi.rejectOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersApiFp(configuration)
    return {
        /**
         * Approves an order that is pending review, identified by the given `id` in the URL.  Approvals is a feature that requires orders to be approved by an organization admin before they are sent out. To enable approvals for your organization, please enable \'Allow approvals via API\' via the organization\'\'s \'Order Approvals\' settings from the Tremendous dashboard. 
         * @summary Approve order
         * @param {string} id ID of the order that should be approved. In case the order has an &#x60;external_id&#x60; reference supplied by the customer on creation, it\&#39;s possible to use it instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveOrder(id: string, options?: any): AxiosPromise<CreateOrder201Response> {
            return localVarFp.approveOrder(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Every time you want to send out a reward through Tremendous you need to create an order for it.  > 📘 Getting started with your first order > > Our step-by-step guide walks you through everything you need > to send your first gift card through the Tremendous API: > > <strong><a style=\"display: block; margin-top: 20px;\" href=\"/docs/sending-rewards-intro\">Check it out!</a></strong>  ## Request body  <div class=\"object-schema-request-schema\">   <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">external_id</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Reference for this order, supplied by the customer.</p>  <p>When set, <code>external_id</code> makes order idempotent. All requests that use the same <code>external_id</code> after the initial order creation, will result in a response that returns the data of the initially created order. The response will have a <code>201</code> response code. These responses <strong>fail</strong> to create any further orders.</p>  <p>It also allows for retrieving by <code>external_id</code> instead of <code>id</code> only.</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">payment</code> </div> </td><td><span class=\"property-type\">object</span></td><td></td></tr>  <tr>     <td colspan=\"3\">       <details>         <summary>Show object properties</summary>         <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">funding_source_id</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Tremendous ID of the funding source that will be used to pay for the order. Use <code>balance</code> to use your Tremendous&#39;s balance.</p> </td></tr>   </tbody> </table>  </tr>  <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">reward</code> </div> </td><td><span class=\"property-type\">object</span></td><td><p>A single reward, sent to a recipient. A reward is always part of an order.</p>  <p>Either <code>products</code> or <code>campaign_id</code> must be specified.</p> </td></tr>  <tr>     <td colspan=\"3\">       <details>         <summary>Show object properties</summary>         <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"property-conditional-hint-response-only\"><td><div class=\"property-name\">   <code class=\"property-name\">id</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Tremendous ID of the reward</p> </td></tr> <tr class=\"property-conditional-hint-response-only\"><td><div class=\"property-name\">   <code class=\"property-name\">order_id</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Tremendous ID of the order this reward is part of.</p> </td></tr> <tr class=\"property-conditional-hint-response-only\"><td><div class=\"property-name\">   <code class=\"property-name\">created_at</code> </div> </td><td><span class=\"property-type\">string</span> <span class=\"property-format\">date-time</span></td><td><p>Date the reward was created</p> </td></tr> <tr class=\"property-conditional-hint-request-only\"><td><div class=\"property-name\">   <code class=\"property-name\">campaign_id</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>ID of the campaign in your account, that defines the available products (different gift cards, charity, etc.) that the recipient can choose from.</p> </td></tr> <tr class=\"property-conditional-hint-request-only\"><td><div class=\"property-name\">   <code class=\"property-name\">products</code> </div> </td><td><span class=\"property-type\">array</span> <span class=\"property-format\">string</span></td><td><p>List of IDs of product (different gift cards, charity, etc.) that will be available to the recipient to choose from.</p>  <p>Providing a <code>products</code> array will override the products made available by the campaign specified using the <code>campaign_id</code> property unless the <code>products</code> array is empty. It will <em>not</em> override other campaign attributes, like the message and customization of the look and feel.</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">value</code> </div> </td><td><span class=\"property-type\">object</span></td><td></td></tr>  <tr>     <td colspan=\"3\">       <details>         <summary>Show object properties</summary>         <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">denomination</code> </div> </td><td><span class=\"property-type\">number</span> <span class=\"property-format\">double</span></td><td><p>Amount of the reward</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">currency_code</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Currency of the reward</p> </td></tr>   </tbody> </table>  </tr>  <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">recipient</code> </div> </td><td><span class=\"property-type\">object</span></td><td><p>Details of the recipient of the reward</p> </td></tr>  <tr>     <td colspan=\"3\">       <details>         <summary>Show object properties</summary>         <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">name</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Name of the recipient</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">email</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Email address of the recipient</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">phone</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Phone number of the recipient. For non-US phone numbers, specify the country code (prefixed with +).</p> </td></tr>   </tbody> </table>  </tr>  <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">deliver_at</code> </div> </td><td><span class=\"property-type\">string</span> <span class=\"property-format\">date</span></td><td><p>Timestamp of reward delivery within the next year. Note that if date-time is provided, the time values will be ignored.</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">custom_fields</code> </div> </td><td><span class=\"property-type\">array</span></td><td></td></tr>  <tr>     <td colspan=\"3\">       <details>         <summary>Show array item type</summary>         <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">id</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Tremendous ID of the custom field</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">value</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Value of the custom field</p> </td></tr>   </tbody> </table>  </tr>  <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">language</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Set this to translate the redemption experience for this reward. Pass a 2-letter <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\">ISO-639-1 code</a> for the desired language. Defaults to <code>en</code>.</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">delivery</code> </div> </td><td><span class=\"property-type\">object</span></td><td><p>Details on how the reward is delivered to the recipient.</p> </td></tr>  <tr>     <td colspan=\"3\">       <details>         <summary>Show object properties</summary>         <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">method</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>How to deliver the reward to the recipient.</p>  <table>   <thead>     <tr>       <th>Delivery Method</th>       <th>Description</th>     </tr>   </thead>   <tbody>     <tr>       <td><code>EMAIL</code></td>       <td>Deliver the reward to the recipient by email</td>     </tr>     <tr>       <td><code>LINK</code></td>       <td>         <p>Deliver the reward to the recipient via a link.</p>         <p>The link can be retrieved on a successfully ordered reward via the <code>/rewards</code> or <code>/rewards/{id}</code> endpoint. That link must then be  delivered to the recipient out-of-band.</p>       </td>     </tr>     <tr>       <td><code>PHONE</code></td>       <td>Deliver the reward to the recipient by SMS</td>     </tr>   </tbody> </table> </td></tr>   </tbody> </table>  </tr>    </tbody> </table>  </tr>    </tbody> </table>  </div>   ### Funding sources  There are different ways to pay for gift cards and rewards on Tremendous. Every payment mechanism is called a \"funding source\".  You can retrieve a list of all available funding sources by using the [Funding sources API endpoint](https://tremendous.readme.io/reference/core-funding-source-index).  The Tremendous API sandbox environment comes with a single funding source that allows you to spend up to $5,000 in *fake money* to test the API. [Learn more about the sandbox environment](https://tremendous.readme.io/reference/sandbox).  The HTTP status code `200` on the response will be used to indicate success.  After processing successfully the reward gets queued to be delivered to it\'s recipient (for delivery method `EMAIL` and `PHONE`). Delivery will happen asynchronously, after the response has been sent.  ### Idempotence  Requests issued with the same external_id are idempotent.  Submitting an order with an already existing `external_id`, will result in a `201` response code. In this case the response will return a representation of the already existing order in the response body. 
         * @summary Create order
         * @param {CreateOrderRequest} createOrderRequest Order to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder(createOrderRequest: CreateOrderRequest, options?: any): AxiosPromise<CreateOrder200Response> {
            return localVarFp.createOrder(createOrderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the order, identified by the given `id` in the URL 
         * @summary Retrieve order
         * @param {string} id ID of the order that should be retrieved. In case the order has an &#x60;external_id&#x60; reference supplied by the customer on creation, it\&#39;s possible to use it instead. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder(id: string, options?: any): AxiosPromise<CreateOrder201Response> {
            return localVarFp.getOrder(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of orders 
         * @summary List orders
         * @param {number} [offset] Offsets the returned list by the given number of orders. The returned orders are ordered (and offsetted) by their creation date (DESC).
         * @param {string} [campaignId] Only return results with a matching campaign_id.
         * @param {string} [externalId] Only return results with a matching external_id.
         * @param {string} [createdAtGte] Only return results where the created_at field is greater than or equal to the supplied value. The string needs to be an ISO 8601 datetime.
         * @param {string} [createdAtLte] Only return results where the created_at field is less than or equal to the supplied value. The string needs to be an ISO 8601 datetime.
         * @param {number} [limit] Limits the number of orders listed. The maximum value is 100 and the default is 10.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrders(offset?: number, campaignId?: string, externalId?: string, createdAtGte?: string, createdAtLte?: string, limit?: number, options?: any): AxiosPromise<ListOrders200Response> {
            return localVarFp.listOrders(offset, campaignId, externalId, createdAtGte, createdAtLte, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Rejects an order that is pending review, identified by the given `id` in the URL.  Approvals is a feature that requires orders to be approved by an organization admin before they are sent out. To enable approvals for your organization, please enable \'Allow approvals via API\' via the organization\'\'s \'Order Approvals\' settings from the Tremendous dashboard. 
         * @summary Reject order
         * @param {string} id ID of the order that should be rejected. In case the order has an &#x60;external_id&#x60; reference supplied by the customer on creation, it\&#39;s possible to use it instead.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rejectOrder(id: string, options?: any): AxiosPromise<CreateOrder201Response> {
            return localVarFp.rejectOrder(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI {
    /**
     * Approves an order that is pending review, identified by the given `id` in the URL.  Approvals is a feature that requires orders to be approved by an organization admin before they are sent out. To enable approvals for your organization, please enable \'Allow approvals via API\' via the organization\'\'s \'Order Approvals\' settings from the Tremendous dashboard. 
     * @summary Approve order
     * @param {string} id ID of the order that should be approved. In case the order has an &#x60;external_id&#x60; reference supplied by the customer on creation, it\&#39;s possible to use it instead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public approveOrder(id: string, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).approveOrder(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Every time you want to send out a reward through Tremendous you need to create an order for it.  > 📘 Getting started with your first order > > Our step-by-step guide walks you through everything you need > to send your first gift card through the Tremendous API: > > <strong><a style=\"display: block; margin-top: 20px;\" href=\"/docs/sending-rewards-intro\">Check it out!</a></strong>  ## Request body  <div class=\"object-schema-request-schema\">   <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">external_id</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Reference for this order, supplied by the customer.</p>  <p>When set, <code>external_id</code> makes order idempotent. All requests that use the same <code>external_id</code> after the initial order creation, will result in a response that returns the data of the initially created order. The response will have a <code>201</code> response code. These responses <strong>fail</strong> to create any further orders.</p>  <p>It also allows for retrieving by <code>external_id</code> instead of <code>id</code> only.</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">payment</code> </div> </td><td><span class=\"property-type\">object</span></td><td></td></tr>  <tr>     <td colspan=\"3\">       <details>         <summary>Show object properties</summary>         <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">funding_source_id</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Tremendous ID of the funding source that will be used to pay for the order. Use <code>balance</code> to use your Tremendous&#39;s balance.</p> </td></tr>   </tbody> </table>  </tr>  <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">reward</code> </div> </td><td><span class=\"property-type\">object</span></td><td><p>A single reward, sent to a recipient. A reward is always part of an order.</p>  <p>Either <code>products</code> or <code>campaign_id</code> must be specified.</p> </td></tr>  <tr>     <td colspan=\"3\">       <details>         <summary>Show object properties</summary>         <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"property-conditional-hint-response-only\"><td><div class=\"property-name\">   <code class=\"property-name\">id</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Tremendous ID of the reward</p> </td></tr> <tr class=\"property-conditional-hint-response-only\"><td><div class=\"property-name\">   <code class=\"property-name\">order_id</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Tremendous ID of the order this reward is part of.</p> </td></tr> <tr class=\"property-conditional-hint-response-only\"><td><div class=\"property-name\">   <code class=\"property-name\">created_at</code> </div> </td><td><span class=\"property-type\">string</span> <span class=\"property-format\">date-time</span></td><td><p>Date the reward was created</p> </td></tr> <tr class=\"property-conditional-hint-request-only\"><td><div class=\"property-name\">   <code class=\"property-name\">campaign_id</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>ID of the campaign in your account, that defines the available products (different gift cards, charity, etc.) that the recipient can choose from.</p> </td></tr> <tr class=\"property-conditional-hint-request-only\"><td><div class=\"property-name\">   <code class=\"property-name\">products</code> </div> </td><td><span class=\"property-type\">array</span> <span class=\"property-format\">string</span></td><td><p>List of IDs of product (different gift cards, charity, etc.) that will be available to the recipient to choose from.</p>  <p>Providing a <code>products</code> array will override the products made available by the campaign specified using the <code>campaign_id</code> property unless the <code>products</code> array is empty. It will <em>not</em> override other campaign attributes, like the message and customization of the look and feel.</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">value</code> </div> </td><td><span class=\"property-type\">object</span></td><td></td></tr>  <tr>     <td colspan=\"3\">       <details>         <summary>Show object properties</summary>         <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">denomination</code> </div> </td><td><span class=\"property-type\">number</span> <span class=\"property-format\">double</span></td><td><p>Amount of the reward</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">currency_code</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Currency of the reward</p> </td></tr>   </tbody> </table>  </tr>  <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">recipient</code> </div> </td><td><span class=\"property-type\">object</span></td><td><p>Details of the recipient of the reward</p> </td></tr>  <tr>     <td colspan=\"3\">       <details>         <summary>Show object properties</summary>         <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">name</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Name of the recipient</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">email</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Email address of the recipient</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">phone</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Phone number of the recipient. For non-US phone numbers, specify the country code (prefixed with +).</p> </td></tr>   </tbody> </table>  </tr>  <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">deliver_at</code> </div> </td><td><span class=\"property-type\">string</span> <span class=\"property-format\">date</span></td><td><p>Timestamp of reward delivery within the next year. Note that if date-time is provided, the time values will be ignored.</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">custom_fields</code> </div> </td><td><span class=\"property-type\">array</span></td><td></td></tr>  <tr>     <td colspan=\"3\">       <details>         <summary>Show array item type</summary>         <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">id</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Tremendous ID of the custom field</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">value</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Value of the custom field</p> </td></tr>   </tbody> </table>  </tr>  <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">language</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>Set this to translate the redemption experience for this reward. Pass a 2-letter <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\">ISO-639-1 code</a> for the desired language. Defaults to <code>en</code>.</p> </td></tr> <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">delivery</code> </div> </td><td><span class=\"property-type\">object</span></td><td><p>Details on how the reward is delivered to the recipient.</p> </td></tr>  <tr>     <td colspan=\"3\">       <details>         <summary>Show object properties</summary>         <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">method</code> </div> </td><td><span class=\"property-type\">string</span></td><td><p>How to deliver the reward to the recipient.</p>  <table>   <thead>     <tr>       <th>Delivery Method</th>       <th>Description</th>     </tr>   </thead>   <tbody>     <tr>       <td><code>EMAIL</code></td>       <td>Deliver the reward to the recipient by email</td>     </tr>     <tr>       <td><code>LINK</code></td>       <td>         <p>Deliver the reward to the recipient via a link.</p>         <p>The link can be retrieved on a successfully ordered reward via the <code>/rewards</code> or <code>/rewards/{id}</code> endpoint. That link must then be  delivered to the recipient out-of-band.</p>       </td>     </tr>     <tr>       <td><code>PHONE</code></td>       <td>Deliver the reward to the recipient by SMS</td>     </tr>   </tbody> </table> </td></tr>   </tbody> </table>  </tr>    </tbody> </table>  </tr>    </tbody> </table>  </div>   ### Funding sources  There are different ways to pay for gift cards and rewards on Tremendous. Every payment mechanism is called a \"funding source\".  You can retrieve a list of all available funding sources by using the [Funding sources API endpoint](https://tremendous.readme.io/reference/core-funding-source-index).  The Tremendous API sandbox environment comes with a single funding source that allows you to spend up to $5,000 in *fake money* to test the API. [Learn more about the sandbox environment](https://tremendous.readme.io/reference/sandbox).  The HTTP status code `200` on the response will be used to indicate success.  After processing successfully the reward gets queued to be delivered to it\'s recipient (for delivery method `EMAIL` and `PHONE`). Delivery will happen asynchronously, after the response has been sent.  ### Idempotence  Requests issued with the same external_id are idempotent.  Submitting an order with an already existing `external_id`, will result in a `201` response code. In this case the response will return a representation of the already existing order in the response body. 
     * @summary Create order
     * @param {CreateOrderRequest} createOrderRequest Order to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public createOrder(createOrderRequest: CreateOrderRequest, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).createOrder(createOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the order, identified by the given `id` in the URL 
     * @summary Retrieve order
     * @param {string} id ID of the order that should be retrieved. In case the order has an &#x60;external_id&#x60; reference supplied by the customer on creation, it\&#39;s possible to use it instead. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public getOrder(id: string, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).getOrder(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of orders 
     * @summary List orders
     * @param {number} [offset] Offsets the returned list by the given number of orders. The returned orders are ordered (and offsetted) by their creation date (DESC).
     * @param {string} [campaignId] Only return results with a matching campaign_id.
     * @param {string} [externalId] Only return results with a matching external_id.
     * @param {string} [createdAtGte] Only return results where the created_at field is greater than or equal to the supplied value. The string needs to be an ISO 8601 datetime.
     * @param {string} [createdAtLte] Only return results where the created_at field is less than or equal to the supplied value. The string needs to be an ISO 8601 datetime.
     * @param {number} [limit] Limits the number of orders listed. The maximum value is 100 and the default is 10.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public listOrders(offset?: number, campaignId?: string, externalId?: string, createdAtGte?: string, createdAtLte?: string, limit?: number, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).listOrders(offset, campaignId, externalId, createdAtGte, createdAtLte, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Rejects an order that is pending review, identified by the given `id` in the URL.  Approvals is a feature that requires orders to be approved by an organization admin before they are sent out. To enable approvals for your organization, please enable \'Allow approvals via API\' via the organization\'\'s \'Order Approvals\' settings from the Tremendous dashboard. 
     * @summary Reject order
     * @param {string} id ID of the order that should be rejected. In case the order has an &#x60;external_id&#x60; reference supplied by the customer on creation, it\&#39;s possible to use it instead.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public rejectOrder(id: string, options?: RawAxiosRequestConfig) {
        return OrdersApiFp(this.configuration).rejectOrder(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrganizationsApi - axios parameter creator
 * @export
 */
export const OrganizationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new API key. The API key used to make the request will remain active.  Created API keys are generated randomly and returned in the response. **You cannot retrieve them again.** 
         * @summary Create API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiKey: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organizations/create_api_key`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Organizations are a way to separate different parts of your business within the same Tremendous account.  You can assign users in your Tremendous team as members to any organization. Users can be members of multiple organizations at once.  API keys belong to a single organization. The API key used in a request determines on behalf of which organization the request is carried out.  **Important note:** When creating an organization, you are required to either pass `with_api_key` or `copy_settings[user]` in the request body as `true`. This ensures that your new Organization can either be accessed via the API or the Dashboard. 
         * @summary Create organization
         * @param {CreateOrganizationRequest} createOrganizationRequest Organization details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganization: async (createOrganizationRequest: CreateOrganizationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createOrganizationRequest' is not null or undefined
            assertParamExists('createOrganization', 'createOrganizationRequest', createOrganizationRequest)
            const localVarPath = `/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrganizationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve organization
         * @param {string} id ID of the organization to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrganization', 'id', id)
            const localVarPath = `/organizations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The returned list only includes the organization to which the API key belongs to, that is used for the request. 
         * @summary List organizations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrganizations: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationsApi - functional programming interface
 * @export
 */
export const OrganizationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new API key. The API key used to make the request will remain active.  Created API keys are generated randomly and returned in the response. **You cannot retrieve them again.** 
         * @summary Create API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApiKey(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateApiKey200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createApiKey(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationsApi.createApiKey']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Organizations are a way to separate different parts of your business within the same Tremendous account.  You can assign users in your Tremendous team as members to any organization. Users can be members of multiple organizations at once.  API keys belong to a single organization. The API key used in a request determines on behalf of which organization the request is carried out.  **Important note:** When creating an organization, you are required to either pass `with_api_key` or `copy_settings[user]` in the request body as `true`. This ensures that your new Organization can either be accessed via the API or the Dashboard. 
         * @summary Create organization
         * @param {CreateOrganizationRequest} createOrganizationRequest Organization details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrganization(createOrganizationRequest: CreateOrganizationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOrganization200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrganization(createOrganizationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationsApi.createOrganization']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve organization
         * @param {string} id ID of the organization to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganization(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrganization200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganization(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationsApi.getOrganization']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * The returned list only includes the organization to which the API key belongs to, that is used for the request. 
         * @summary List organizations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrganizations(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOrganizations200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOrganizations(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OrganizationsApi.listOrganizations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OrganizationsApi - factory interface
 * @export
 */
export const OrganizationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationsApiFp(configuration)
    return {
        /**
         * Creates a new API key. The API key used to make the request will remain active.  Created API keys are generated randomly and returned in the response. **You cannot retrieve them again.** 
         * @summary Create API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApiKey(options?: any): AxiosPromise<CreateApiKey200Response> {
            return localVarFp.createApiKey(options).then((request) => request(axios, basePath));
        },
        /**
         * Organizations are a way to separate different parts of your business within the same Tremendous account.  You can assign users in your Tremendous team as members to any organization. Users can be members of multiple organizations at once.  API keys belong to a single organization. The API key used in a request determines on behalf of which organization the request is carried out.  **Important note:** When creating an organization, you are required to either pass `with_api_key` or `copy_settings[user]` in the request body as `true`. This ensures that your new Organization can either be accessed via the API or the Dashboard. 
         * @summary Create organization
         * @param {CreateOrganizationRequest} createOrganizationRequest Organization details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganization(createOrganizationRequest: CreateOrganizationRequest, options?: any): AxiosPromise<CreateOrganization200Response> {
            return localVarFp.createOrganization(createOrganizationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve organization
         * @param {string} id ID of the organization to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization(id: string, options?: any): AxiosPromise<GetOrganization200Response> {
            return localVarFp.getOrganization(id, options).then((request) => request(axios, basePath));
        },
        /**
         * The returned list only includes the organization to which the API key belongs to, that is used for the request. 
         * @summary List organizations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrganizations(options?: any): AxiosPromise<ListOrganizations200Response> {
            return localVarFp.listOrganizations(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationsApi - object-oriented interface
 * @export
 * @class OrganizationsApi
 * @extends {BaseAPI}
 */
export class OrganizationsApi extends BaseAPI {
    /**
     * Creates a new API key. The API key used to make the request will remain active.  Created API keys are generated randomly and returned in the response. **You cannot retrieve them again.** 
     * @summary Create API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public createApiKey(options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).createApiKey(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Organizations are a way to separate different parts of your business within the same Tremendous account.  You can assign users in your Tremendous team as members to any organization. Users can be members of multiple organizations at once.  API keys belong to a single organization. The API key used in a request determines on behalf of which organization the request is carried out.  **Important note:** When creating an organization, you are required to either pass `with_api_key` or `copy_settings[user]` in the request body as `true`. This ensures that your new Organization can either be accessed via the API or the Dashboard. 
     * @summary Create organization
     * @param {CreateOrganizationRequest} createOrganizationRequest Organization details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public createOrganization(createOrganizationRequest: CreateOrganizationRequest, options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).createOrganization(createOrganizationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve organization
     * @param {string} id ID of the organization to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public getOrganization(id: string, options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).getOrganization(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The returned list only includes the organization to which the API key belongs to, that is used for the request. 
     * @summary List organizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public listOrganizations(options?: RawAxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).listOrganizations(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProductsApi - axios parameter creator
 * @export
 */
export const ProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a product, identified by the given `id` in the URL 
         * @summary Retrieve product
         * @param {string} id ID of the product that should be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProduct', 'id', id)
            const localVarPath = `/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of available products 
         * @summary List products
         * @param {string} [country] Comma-separated list of [Alpha-2 country codes](https://www.iban.com/country-codes), used to only retrieve products available in the provided countries
         * @param {string} [currency] Comma-separated list of [currency codes](https://www.iban.com/currency-codes), used to only retrieve products available in the provided currencies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProducts: async (country?: string, currency?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (currency !== undefined) {
                localVarQueryParameter['currency'] = currency;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a product, identified by the given `id` in the URL 
         * @summary Retrieve product
         * @param {string} id ID of the product that should be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProduct(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProduct200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProduct(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.getProduct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of available products 
         * @summary List products
         * @param {string} [country] Comma-separated list of [Alpha-2 country codes](https://www.iban.com/country-codes), used to only retrieve products available in the provided countries
         * @param {string} [currency] Comma-separated list of [currency codes](https://www.iban.com/currency-codes), used to only retrieve products available in the provided currencies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProducts(country?: string, currency?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListProducts200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProducts(country, currency, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.listProducts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsApiFp(configuration)
    return {
        /**
         * Retrieve a product, identified by the given `id` in the URL 
         * @summary Retrieve product
         * @param {string} id ID of the product that should be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProduct(id: string, options?: any): AxiosPromise<GetProduct200Response> {
            return localVarFp.getProduct(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of available products 
         * @summary List products
         * @param {string} [country] Comma-separated list of [Alpha-2 country codes](https://www.iban.com/country-codes), used to only retrieve products available in the provided countries
         * @param {string} [currency] Comma-separated list of [currency codes](https://www.iban.com/currency-codes), used to only retrieve products available in the provided currencies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProducts(country?: string, currency?: string, options?: any): AxiosPromise<ListProducts200Response> {
            return localVarFp.listProducts(country, currency, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI {
    /**
     * Retrieve a product, identified by the given `id` in the URL 
     * @summary Retrieve product
     * @param {string} id ID of the product that should be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public getProduct(id: string, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).getProduct(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of available products 
     * @summary List products
     * @param {string} [country] Comma-separated list of [Alpha-2 country codes](https://www.iban.com/country-codes), used to only retrieve products available in the provided countries
     * @param {string} [currency] Comma-separated list of [currency codes](https://www.iban.com/currency-codes), used to only retrieve products available in the provided currencies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public listProducts(country?: string, currency?: string, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).listProducts(country, currency, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RewardsApi - axios parameter creator
 * @export
 */
export const RewardsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generate a redemption link for the reward identified by the `id` in the URL 
         * @summary Generate a reward URL
         * @param {string} id ID of the reward
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateRewardLink: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('generateRewardLink', 'id', id)
            const localVarPath = `/rewards/{id}/generate_link`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate a temporary reward token identified by the `id` in the URL. These tokens are needed to render a reward when using [Tremendous Embed](https://github.com/tremendous-rewards/embed/blob/master/docs/documentation.md). The token is valid for 24 hours. 
         * @summary Generate a reward token
         * @param {string} id ID of the reward
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateRewardToken: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('generateRewardToken', 'id', id)
            const localVarPath = `/rewards/{id}/generate_embed_token`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the reward, identified by the given `id` in the URL 
         * @summary Retrieve single reward
         * @param {string} id ID of the reward that should be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReward: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getReward', 'id', id)
            const localVarPath = `/rewards/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of all created rewards 
         * @summary List rewards
         * @param {number} [offset] Offsets the returned list by the given number of rewards. The returned rewards are ordered (and offsetted) by their creation date (DESC).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRewards: async (offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rewards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resends a reward, identified by the given `id` in the URL, to its recipient. 
         * @summary Resend reward
         * @param {string} id ID of the reward that should be resent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendReward: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('resendReward', 'id', id)
            const localVarPath = `/rewards/{id}/resend`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RewardsApi - functional programming interface
 * @export
 */
export const RewardsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RewardsApiAxiosParamCreator(configuration)
    return {
        /**
         * Generate a redemption link for the reward identified by the `id` in the URL 
         * @summary Generate a reward URL
         * @param {string} id ID of the reward
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateRewardLink(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerateRewardLink200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateRewardLink(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RewardsApi.generateRewardLink']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generate a temporary reward token identified by the `id` in the URL. These tokens are needed to render a reward when using [Tremendous Embed](https://github.com/tremendous-rewards/embed/blob/master/docs/documentation.md). The token is valid for 24 hours. 
         * @summary Generate a reward token
         * @param {string} id ID of the reward
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateRewardToken(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerateRewardToken200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateRewardToken(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RewardsApi.generateRewardToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the reward, identified by the given `id` in the URL 
         * @summary Retrieve single reward
         * @param {string} id ID of the reward that should be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReward(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetReward200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReward(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RewardsApi.getReward']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of all created rewards 
         * @summary List rewards
         * @param {number} [offset] Offsets the returned list by the given number of rewards. The returned rewards are ordered (and offsetted) by their creation date (DESC).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRewards(offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListRewards200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listRewards(offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RewardsApi.listRewards']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Resends a reward, identified by the given `id` in the URL, to its recipient. 
         * @summary Resend reward
         * @param {string} id ID of the reward that should be resent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resendReward(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resendReward(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RewardsApi.resendReward']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RewardsApi - factory interface
 * @export
 */
export const RewardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RewardsApiFp(configuration)
    return {
        /**
         * Generate a redemption link for the reward identified by the `id` in the URL 
         * @summary Generate a reward URL
         * @param {string} id ID of the reward
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateRewardLink(id: string, options?: any): AxiosPromise<GenerateRewardLink200Response> {
            return localVarFp.generateRewardLink(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate a temporary reward token identified by the `id` in the URL. These tokens are needed to render a reward when using [Tremendous Embed](https://github.com/tremendous-rewards/embed/blob/master/docs/documentation.md). The token is valid for 24 hours. 
         * @summary Generate a reward token
         * @param {string} id ID of the reward
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateRewardToken(id: string, options?: any): AxiosPromise<GenerateRewardToken200Response> {
            return localVarFp.generateRewardToken(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the reward, identified by the given `id` in the URL 
         * @summary Retrieve single reward
         * @param {string} id ID of the reward that should be retrieved
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReward(id: string, options?: any): AxiosPromise<GetReward200Response> {
            return localVarFp.getReward(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of all created rewards 
         * @summary List rewards
         * @param {number} [offset] Offsets the returned list by the given number of rewards. The returned rewards are ordered (and offsetted) by their creation date (DESC).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRewards(offset?: number, options?: any): AxiosPromise<ListRewards200Response> {
            return localVarFp.listRewards(offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Resends a reward, identified by the given `id` in the URL, to its recipient. 
         * @summary Resend reward
         * @param {string} id ID of the reward that should be resent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendReward(id: string, options?: any): AxiosPromise<object> {
            return localVarFp.resendReward(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RewardsApi - object-oriented interface
 * @export
 * @class RewardsApi
 * @extends {BaseAPI}
 */
export class RewardsApi extends BaseAPI {
    /**
     * Generate a redemption link for the reward identified by the `id` in the URL 
     * @summary Generate a reward URL
     * @param {string} id ID of the reward
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardsApi
     */
    public generateRewardLink(id: string, options?: RawAxiosRequestConfig) {
        return RewardsApiFp(this.configuration).generateRewardLink(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate a temporary reward token identified by the `id` in the URL. These tokens are needed to render a reward when using [Tremendous Embed](https://github.com/tremendous-rewards/embed/blob/master/docs/documentation.md). The token is valid for 24 hours. 
     * @summary Generate a reward token
     * @param {string} id ID of the reward
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardsApi
     */
    public generateRewardToken(id: string, options?: RawAxiosRequestConfig) {
        return RewardsApiFp(this.configuration).generateRewardToken(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the reward, identified by the given `id` in the URL 
     * @summary Retrieve single reward
     * @param {string} id ID of the reward that should be retrieved
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardsApi
     */
    public getReward(id: string, options?: RawAxiosRequestConfig) {
        return RewardsApiFp(this.configuration).getReward(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of all created rewards 
     * @summary List rewards
     * @param {number} [offset] Offsets the returned list by the given number of rewards. The returned rewards are ordered (and offsetted) by their creation date (DESC).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardsApi
     */
    public listRewards(offset?: number, options?: RawAxiosRequestConfig) {
        return RewardsApiFp(this.configuration).listRewards(offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resends a reward, identified by the given `id` in the URL, to its recipient. 
     * @summary Resend reward
     * @param {string} id ID of the reward that should be resent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RewardsApi
     */
    public resendReward(id: string, options?: RawAxiosRequestConfig) {
        return RewardsApiFp(this.configuration).resendReward(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WebhooksApi - axios parameter creator
 * @export
 */
export const WebhooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Tremendous uses webhooks as a notification system for various events that happen in your account.  > 📘 Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](/docs/webhooks-1)  Every organization can define a single webhook endpoint where we send requests to, whenever an event happens.  This endpoint allows you to setup that endpoint. The URL of the endpoint can be changed by making a request to this endpoint again with the new URL.  ## Request body  <div class=\"object-schema-request-schema\">   <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">url</code> </div> </td><td><span class=\"property-type\">string</span> <span class=\"property-format\">uri</span></td><td><p>URL the webhook will make requests to</p> </td></tr>   </tbody> </table>  </div>  
         * @summary Create webhook
         * @param {CreateWebhookRequest} createWebhookRequest Webhook details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWebhook: async (createWebhookRequest: CreateWebhookRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createWebhookRequest' is not null or undefined
            assertParamExists('createWebhook', 'createWebhookRequest', createWebhookRequest)
            const localVarPath = `/webhooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createWebhookRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * > 📘 Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](/docs/webhooks-1) 
         * @summary Retrieve webhook
         * @param {string} id ID of the webhook to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhook: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getWebhook', 'id', id)
            const localVarPath = `/webhooks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all event types that can be sent to the configured webhook endpoint.  > 📘 Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](/docs/webhooks-1) 
         * @summary List events
         * @param {string} id ID of the webhook to list the events for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWebhookEvents: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listWebhookEvents', 'id', id)
            const localVarPath = `/webhooks/{id}/events`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Every organization can only have one webhook. This endpoint shows the details about that webhook.  > 📘 Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](/docs/webhooks-1) 
         * @summary List webhooks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWebhooks: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/webhooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Making a request to this endpoint will cause our system to trigger a webhook for the specified event. This can be very useful when testing the setup that processes webhooks on your end.  > 📘 Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](/docs/webhooks-1) 
         * @summary Test webhook
         * @param {string} id ID of the webhook to test
         * @param {SimulateWebhookRequest} simulateWebhookRequest Webhook details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        simulateWebhook: async (id: string, simulateWebhookRequest: SimulateWebhookRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('simulateWebhook', 'id', id)
            // verify required parameter 'simulateWebhookRequest' is not null or undefined
            assertParamExists('simulateWebhook', 'simulateWebhookRequest', simulateWebhookRequest)
            const localVarPath = `/webhooks/{id}/simulate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerApiKey required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(simulateWebhookRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebhooksApi - functional programming interface
 * @export
 */
export const WebhooksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebhooksApiAxiosParamCreator(configuration)
    return {
        /**
         * Tremendous uses webhooks as a notification system for various events that happen in your account.  > 📘 Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](/docs/webhooks-1)  Every organization can define a single webhook endpoint where we send requests to, whenever an event happens.  This endpoint allows you to setup that endpoint. The URL of the endpoint can be changed by making a request to this endpoint again with the new URL.  ## Request body  <div class=\"object-schema-request-schema\">   <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">url</code> </div> </td><td><span class=\"property-type\">string</span> <span class=\"property-format\">uri</span></td><td><p>URL the webhook will make requests to</p> </td></tr>   </tbody> </table>  </div>  
         * @summary Create webhook
         * @param {CreateWebhookRequest} createWebhookRequest Webhook details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWebhook(createWebhookRequest: CreateWebhookRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateWebhook200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWebhook(createWebhookRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.createWebhook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * > 📘 Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](/docs/webhooks-1) 
         * @summary Retrieve webhook
         * @param {string} id ID of the webhook to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebhook(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateWebhook200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebhook(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.getWebhook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Lists all event types that can be sent to the configured webhook endpoint.  > 📘 Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](/docs/webhooks-1) 
         * @summary List events
         * @param {string} id ID of the webhook to list the events for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWebhookEvents(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWebhookEvents200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWebhookEvents(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.listWebhookEvents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Every organization can only have one webhook. This endpoint shows the details about that webhook.  > 📘 Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](/docs/webhooks-1) 
         * @summary List webhooks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWebhooks(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWebhooks200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWebhooks(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.listWebhooks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Making a request to this endpoint will cause our system to trigger a webhook for the specified event. This can be very useful when testing the setup that processes webhooks on your end.  > 📘 Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](/docs/webhooks-1) 
         * @summary Test webhook
         * @param {string} id ID of the webhook to test
         * @param {SimulateWebhookRequest} simulateWebhookRequest Webhook details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async simulateWebhook(id: string, simulateWebhookRequest: SimulateWebhookRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.simulateWebhook(id, simulateWebhookRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.simulateWebhook']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WebhooksApi - factory interface
 * @export
 */
export const WebhooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebhooksApiFp(configuration)
    return {
        /**
         * Tremendous uses webhooks as a notification system for various events that happen in your account.  > 📘 Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](/docs/webhooks-1)  Every organization can define a single webhook endpoint where we send requests to, whenever an event happens.  This endpoint allows you to setup that endpoint. The URL of the endpoint can be changed by making a request to this endpoint again with the new URL.  ## Request body  <div class=\"object-schema-request-schema\">   <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">url</code> </div> </td><td><span class=\"property-type\">string</span> <span class=\"property-format\">uri</span></td><td><p>URL the webhook will make requests to</p> </td></tr>   </tbody> </table>  </div>  
         * @summary Create webhook
         * @param {CreateWebhookRequest} createWebhookRequest Webhook details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWebhook(createWebhookRequest: CreateWebhookRequest, options?: any): AxiosPromise<CreateWebhook200Response> {
            return localVarFp.createWebhook(createWebhookRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * > 📘 Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](/docs/webhooks-1) 
         * @summary Retrieve webhook
         * @param {string} id ID of the webhook to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhook(id: string, options?: any): AxiosPromise<CreateWebhook200Response> {
            return localVarFp.getWebhook(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all event types that can be sent to the configured webhook endpoint.  > 📘 Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](/docs/webhooks-1) 
         * @summary List events
         * @param {string} id ID of the webhook to list the events for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWebhookEvents(id: string, options?: any): AxiosPromise<ListWebhookEvents200Response> {
            return localVarFp.listWebhookEvents(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Every organization can only have one webhook. This endpoint shows the details about that webhook.  > 📘 Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](/docs/webhooks-1) 
         * @summary List webhooks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWebhooks(options?: any): AxiosPromise<ListWebhooks200Response> {
            return localVarFp.listWebhooks(options).then((request) => request(axios, basePath));
        },
        /**
         * Making a request to this endpoint will cause our system to trigger a webhook for the specified event. This can be very useful when testing the setup that processes webhooks on your end.  > 📘 Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](/docs/webhooks-1) 
         * @summary Test webhook
         * @param {string} id ID of the webhook to test
         * @param {SimulateWebhookRequest} simulateWebhookRequest Webhook details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        simulateWebhook(id: string, simulateWebhookRequest: SimulateWebhookRequest, options?: any): AxiosPromise<string> {
            return localVarFp.simulateWebhook(id, simulateWebhookRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WebhooksApi - object-oriented interface
 * @export
 * @class WebhooksApi
 * @extends {BaseAPI}
 */
export class WebhooksApi extends BaseAPI {
    /**
     * Tremendous uses webhooks as a notification system for various events that happen in your account.  > 📘 Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](/docs/webhooks-1)  Every organization can define a single webhook endpoint where we send requests to, whenever an event happens.  This endpoint allows you to setup that endpoint. The URL of the endpoint can be changed by making a request to this endpoint again with the new URL.  ## Request body  <div class=\"object-schema-request-schema\">   <table>   <thead>     <tr>       <th>Property</th>       <th>Type</th>       <th>Description</th>     </tr>   </thead>   <tbody class=\"object-schema-table-body\">     <tr class=\"\"><td><div class=\"property-name\">   <code class=\"property-name\">url</code> </div> </td><td><span class=\"property-type\">string</span> <span class=\"property-format\">uri</span></td><td><p>URL the webhook will make requests to</p> </td></tr>   </tbody> </table>  </div>  
     * @summary Create webhook
     * @param {CreateWebhookRequest} createWebhookRequest Webhook details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public createWebhook(createWebhookRequest: CreateWebhookRequest, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).createWebhook(createWebhookRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * > 📘 Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](/docs/webhooks-1) 
     * @summary Retrieve webhook
     * @param {string} id ID of the webhook to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public getWebhook(id: string, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).getWebhook(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists all event types that can be sent to the configured webhook endpoint.  > 📘 Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](/docs/webhooks-1) 
     * @summary List events
     * @param {string} id ID of the webhook to list the events for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public listWebhookEvents(id: string, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).listWebhookEvents(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Every organization can only have one webhook. This endpoint shows the details about that webhook.  > 📘 Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](/docs/webhooks-1) 
     * @summary List webhooks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public listWebhooks(options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).listWebhooks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Making a request to this endpoint will cause our system to trigger a webhook for the specified event. This can be very useful when testing the setup that processes webhooks on your end.  > 📘 Learn more about Webhooks > > Our guide explains everything you need to know about the Tremendous webhooks: > [Read it here](/docs/webhooks-1) 
     * @summary Test webhook
     * @param {string} id ID of the webhook to test
     * @param {SimulateWebhookRequest} simulateWebhookRequest Webhook details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public simulateWebhook(id: string, simulateWebhookRequest: SimulateWebhookRequest, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).simulateWebhook(id, simulateWebhookRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



